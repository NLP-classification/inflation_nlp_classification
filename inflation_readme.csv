,repo,language,readme_contents
0,cashapp/InflationInject,Kotlin,"# Inflation Injection

Constructor-inject views during XML layout inflation.

Looking for Assisted Inject? It's [built in to Dagger now](https://dagger.dev/dev-guide/assisted-injection.html)!


## Usage

Write your layout XML like normal.

```xml
<LinearLayout>
  <com.example.CustomView/>
  <TextView/>
</LinearLayout>
```

Use `@InflationInject` in `CustomView`:

```java
public final class CustomView extends View {
  private final Picasso picasso;
  
  @InflationInject
  public CustomView(
    @Inflated Context context,
    @Inflated AttributeSet attrs,
    Picasso picasso
  ) {
    super(context, attrs);
    this.picasso = picasso;
  }
  
  // ...
}
```

In order to allow Dagger to create your custom views, add `@InflationModule` to a Dagger module and
add the generated module name to its `includes=`.

```java
@InflationModule
@Module(includes = InflationInject_PresenterModule.class)
abstract class PresenterModule {}
```

The annotation processor will generate the `InflationInject_PresenterModule` for us. It will not be
resolved until the processor runs.

Finally, inject `InflationInjectFactory` and add it to your `LayoutInflater`.

```java
InflationInjectFactory factory = DaggerMainActivity_MainComponent.create().factory();
getLayoutInflater().setFactory(factory);

setContentView(R.layout.main_view);
```


## Download

```groovy
repositories {
  mavenCentral()
}
dependencies {
  implementation 'app.cash.inject:inflation-inject:1.0.1'
  annotationProcessor 'app.cash.inject:inflation-inject-processor:1.0.1'
}
```

<details>
<summary>Snapshots of the development version are available in Sonatype's snapshots repository.</summary>
<p>

```groovy
repositories {
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots/'
  }
}
dependencies {
  implementation 'app.cash.inject:inflation-inject:1.1.0-SNAPSHOT'
  annotationProcessor 'app.cash.inject:inflation-inject-processor:1.1.0-SNAPSHOT'
}
```

</p>
</details>


# License

    Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

"
1,InflationX/ViewPump,Kotlin,"ViewPump
========

View inflation you can intercept.

ViewPump installs a custom LayoutInflater via a ContextThemeWrapper and provides an API of pre/post-inflation interceptors.

## Getting started

### Dependency

Include the dependency [Download (.aar)](http://search.maven.org/remotecontent?filepath=io/github/inflationx/viewpump/2.0.3/viewpump-2.0.3.aar) :

```groovy
dependencies {
    implementation 'io.github.inflationx:viewpump:2.0.3'
}
```

### Usage

Define your interceptor. Below is a somewhat arbitrary example of a post-inflation interceptor that prefixes the text in a TextView.

```java
public class TextUpdatingInterceptor implements Interceptor {
    @Override
    public InflateResult intercept(Chain chain) {
        InflateResult result = chain.proceed(chain.request());
        if (result.view() instanceof TextView) {
            // Do something to result.view()
            // You have access to result.context() and result.attrs()
            TextView textView = (TextView) result.view();
            textView.setText(""[Prefix] "" + textView.getText());
        }
        return result;
    }
}
```

Below is an example of a pre-inflation interceptor that returns a CustomTextView when a TextView was defined in the layout's XML.

```java
public class CustomTextViewInterceptor implements Interceptor {
    @Override
    public InflateResult intercept(Chain chain) {
        InflateRequest request = chain.request();
        if (request.name().endsWith(""TextView"")) {
            CustomTextView view = new CustomTextView(request.context(), request.attrs());
            return InflateResult.builder()
                    .view(view)
                    .name(view.getClass().getName())
                    .context(request.context())
                    .attrs(request.attrs())
                    .build();
        } else {
            return chain.proceed(request);
        }
    }
}
```

### Installation

Add your interceptors to the `ViewPump.builder()`, in your `Application` class in the `#onCreate()` method and `init` the `ViewPump`. The order of the interceptors is important since they form the interceptor chain of requests and results.

An interceptor may choose to return a programmatically instantiated view rather than letting the default inflation occur, in which case interceptors added after it will be skipped. For this reason, it is better to add your post-inflation interceptors before the pre-inflation interceptors

```java
@Override
public void onCreate() {
    super.onCreate();
    ViewPump.init(ViewPump.builder()
                .addInterceptor(new TextUpdatingInterceptor())
                .addInterceptor(new CustomTextViewInterceptor())
                .build());
    //....
}
```

### Inject into Context

Wrap the `Activity` Context:

```java
@Override
protected void attachBaseContext(Context newBase) {
    super.attachBaseContext(ViewPumpContextWrapper.wrap(newBase));
}
```

_You're good to go!_

To see more ideas for potential use cases, check out the [Recipes](https://github.com/InflationX/ViewPump/wiki/Recipes) wiki page.

# Collaborators

- [@jbarr21](https://github.com/jbarr21)
- [@chrisjenx](https://github.com/chrisjenx)

# Licence

    Copyright 2017 InflationX

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"
2,rdeits/iris-distro,Matlab,"Introduction
============

This package contains the IRIS algorithm for iterative convex regional inflation by semidefinite programming, implemented in C++ with bindings for Python. It is designed to take an environment containing many (convex) obstacles and a start point, and to compute a large convex obstacle-free region. This region can then be used to define linear constraints for some other objective function which the user might want to optimize over the obstacle-free space. The algorithm is described in:

R.&nbsp;L.&nbsp;H. Deits and R.&nbsp;Tedrake, &ldquo;Computing large convex regions of
  obstacle-free space through semidefinite programming,&rdquo; <em>Workshop on the Algorithmic Fundamentals of Robotics</em>, Istanbul, Aug. 2014.
  [Online]. Available:
  <a href='http://groups.csail.mit.edu/robotics-center/public_papers/Deits14.pdf'>http://groups.csail.mit.edu/robotics-center/public_papers/Deits14.pdf</a>

[![Build Status](https://travis-ci.org/rdeits/iris-distro.svg)](https://travis-ci.org/rdeits/iris-distro)

MATLAB Support
==============

A pure-MATLAB implementation of IRIS is also included in `src/matlab`. This will be slower and less flexible than the Python and C++ versions, but may be useful for legacy code.

Requirements
============

Ubuntu (with apt-get):

	pkg-config
	cmake
	libgmp-dev

Mac OSX (with homebrew):

	pkg-config
	cmake
	gmp

You'll also need some python packages to build and use the python bindings. You can install them on ubuntu with these apt-get packages:

    python-numpy
    python-scipy
    python-matplotlib
    python-nose
    cython

Or you can install the `liblapack-dev`, `libblas-dev`, and `gfortran` packages from apt-get, and then install the python modules with pip:

	pip install -r python_requirements.txt

You'll also need a license for the Mosek optimization toolbox <https://www.mosek.com/> (this package includes a downloader for the Mosek code, but you have to get your own license). Mosek has free licenses available for academic use.

Installation
============

This project is configured as a standard CMake project, so the general build process is:

	mkdir build
	cd build
	cmake ..
	make

------------------------------
Installation without externals
------------------------------
By default, IRIS will build its external dependencies as part of the build process. If you want to turn any or all of them off, you can set the `WITH_EIGEN`, `WITH_CDD`, and `WITH_MOSEK` options to `OFF` using cmake. The easiest way to do that is to run:

    cd build
    ccmake .

which will launch a terminal-based GUI to let you change those options. 

If you're using IRIS as part of another project with cmake, you can just set the CMAKE_CACHE_ARGS to include `-DIRIS_WITH_EIGEN:BOOL=OFF` etc. For more information, see: <http://www.cmake.org/cmake/help/v3.0/module/ExternalProject.html>.

Example Usage
=============

Python wrapper
--------------

	python -m irispy.test.test_iris_2d

C++ library
-----------

See `iris/src/iris_demo.cpp` for a basic usage example.

Examples
========

Here are some animations of the algorithm running in various
environments:

2-dimensional space, 30 obstacles:

![](https://rdeits.github.io/iris-distro/examples/poly_2d_N30/animation.gif)

2-dimensional space, 50 obstacles:

![](https://rdeits.github.io/iris-distro/examples/poly_2d_N50/animation.gif)

2-dimensional space, 50 obstacles:

![](https://rdeits.github.io/iris-distro/examples/poly_2d_N50_2/animation.gif)

2-dimensional space, 1000 obstacles:

![](https://rdeits.github.io/iris-distro/examples/poly_2d_N1000/animation.gif)

3-dimensional space:

![](https://rdeits.github.io/iris-distro/examples/poly_3d/animation.gif)

3-dimensional space:

![](https://rdeits.github.io/iris-distro/examples/poly_3d_2/animation.gif)

3-dimensional configuration space of a rod-shaped robot translating and yawing:

![](https://rdeits.github.io/iris-distro/examples/c_space_3d/animation.gif)

3-dimensional slice of a 4-dimensional region among 4D obstacles:

![](https://rdeits.github.io/iris-distro/examples/poly_4d/animation.gif)

Example Application
===================
This is a demonstration of path-planning for a simple UAV model around obstacles. Rather than constraining that the UAV be outside the obstacles, we seed several IRIS regions and require that the UAV be inside one of those regions at each time step. This turns a non-convex problem into a mixed-integer convex problem, which we can solve to its global optimum. You can try this out by running `iris.test.test_uav_demo();` or `iris.test.test_uav_demo('4d');`

![](http://rdeits.github.io/iris-distro/examples/uav/demo_uav.png)
"
3,uhussain/WebCrawlerForOnlineInflation,Python,"# Table of Contents 
1. [Introduction](README.md#introduction)
2. [Pipeline](README.md#pipeline)
3. [Requirements](README.md#requirements)
4. [Environment Set Up](README.md#Environment%20Setup)
5. [Repository Structure and Run Instructions](README.md#Repository%20Structure%20and%20Run%20Instructions)


# Introduction
**Price Crawler: Tracking Price Inflation**

This is a project completed in 3 weeks during the Insight Data Engineering Program (New York, 20B Session). The goal of this project is to calculate inflation rates from first principles.
That means calculating inflation rate using prices of goods and services sold online.

In this project, I built a pipleine to use petabytes of web page data contained in the [Common Crawl](https://commoncrawl.org/), an archive of web page content 
to calculate inflation rates. The results can be used to enhance investment strategies or by businesses in deciding the cost of products. A sample batch job has 
been executed using online laptop prices ($500-$800) and the inflation rate in 2019 is measured to be 4.8% which is more than double the annual inflation rate of 
2.3% reported by Bureau of labor statistics for 2019. A recording of the WebUI is also available [here](https://www.youtube.com/watch?v=mNcodsH5254&feature=youtu.be). 

# Pipeline
I built a data pipeline that utilizes petabytes of publicly available web page data to **Calculate Inflation rates from first principles (Prices of Products)**

![pipeline](static/crawler_pipeline.png)

1. AWS Athena to query indexed WARC Files using HTTP header information in WARC Files
    * Scan 0(100 GB) data instead of PB
2. **Keys** to webpages of interest saved in parquet files on S3
3. Parquet + WARC input to Spark with distributed processing over O(10 GB) data per job
4. Cleaning, filtering and aggregating Product and Price tables with Pandas in Python
5. Plotting and tracking price trends with Dash

# Requirements

1)  S3:  Set up and S3 bucket.  In this case:  s3://athena-east-2-usama/
2)  Athena:  Open Athena on AWS.  Follow the instructions to set up ""Running SQL Queries with Athena"" here:  https://commoncrawl.org/2018/03/index-to-warc-files-and-urls-in-columnar-format/
3)  Run Athena with the example in https://github.com/uhussain/WebCrawlerForOnlineInflation/athena/athena_instructions.txt
4)  Start EMR in Amazon with Spark and Hadoop.  SSH in.
5)  Add the following to ~/.bashrc and source ~/.bashrc:
export SPARK_HOME=/usr/lib/spark
export PYTHONPATH=$SPARK_HOME/python/lib/py4j-0.10.7-src.zip:$PYTHONPATH  
export PYTHONPATH=$SPARK_HOME/python:$SPARK_HOME/python/build:$PYTHONPATH
6)  Install the following on EMR (both master and workers) with ""pip install --user"":  warcio, boto3, bs4, nltk 
7)  Execute main.py in master node.

**Languages** 
* Bash
* Python 3.7
* Pandas

**Technologies**
* Spark
* AWS Athena
* Dash/Plotly

**Third-Party Libraries**
* AWS CLI

# Environment Setup
Install and configure [AWS](https://aws.amazon.com/cli/) and the open-source tool and setup an AWS EMR cluster. At launch time, emr-5.30.0 version was used.
It comes with Python version 3.7.6, pyspark version 2.4.5-amzn-0 and Zeppelin 0.8.2.


**AWS EMR Clusters Setup**

Currently using only one master node and two core nodes (can be scaled up)

# Repository Structure and Run Instructions


`./athena/` contains instructions on how to query common crawl data with AWS Athena .

`./spark/` contains the main.py spark script to launch spark jobs using the output from athena query

```
spark-submit ./spark/main.py -in walmart_laptops_2018 -o walmart_parquet_2018
```

`./pandas/`contains python script to clean the output from spark and provide csv file to dashapp/app.py

```
python3 pandas/cleaner.py
```

`./dashapp/` contains a dash app to visualize trends in online prices in laptops across time

```
python3 dashapp/price_tracker.py
```

# Development work
I built a rapid prototype of the pipeline during the first week to understand the scope of the problem and learn textual and HTML content analysis. 
Ingested data from AWS S3, cleaned and filtered with single-threaded python script and aggregated product information in a local Amazon DyanmoDB database

`./prototype/` contains all python configuration files and scripts for running the project locally and output product info to a local amazon dynamoDB table

Languages 
* Bash
* Python 3.7

Technologies

* Amazon DynamoDB

"
4,sandes/zipfly,Python,"[![Build Status](https://img.shields.io/circleci/build/github/sandes/zipfly/master)](https://app.circleci.com/pipelines/github/sandes/zipfly)
![GitHub release (latest by date)](https://img.shields.io/github/v/release/buzonio/zipfly)
[![Downloads](https://pepy.tech/badge/zipfly)](https://pepy.tech/project/zipfly)

# ZipFly

ZipFly is a zip archive generator based on zipfile.py.
It was created by <a href=""https://santiagodebus.com"" target=""blank"">Santiago Debus</a> to generate very large ZIP archives for immediate sending out to clients, or for writing large ZIP archives without memory inflation.

# Requirements
Python 3.6+ Added <a href=""https://docs.python.org/3/library/zipfile.html#zipfile-objects"" target=""blank"">support</a> for writing to unseekable streams.

# Install
    pip3 install zipfly

# Basic usage, compress on-the-fly during writes
Using this library will save you from having to write the Zip to disk. Some data will be buffered by the zipfile deflater, but memory inflation is going to be very constrained. Data will be written to destination by default at regular 32KB intervals.


`ZipFly` defaults attributes:<br>    
- <b>paths:</b> [ ] <br/>
- <b>mode:</b> (write) w <br/>
- <b>chunksize:</b> (bytes) 32768 <br/>
- <b>compression:</b> Stored <br/>
- <b>allowZip64:</b> True <br/>
- <b>compresslevel:</b> None <br/>
- <b>storesize:</b> (bytes) 0 <br/>
- <b>encode:</b> utf-8 <br/>

<br/>



`paths` <b>list of dictionaries:</b>

|                   |.                          
|----------------   |-------------------------------      
|**fs**             |Should be the path to a file on the filesystem            
|**n** *(Optional)* |Is the name which it will have within the archive <br> (by default, this will be the same as **fs**)

<br>

```python

    import zipfly

    paths = [
        {
            'fs': '/path/to/large/file'
        },
    ]

    zfly = zipfly.ZipFly(paths = paths)

    generator = zfly.generator()
    print (generator)
    # <generator object ZipFly.generator at 0x7f74d52bcc50>


    with open(""large.zip"", ""wb"") as f:
        for i in generator:
            f.write(i)

```


# Examples

> <b>Streaming multiple files in a zip with <a href=""https://github.com/sandes/zipfly/blob/master/examples/streaming_django.py"" target=""_blank"">Django</a> or <a href=""https://github.com/sandes/zipfly/blob/master/examples/streaming_flask.py"" target=""_blank"">Flask</a></b>
Send forth large files to clients with the most popular frameworks

> <b>Create paths</b>
Easy way to create the array `paths` from a parent folder.

> <b>Predict the size of the zip file before creating it</b>
Use the `BufferPredictionSize` to compute the correct size of the resulting archive before creating it.

> <b>Streaming a large file</b>
Efficient way to read a single very large binary file in python

> <b>Set a comment</b>
Your own comment in the zip file


# Maintainer
Santiago Debus <a href=""http://santiagodebus.com/"" target=""_blank"">(@santiagodebus.com)</a><br>


# License
This library was created by Buzon.io and is released under the MIT. Copyright 2021 Cardallot, Inc.
"
5,B3nedikt/ViewPump,Kotlin,"[![Maven Central](https://maven-badges.herokuapp.com/maven-central/dev.b3nedikt.viewpump/viewpump/badge.svg)](https://maven-badges.herokuapp.com/maven-central/dev.b3nedikt.viewpump/viewpump)

# ViewPump 4.0.10

View inflation you can intercept using an API of pre/post-inflation interceptors.

## Getting started

### Dependency

Include the dependencies:

```groovy
dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'

    implementation 'dev.b3nedikt.viewpump:viewpump:4.0.10'
}
```

### Usage

Define your interceptor. Below is a somewhat arbitrary example of a post-inflation interceptor that prefixes the text in a TextView.

```java
public class TextUpdatingInterceptor implements Interceptor {

  @Override
  public InflateResult intercept(Chain chain) {
    InflateResult result = chain.proceed(chain.request());
    if (result.view() instanceof TextView) {
      // Do something to result.view()
      // You have access to result.context() and result.attrs()
      TextView textView = (TextView) result.view();
      textView.setText(""[Prefix] "" + textView.getText());
    }
    return result;
  }
}
```

Below is an example of a pre-inflation interceptor that returns a CustomTextView when a TextView was defined in the layout's XML.

```java
public class CustomTextViewInterceptor implements Interceptor {

  @NotNull
  @Override
  public InflateResult intercept(Chain chain) {
    InflateRequest request = chain.request();
    View view = inflateView(
      request.getName(),
      request.getContext(),
      request.getAttrs()
    );

    if (view != null) {
      return new InflateResult(
        view,
        request.getName(),
        request.getContext(),
        request.getAttrs()
      );
    } else {
      return chain.proceed(request);
    }
  }

  @Nullable
  private View inflateView(String name, Context context, AttributeSet attrs) {
    if (""TextView"".equals(name)) {
      return new CustomTextView(context, attrs);
    }
    return null;
  }
}
```

### Installation

Add your interceptors to the `ViewPump.builder()`, in your `Application` class in the `#onCreate()` method and `init` the `ViewPump`. The order of the interceptors is important since they form the interceptor chain of requests and results.

An interceptor may choose to return a programmatically instantiated view rather than letting the default inflation occur, in which case interceptors added after it will be skipped. For this reason, it is better to add your post-inflation interceptors before the pre-inflation interceptors

```java
@Override
public void onCreate() {
    super.onCreate();

    ViewPump.init(new TextUpdatingInterceptor(), new CustomTextViewInterceptor());
    //....
}
```

### Inject into Context

Add the following to your base activitiy:

```java
public class MainActivity extends AppCompatActivity {

    private AppCompatDelegate appCompatDelegate = null;

    ...

    @NonNull
    @Override
    public AppCompatDelegate getDelegate() {
        if (appCompatDelegate == null) {
            appCompatDelegate = new ViewPumpAppCompatDelegate(
                    super.getDelegate(),
                    this
            );
        }
        return appCompatDelegate;
    }
}
```

For practical examples see my libraries [Restring](https://github.com/B3nedikt/restring) or [AppLocale](https://github.com/B3nedikt/AppLocale).

## Collaborators

This library was originally created by:

- [@jbarr21](https://github.com/jbarr21)
- [@chrisjenx](https://github.com/chrisjenx)

My fork has nearly all the code changed though and has a slightly different API.

## Licence

    Copyright 2017 InflationX & Contributors

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"
6,inflationcoin/inflationcoin,C++,"InflationCoin - IFLT

InflationCoin is an X11 PoW/PoS coin. It is a coin that integrated with true random super bonus block features. It uses high PoS as a way of distributing fairly the coins to community.

- X11 hash algorithm, PoW/PoS mixed
- 5 transaction confirmations
- 70 minted block confirmations
- Total coins will be 10 billions
- The coin will be a pure PoS coin after 3 months of PoW mining.
- A 2.5% premine for bounties and to fund servers and dev expenses

PoW details:
- 60 sec PoW block target time
- difficulty retarget each block for PoW
- Payout will be 1,000 coins per block
- Every day there will be a random super block with 1000X normal payment (1,000,000 coins), it is true randomness and can't be taken advantage by big hashpowers
- PoW will be terminated after 90 days.

PoS details:
- 60 sec PoS block time
- diff retarget each block for PoS
- minimum hold for PoS: 24 hours
- maximum hold for PoS: 60 days
- Variable PoS annual payout rate:
	- 1st year: 800%
	- 2nd year: 80%
	- 3rd year: 8%
	- subsequent years: 4%

Ports:
connection:	11370
RPC:			11371
"
7,anishsingh20/Time-series-analysis-of-Inflation-rates-using-ShinyDashboard,R,"# Analzying-Inflation-Rates-Worldwide-using-ShinyDashboard

This project aims at studying and analyzing the inflation rates of countries and major economic unions globally. The dataset is a public dataset downloaded from International Monetary Fund(IMF) which consists of the inflation rates of countries from 1980 to 2017 and the projected inflation rates of the countries till 2022.

After basic descriptive and exploratory data analysis, I have made a __Shiny Dashboard__ in R to visualize the inflation rates of countries, economic trade unions as well as world. Link to the deployed app is added below.

Link to the app--https://anishwalia20.shinyapps.io/AnalysisofInflationRates/


The folder __Inflation-Rates__ contains the dashboard's code and its implementation in R. For visualizing I have used __'highcharter'__ package which is an amazing package to make beautiful and amazing plots in R for web apps and dashboards.The syntax for 'highcharter' is similar to 'ggplot2' syntax.

More details about the package can be found at this link- http://jkunst.com/highcharter/ .



### What is Inflation rate?

Inflation rates are the general rate at which price of the goods and services within a particular economy are rising and the __purchasing power__ of the currency is declining due to the highly priced goods. High inflation is definately not good for an economy because it will always reduce the value for money. In general central banks of an ecomony tries to and work towards reducing the inflation rate and avoiding __deflation__. Very high inflation rates will devalue the country's currency and will result in further depreciation of currency's exchange value.

Say for example India's current inflation rate is 10%, this means that the __INR(indian rupees)__ has depreciated by 10% against any other foreign currency. This greatly affects the payments received by the exporting bodies, import prices of goods etc. _*Imported goods usually gets costlier and exported goods will get cheaper when the nations's currency is weaker and is depreciating against any other nation's whose currency is stronger and appreciating*_.

__Deflation__ is opposite of inflation. Deflation occurs when the inflation rates become negetive or are below 0. Deflation is more harmful and dangerous for an economy because it means that the prices of goods and services are going to decrease. Now this sounds amazing for consumers like us. But what actually happens is that the demand of goods and services have declined over a long term of time which has lead to over-production og goods and services. Deflation is more evil then inflation. Deflation causes unemployment, loss of jobs, decline in money wages, decreasing exxpenditure and decreasing demands of goods. This results in losses for business owners and Producers in the economy. It causes decrease in National Income, employment, and output. This directly indicates that a __recession__ is on its way. This brings job losses , declining wages and a big hit to the stock portfolio. Deflation slows economy's growth and causes stagnation of economic acivities. It is a time of depression for all businesses and producers. As prices fall , people defer(postpone) purchases in hope of a better lower price deal. Due to this companies and firms have to cut down the cost of their goods and products which directly affects the wages of the employees which have to be lowered. 


------

### Inflation Rates of India over time

![github plot](https://github.com/anishsingh20/Analzying-Inflation-Rates-Worldwide/blob/master/Plots/Inf-India.png)


"
8,stream-utils/inflation,JavaScript,"# inflation

[![NPM version](https://badge.fury.io/js/inflation.svg)](http://badge.fury.io/js/inflation)
[![Build Status](https://travis-ci.org/stream-utils/inflation.svg?branch=master)](https://travis-ci.org/stream-utils/inflation)
[![Coverage Status](https://img.shields.io/coveralls/stream-utils/inflation.svg?branch=master)](https://coveralls.io/r/stream-utils/inflation)

Automatically unzip an HTTP stream.

## API

```js
var inflate = require('inflation')
```

### inflate(stream, options)

Returns a stream that emits inflated data from the given stream.

Options:

- `encoding` - The encoding of the stream (`gzip` or `deflate`).
  If not given, will look in `stream.headers['content-encoding']`.

## Example

```js
var inflate = require('inflation')
var raw     = require('raw-body')

http.createServer(function (req, res) {
  raw(inflate(req), 'utf-8', function (err, string) {
    console.dir(string)
  })
})
```
"
9,palewire/cpi,Jupyter Notebook,"### Links

* Docs: [palewi.re/docs/cpi/](https://palewi.re/docs/cpi/)
* Code: [github.com/datadesk/cpi](https://github.com/datadesk/cpi/)
* Issues: [github.com/datadesk/cpi/issues](https://github.com/datadesk/cpi/issues)
* Packaging: [pypi.python.org/pypi/cpi](https://pypi.python.org/pypi/cpi)
* Testing: [github.com/datadesk/cpi/actions](https://github.com/datadesk/cpi/actions)
"
10,p0pr0ck5/lua-resty-tarpit,Lua,"##Name

lua-resty-tarpit - capture and delay unwanted requests

##Status

lua-resty-tarpit is in early development and is considered production ready.

##Description

lua-resty-tarpit provides rate-limit protection for sensitive resources. It leverages Nginx's non-blocking archtitecture to artificially increase response latency for resources that are repeatedly accessed. This functionality is designed to protect resources that are publicly accessible, but vulnerable to some form of brute-force attack (e.g., web application admnistrative login pages). It was inspired by the TARPIT iptables module.

##Installation

Clone the lua-resty-tarpit repo into Nginx/OpenResty's Lua package path. Module setup and configuration is detailed in the synopsis.

##Synopsis

```lua
	http {
		lua_shared_dict tarpit 10m;
	}

	server {
		location /login { # or whatever resource you want to protect
			access_by_lua '
				local t = require ""tarpit""
				t.tarpit(
					5, -- request limit
					5, -- reset timer
					1, -- delay time
				)
			';
		}
	}
```

##Limitations

lua-resty-tarpit is undergoing continual development and improvement, and as such, may be limited in its functionality and performance. Currently known limitations can be found within the GitHub issue tracker for this repo. 

##License

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>

##Bugs

Please report bugs by creating a ticket with the GitHub issue tracker.
"
11,datasets/inflation,Python,"Inflation, GDP deflator (annual %) and Inflation, consumer prices (annual %) for most countries in the world when it has been measured. 

## Data

The data comes from [The World Bank (CPI)](http://api.worldbank.org/indicator/NY.GDP.DEFL.KD.ZG?format=csv), [The World Bank (GDP)](http://api.worldbank.org/indicator/FP.CPI.TOTL.ZG?format=csv)  and is collected from 1973 to 2014. There are some values missing from data so users of the data will have to *guess* what should be in the empty slots.

The actual download happens via [The World Bank's API (with csv as the requested format) (CPI)](http://api.worldbank.org/indicator/FP.CPI.TOTL.ZG?format=csv), [The World Bank's API (with csv as the requested format) (GDP)](http://api.worldbank.org/indicator/NY.GDP.DEFL.KD.ZG?format=csv).

## Preparation

They are parsed via the script **process.py** located in scripts.

## License

This Data Package is licensed by its maintainers under the [Public Domain Dedication and License (PDDL)](http://opendatacommons.org/licenses/pddl/1.0/)."
12,romainpiel/Michelangelo,Java,"# Michelangelo

Layout inflation library for Android which uses annotation processing to write the code you don't want to write and simplify your compound views.

## How to use

An example of use:

```java
@InflateLayout(R.layout.custom_view)
public class MyCustomView extends FrameLayout {

    public MyCustomView(Context context) {
        super(context);
    }

    @AfterInflate
    public void updateTextView() {
        ((TextView) findViewById(R.id.my_text_view)).setText(""hey!"");
    }
}
```

`R.layout.custom_view`:
```xml
<merge xmlns:android=""http://schemas.android.com/apk/res/android"">

    <TextView
            android:id=""@+id/my_text_view""
            android:layout_width=""match_parent""
            android:layout_height=""wrap_content""/>

</merge>
```

Inflating that View is pretty straightforward:
```java
MyCustomView view = Michelangelo.build(this, MyCustomView.class);
```

## Post inflate methods

Use the annotation `@AfterInflate` on your compound view's methods you want to run straight after the layout is inflated with Michelangelo.

## Michelangelo and ButterKnife

Michelangelo plays very well with Jake Wharton's library [ButterKnife](https://github.com/JakeWharton/butterknife). Just add the annotation `@InjectViews` to your `ViewGroup` and Michelangelo will do the rest.

Example using ButterKnife:

```java
@InflateLayout(R.layout.item_painting)
@InjectViews
public class PaintingItemView extends LinearLayout {

    @InjectView(R.id.image) ImageView image;
    @InjectView(R.id.title) TextView title;

    public PaintingItemView(Context context) {
        super(context);
        setOrientation(HORIZONTAL);
    }

    public void bind(Painting painting) {
        image.setImageResource(painting.getDrawableResId());
        title.setText(painting.getTitle());
    }
}
```

## Order of events

When you call `Michelangelo.build()`:

1. The view gets inflated
2. If specified, the injector is applied (`ButterKnife.inject(view)`)
3. If exist, methods annotated with `@AfterInflate` are run.

## Sample

See the [sample](https://github.com/RomainPiel/Michelangelo/tree/master/michelangelo-sample/src/main) for a common use of this library with `ListView` adapters.

## License
```
Copyright 2014 Romain Piel

Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
```"
13,SHIccc/MTS,R,"
![http://quantnet.wiwi.hu-berlin.de/style/banner.png](http://quantnet.wiwi.hu-berlin.de/style/banner.png)

## ![qlogo](http://quantnet.wiwi.hu-berlin.de/graphics/quantlogo.png) **[MTS_BEIR](https://github.com/QuantLet/MTS/tree/master/MTS_BEIR)**

## ![qlogo](http://quantnet.wiwi.hu-berlin.de/graphics/quantlogo.png) **[MTS_afns_uk](https://github.com/QuantLet/MTS/tree/master/MTS_afns_uk)**

## ![qlogo](http://quantnet.wiwi.hu-berlin.de/graphics/quantlogo.png) **[MTS_afns_fr](https://github.com/QuantLet/MTS/tree/master/MTS_afns_fr)**

## ![qlogo](http://quantnet.wiwi.hu-berlin.de/graphics/quantlogo.png) **[MTS_afns_de](https://github.com/QuantLet/MTS/tree/master/MTS_afns_de)**

## ![qlogo](http://quantnet.wiwi.hu-berlin.de/graphics/quantlogo.png) **[MTS_afns_it](https://github.com/QuantLet/MTS/tree/master/MTS_afns_it)**

## ![qlogo](http://quantnet.wiwi.hu-berlin.de/graphics/quantlogo.png) **[MTS_afns_sw](https://github.com/QuantLet/MTS/tree/master/MTS_afns_sw)**

## ![qlogo](http://quantnet.wiwi.hu-berlin.de/graphics/quantlogo.png) **[MTS_expinf](https://github.com/QuantLet/MTS/tree/master/MTS_expinf)**

## ![qlogo](http://quantnet.wiwi.hu-berlin.de/graphics/quantlogo.png) **[MTS_comexpinf](https://github.com/QuantLet/MTS/tree/master/MTS_comexpinf)**

## ![qlogo](http://quantnet.wiwi.hu-berlin.de/graphics/quantlogo.png) **[MTS_comexpinf_cds](https://github.com/QuantLet/MTS/tree/master/MTS_comexpinf_cds)**

## ![qlogo](http://quantnet.wiwi.hu-berlin.de/graphics/quantlogo.png) **[MTS_multi_modelres](https://github.com/QuantLet/MTS/tree/master/MTS_multi_modelres)**

### Abstract of the work:
Inflation expectation is acknowledged to be an important indicator for policy makers and financial investors. To capture a more accurate 
real-time estimate of inflation expectation on the basis of financial markets, we propose an arbitrage-free model across different countries 
in a multi-maturity term structure, where we first estimate inflation expectation by modelling the nominal and inflation-indexed bond yields 
jointly for each country. The Nelson-Siegel model is popular in fitting the term structure of government bond yields, the arbitrage-free model 
we proposed is the extension of the arbitrage-free dynamic Nelson-Siegel model proposed by Christensen (2010). We discover that the extracted 
common trend for inflation expectation is an important driver for each country of interest. Moreover, the model will lead to an 
improved forecast in a benchmark level of inflation and will provide good implications for financial markets.


### Here you see some plots from this repository:

![Picture1](https://github.com/QuantLet/MTS/blob/master/MTS_BEIR/MTS_BEIR.png)
![Picture2](https://github.com/QuantLet/MTS/blob/master/MTS_multi_modelres/MTS_multi_modelres.png)
![Picture3](https://github.com/QuantLet/MTS/blob/master/MTS_afns_de/MTS_afns_de.png)
"
14,Goalsum/POD_STL,C++,"# POD_STL
C++ STL without template code inflation

# Overview
This version of STL tries its best to reduce the template code inflation caused by using STL containers.

We achieve this goal by the following approach: Every interface (public member function) of a template container invokes a corresponding member function of its non-template base class, turning the template type of element to void pointer. And the member function of non-template class implements the actual functionality.

Because all the interfaces of template containers are inline functions, the invocations of interfaces will become invocations passing void pointer type parameters at compile time, this avoids generation of multiple template function instances, resulting in no template code inflation.

For the projects that have strict limits with binary executive file size (e.g. some embeded enviroments), this STL version will be very useful.

# Caution
Because the inner implementions have no information of element's type, they use **memcpy** to copy elements. So make sure that the elment of a container is able to be copied this way. That's why this version is called POD_STL. But actually, you don't have to strictly use POD types as element -- the element can have non-virtual member functions, and can use constructor to initiate its members.

Bacause of this limit, the container of POD_STL cannot be used as another container's element (embeded containers). But the pointer to the container can. for example, you cannot use deque\<list\<int\> \> with POD_STL, but deque\<list\<int\> \*\> is legal.

# Reference
The following documents describe POD_STL in details, in Chinese.

**Design goals and implemention approaches:**

[http://blog.csdn.net/qq_21895115/article/details/45639849](http://blog.csdn.net/qq_21895115/article/details/45639849)

**Usage:**

[http://blog.csdn.net/qq_21895115/article/details/45639857](http://blog.csdn.net/qq_21895115/article/details/45639857)

**Guidlines for developers:**

[http://blog.csdn.net/qq_21895115/article/details/45639867](http://blog.csdn.net/qq_21895115/article/details/45639867)

**Discussion:**

[http://blog.csdn.net/qq_21895115/article/details/45639877](http://blog.csdn.net/qq_21895115/article/details/45639877)
"
15,corenting/InflationCalculator,Kotlin,"# Inflation Calculator #

![GitHub Workflow Status (branch)](https://img.shields.io/github/workflow/status/corenting/InflationCalculator/Android%20CI/master) ![GitHub release (latest by date)](https://img.shields.io/github/v/release/corenting/InflationCalculator) ![License](https://img.shields.io/github/license/corenting/InflationCalculator)

This inflation calculator allows you to calculate the buying power in a specified year of any amount of money to an equivalent amount in another year by taking into account the inflation rate between these two years.
It supports the following countries :
- USA (from 1913 to 2021)
- UK (from 1800 to 2021)
- France (from 1901 to 2021)

## Data sources ##
- France: INSEE, https://www.insee.fr/fr/statistiques/serie/010605954
- USA: Bureau of Labor Statistics (Historical CPI-U), https://www.bls.gov/cpi/
- UK: Office for National Statistics, https://www.ons.gov.uk/economy/inflationandpriceindices/timeseries/cdko/mm23

## Download ##

- [F-Droid](https://f-droid.org/packages/fr.corenting.convertisseureurofranc/)
- [Google Play](https://play.google.com/store/apps/details?id=fr.corenting.convertisseureurofranc&utm_source=github_readme)
- [Github releases](https://github.com/corenting/InflationCalculator/releases/latest)
"
16,forkkit/inflationchart,,"# Inflation Chart
Inflation Chart is a project to find the intrinsic value of stock markets, stock prices, goods and services by adjusting them to the amount of the money supply (M0, M1, M2) or price of other goods (like the price of food or oil).

# Site
The site is accessible from https://inflationchart.com

# Data
The database is open and available from https://docs.google.com/spreadsheets/d/1xJGrHWj6uO6ykFPvht-RBG5qlLeO0axraxUJ9UzOhFo

# Code
All code of the project is open to and in this repo
"
17,future-tense/pool.futuretense.io,HTML,
18,SOF3/include-flate,Rust,"# include-flate
[!![CI](https://github.com/SOF3/include-flate/workflows/CI/badge.svg)](https://github.com/SOF3/include-flate/actions)
[![crates.io](https://img.shields.io/crates/dv/include-flate.svg)](https://docs.rs/include-flate)
[![docs.rs](https://docs.rs/include-flate/badge.svg)](https://docs.rs/include-flate)

A variant of `include_bytes!`/`include_str!` with compile-time deflation and runtime lazy inflation.

## Why?
`include_bytes!`/`include_str!` are great for embedding resources into an executable/library
without involving the complex logistics of maintaining an assets manager.
However, they are copied as-is into the artifact, leading to unnecessarily large binary size.
This library automatically compresses the resources and lazily decompresses them at runtime,
allowing smaller binary sizes.

Nevertheless, this inevitably leads to wasting RAM to store both the compressed and decompressed data,
which might be undesirable if the data are too large.
An actual installer is still required if the binary involves too many resources that do not need to be kept in RAM all time.

## Warning
This library compresses included data independently.
It is usually more effective to compress the whole output binary together (e.g. distributing `.exe.gz` )
than to compress independently.
In addition, compression algorithms usually produce smaller artifacts by processing the raw input together
than by processing already-compressed output.
`#[cfg_attr]` might come handy for conditionally using compression or direct data inclusion.
"
19,gwern/gwern.net,Haskell,
20,AllonHammer/CPI_HRNN,Python,"# Forecasting CPI Inflation with Hierarchical Recurrent Neural Networks
This Repository contains implementation of novel model we suggested in our paper.

1. Hierarchical GRU

In addition as a contribution for further research we provide he data set used in this work,
which is taken from the BLS after parsing and pre-processing. 

The data could be found on data/cpi_us_dataset.csv
note: this is a sample from the all data

## A brief description of the data set:
The data set contains the following columns:

* Date (differs by month)

* Category- item name

* Category id- item unique id

* Price- Seasonally adjusted CPI-U for the given month

* Weight- Relative importance of the item from the total aggregated index (=100)

*Indent- The hierarchy level (total aggregated index has indent 0, lowest level is 8)

*Parent- Parent’s item name

*Parent ID- Parent’s item ID


In order to run the code please make sure all Prerequisites are met (Pandas==0.22 in particular)
#### Prerequisites
    pip install -r requirements.txt

    
To execute the code please run one of the following

1. hierarchical_gru.py

"
21,DIE-BG/HEMI.jl,Julia,"# Herramienta de evaluación de medidas de inflación (HEMI)

[![Build Status](https://github.com/DIE-BG/HEMI.jl/workflows/CI/badge.svg)](https://github.com/DIE-BG/HEMI.jl/actions)
[![Dev](https://img.shields.io/badge/docs-latest-blue.svg)](https://die-bg.github.io/HEMI.jl/dev)

Repositorio del proyecto de evaluación estadística de medidas de inflación
subyacente de Guatemala empleando una metodología de simulación con
*bootstrapping*. El proyecto ha sido realizado utilizando el [lenguaje de
programación Julia](https://julialang.org/) y el paquete
[DrWatson](https://juliadynamics.github.io/DrWatson.jl/stable/) para crear un
proyecto reproducible.

Para trabajar con este proyecto de manera local, realiza lo siguiente:

1. Instalar Julia 1.7 y Visual Studio Code.
2. Agrega el registro de la organización a tu instalación de Julia. En cualquier terminal interactiva (REPL) de Julia ejecuta el comando: 
```julia-repl
julia> ]
(@v1.7) pkg> registry add https://github.com/DIE-BG/RegistryDIE
    Cloning registry from ""https://github.com/DIE-BG/RegistryDIE""
    (...)
``` 
Esto es necesario para obtener los paquetes [`CPIDataBase`](https://github.com/DIE-BG/CPIDataBase.jl), e [`InflationFunctions`](https://github.com/DIE-BG/InflationFunctions.jl), ya que estos no se encuentran en el registro [`General`](https://github.com/JuliaRegistries/General) de Julia.
 
3. Descarga o clona este repositorio. Ten en cuenta que los datos brutos de simulaciones normalmente no están incluidos en la historia de Git y se deben obtener de manera independiente o generar nuevamente con los programas de simulación.

4. Abre una terminal interactiva de Julia y haga: 
```julia-repl
julia> using Pkg
julia> Pkg.add(""DrWatson"") # instalar globalmente, para utilizar `quickactivate`
julia> Pkg.activate(""ruta/hacia/el/proyecto"")
julia> Pkg.instantiate()
```

Este último comando instalará todos los paquetes necesarios para poder ejecutar los scripts y todo lo demás debería funcionar inmediatamente. Notar que esto instala [`DrWatson`](https://juliadynamics.github.io/DrWatson.jl/stable/) en el entorno global de Julia, lo que permite utilizar la macro `@quickactivate` para activar el entorno del proyecto al ejecutar cualquier *script* desde la terminal del sistema. 

## Trabajando en Visual Studio Code
Para trabajar en el proyecto utilizando [Visual Studio Code](https://code.visualstudio.com/) es necesario tener instalada la [extensión de Julia](https://www.julia-vscode.org/). Usualmente, abrimos el directorio raíz del proyecto en el editor con la opción `File -> Open Folder...` y la extensión de Julia se encarga automáticamente de activar el entorno de paquetes del proyecto, denominado también como `HEMI`. A su vez, en la primera vez que se trabaje en el proyecto es necesario instanciarlo de la siguiente manera:

```julia-repl
julia> ]
(HEMI) pkg> instantiate
(...)
```

El gestor de paquetes integrado de Julia (`Pkg`) se encargará de instalar todos los paquetes automáticamente. El detalle de los paquetes se encuentra en el archivo `Manifest.toml`. Este archivo de manifiesto de versiones de los paquetes permite que todos los integrantes del equipo puedan trabajar sobre un proyecto reproducible. 


## Cómo cargar los datos
Ejecutar el archivo `scripts/load_data.jl` para generar los archivos binarios de datos en formato JLD2. Este programa se debe ejecutar una sola vez o cada vez que se desean actualizar los datos. Este programa genera los archivos `gtdata64.jld2` y `gtdata32.jld2`. El último corresponde a los datos con precisión de punto flotante de 32 bits, cuya precisión es suficiente para representar los valores de las medidas de inflación y ayuda a generar los cálculos más rápidamente. 

El archivo `gtdata32.jld2` es cargado automáticamente al utilizar el módulo `HEMI`. Este módulo carga los datos del IPC de Guatemala en el objeto `GTDATA`, el cual es un objeto de tipo [`UniformCountryStructure`](@ref). Provee además los objetos `GT00` y `GT10`, los cuales son de tipo [`VarCPIBase`](@ref) y los objetos `FGT00` y `FGT10`, los cuales son de tipo [`FullCPIBase`](@ref).

Por ejemplo, ejecute las siguientes instrucciones en un *script* de pruebas: 

```julia 
# Activa el entorno del proyecto y ejecuta `using HEMI` para cargar los datos
using DrWatson
@quickactivate :HEMI

# Variables exportadas por el módulo HEMI para utilizar en el script
GTDATA
GT00
GT10
FGT00
FGT10
```
"
22,fipelle/replication-hasenzagl-et-al-2020,Jupyter Notebook,"## A Model of the Fed's View on Inflation

This repository contains the source code for replicating the results in the paper:

[Hasenzagl, T., Pellegrino, F., Reichlin, L., & Ricco, G. (2020). A Model of the Fed's View on Inflation.](https://arxiv.org/abs/2006.14110)

If you have any questions, comments, or suggestions please create a new issue or email the authors.

## Code structure
The main directory is organized as follows:

* *annex_global_data*: Contains a directory with the data files, `tc_mwg.jl`, and `iis_charts.ipynb` for the model with global variables. To estimate this model use these files instead of the files with the same names in the *data* and *code* directories. The dataset for the global model includes the Baltic Dry Index (BDI) which is available here: https://www.balticexchange.com/en/index.html. 
* *code_main*: Contains all of the Julia code necessary for replication.
    + The *Metropolis-Within-Gibbs* subdirectory contains the code for the Metropolis-Within-Gibbs algorithm.
* *csv_output*: Used for storing the .csv output files.   
* *data*: Contains the data used in the estimation. The data is saved in .csv and .xlsx files.
* *docs*: Contains the paper and online appendix.
* *img*: Used for storing the output figures.

The code is written in Julia 1.6.4 (https://julialang.org/).

The code uses a number of Julia packages. All necessary packages can be installed using the `import_packages.jl` script. To do so, start Julia and use the following command at the Julia REPL prompt:

`julia> include(""import_packages.jl"")`

## Running the code

The main file is `user_main.jl`. This script runs the following exercises:

* The in-sample estimation is run by setting `run_type=1` in `user_main.jl`.
* The conditional forecasting exercise is run by setting `run_type=2` and specifying the start date of the forecasting exercise, and the conditioning variables and time periods. Note that the paper does not include a conditional forecasting exercise.
* The out-of-sample forecasting exercise is run by setting `run_type=3` and specifying the start date of the forecasting exercise.

After choosing the `run_type` run the script by starting Julia and using the following command at the Julia REPL prompt:

`julia> include(""user_main.jl"")`

## Figures and Tables

The figures and tables are created in two Jupyter (https://jupyter.org/) notebooks:

* `iis_charts.ipynb`: creates all figures relating to the in-sample estimation.
* `oos_charts.ipynb`: creates all figures relating to the out-of-sample forecasting exercise and the RMSE of the trend-cycle model relative to the RMSE of a random walk with drift.

## Citation

If you are using any part of the code for academic work (including, but not limited to, conference and peer-reviewed papers), please cite using the following bibtex code:
```bibtex
@misc{hasenzagl2020inflation,
    title={A Model of the Fed's View on Inflation},
    author={Hasenzagl, Thomas and Pellegrino, Filippo and Reichlin, Lucrezia and Ricco, Giovanni},
    year={2020},
    eprint={2006.14110},
    archivePrefix={arXiv},
    primaryClass={econ.EM}
}
```
"
23,christophergandrud/GreenBook,TeX,"# Inflated Expectations

**Christopher Gandrud and Cassandra Grafström**

[![DOI](https://zenodo.org/badge/5350/christophergandrud/GreenBook.png)](http://dx.doi.org/10.5281/zenodo.11320)

These files comprise the paper ''[Inflated Expectations:
How government
partisanship shapes bureaucrats' inflation
expectations](http://ssrn.com/abstract=2125283)''.

The paper is forthcoming at [Political Science
Research and Methods](http://journals.cambridge.org/action/displayJournal?jid=RAM).

## About

Governments' party identifications can indicate the types of economic
policies they are likely to pursue. A common rule of thumb is that
left-party governments are expected to pursue policies for lower
unemployment, but which may cause inflation. Right-party governments
are expected to pursue lower inflation policies. How do these
expectations shape the inflation forecasts of monetary policy
bureaucrats? If there is a mismatch between the policies bureaucrats
*expect* governments to implement and those that they *actually* do,
forecasts will be systematically biased. Using US Federal Reserve
Staff’s forecasts we test for executive partisan biases. We find that
irrespective of actual policy and economic conditions forecasters
systematically overestimate future inflation during left-party presidencies
and underestimate future inflation during right-party ones. Our findings
suggest that partisan heuristics play an important part in monetary
policy bureaucrats' inflation expectations.

## Reproduce the paper (including analyses, plots, and tables)

The **R** and knitr source code and data for reproducing the analyses, plots, tables
and text is in this DVN repository. We used R version 3.1.1.

To reproduce the figures and all of the analyses:

1. Install the necessary R packages using the following code:

```{S}
install.packages(c(""apsrtable"", ""ggplot2"", ""gridExtra"", ""DataCombine"",
                ""devtools"", ""knitr"", ""Matching"", ""MatchIt"", ""MCMCpack"",
                ""plotrix"", ""plyr"", ""repmis"", ""reshape"", ""reshape2"", 
                ""rgenoud"", ""stringr"", ""xtable"", ""Zelig""))
```

2. Knit the *main_GreenBook.Rnw* and *supplemental_GreenBook.Rnw* files in the
*PSRM_dvn* folder. This reproduces all of the analyses, tables, figures, and
text for both the Main Paper and Supplementary Materials:

```{S}
# Remember to set the working directory to the PSRM_dvn folder.

library(knitr)

knit2pdf('main_GreenBook.Rnw')
knit2pdf('supplemental_GreenBook.Rnw')
```

## Data

The data set we used in the paper is called
*PSRM_dvn/Data/GB_FRED_cpi_2007.csv*. The *README_data.html* file contains
variable descriptions.
"
24,maxitg/InflationSimulator,Mathematica,"# Inflation Simulator
Code for simulating inflation, including multiple field Lagrangians with non-canonical kinetic energy.

## Overview

To demonstrate some functionality of the package, let's consider a two-field potential with a saddle point:

![image](https://user-images.githubusercontent.com/1479325/57750434-df54bf80-76a7-11e9-8264-22665d35739e.png)

![image](https://user-images.githubusercontent.com/1479325/57750380-aa486d00-76a7-11e9-8727-5adcf86461c4.png)

We can obtain equations of motion for this potential by using `InflationEquationsOfMotion`:

![image](https://user-images.githubusercontent.com/1479325/57750454-f5fb1680-76a7-11e9-8a08-db3cfe1586ec.png)

Here `n[t]` stands for the number of e-foldings. We can use these equations to produce an evolution of the fields and the number of e-foldings over time, starting for example with initial conditions `a[0] = 5`, `a'[0] = 0`, `b[0] = 0.2`, `b'[0] = 0` using `InflationEvolution`:

![image](https://user-images.githubusercontent.com/1479325/57750487-1c20b680-76a8-11e9-9785-ee340e8699d9.png)

We get `InterpolatingFunction`s and some extra information such as the total number of e-foldings. If we plot evolution of the fields over time, we can see that the fields reach the saddle point, and ""slow-roll"" through it for some time:

![image](https://user-images.githubusercontent.com/1479325/57750573-65710600-76a8-11e9-87a1-acc81d7a706b.png)

Let's plot that against the potential to see the trajectory of the fields:

![image](https://user-images.githubusercontent.com/1479325/57750671-bd0f7180-76a8-11e9-862d-89dbe81a79d5.png)

We can check if this particular model is consistent with experimental constraints. One way to do that is to evaluate the ratio of tensor-to-scalar power spectra, and the scalar spectral index, assuming horizon exit for the scale we see today occured 60 e-foldings before the end of inflation:

![image](https://user-images.githubusercontent.com/1479325/57750755-18416400-76a9-11e9-9c36-c78f1730d4d0.png)

Let's check if that's in experimental range:

![image](https://user-images.githubusercontent.com/1479325/57750866-8128dc00-76a9-11e9-8de5-5aae2cba24bf.png)

What if we change the initial value of `b`? Let's plot the scalar spectral index against it:

![image](https://user-images.githubusercontent.com/1479325/57751141-60ad5180-76aa-11e9-8570-93f2f6b6213e.png)

It appears we can get experimentally allowed values near `b[0] = 0.05`. Let's try it:

![image](https://user-images.githubusercontent.com/1479325/57751226-a407c000-76aa-11e9-888a-a75e3d443c44.png)

It is consistent! So, we have found an inflation model (albeit with a non-physical potential) that is consistent with experimental constraints on scalar spectral index and tensor-to-scalar ratio.

## Build

1. Open the project in Wolfram Workbench using File -> Open Projects from File System..., and selecting root repository directory.
2. Open Window -> Show View -> Application Tools.
3. Select `InflationSimulator` as a project.
4. Click Build to build documentation.
5. Click Deploy Application, and select a directory to put a temporary deployed package.
6. Make sure all files selected, click Next. Make sure documentation is selected, click Finish. A new directory `InflationSimulator` will be created in a directory specified.
7. Open Mathematica, and evaluate ```PacletManager`PackPaclet[""path_to_newly_created_InflationSimulator_directory""]```. The output will be the path to the compiled paclet.

## Install

Evaluate ```PacletManager`PacletInstall[""path_to_paclet""]```, where `path_to_paclet` is the path to the `.paclet` file, which can either be downloaded from releases page, or build using the steps above.
"
25,DangerousFreedom1984/monero_inflation_checker,Python,"# Monero Inflation Checker

This work, ""MIC - Monero Inflation Checker"", is a derivative of:
    ""Mininero"" by ShenNoether (https://github.com/monero-project/mininero) and
    ""dumb25519"" by SarangNoether (https://github.com/SarangNoether/skunkworks/tree/curves/dumb25519)

""MIC - Monero Inflation Checker"" is licensed under GPL 3.0 by DangerousFreedom.

## TLDR

Minimal Python tools and educational material for checking inflation in Monero.
You can get more information at [moneroinflation.com](https://www.moneroinflation.com/).

## What is it?

MIC offers minimal Python tools to check transactions, emission curve, ring signatures, zero-knowledge proofs and others to prove that there is no inflation happening in Monero.

The tools here are just for educational purposes. They are not ready for production. 

## Installation and requirements

Please install the required packages inside a new virtual environment with:

> python3 -m venv .vmic

> source .vmic/bin/activate

> pip install -r requirements.txt

There are two options to use the MIC verifier.

1) Using your own full node. The standard connection parameters are:

> username,password = 'username','password'

> rpc_connection = AuthServiceProxy(service_url='http://{0}:{1}@127.0.0.1:18081/json_rpc'.format(username, password))

2) Using a public node. The standard public node is from Seth for Privacy ('http://node.sethforprivacy.com:18089/')

You can change the connection parameters at 'com_db.py' according to your needs.

## Running MIC

After installing the required packages, you can simply type:

> python3 MIC.py

## Contact

Feel free to reach out at monero-inflation-checker@protonmail.com

If you think that this work taught you something or if you want to see it growing, please consider donating to: 
42ABfi8JdQTjbByuCHiP2fLzScit6tKGh8nhXWvdjwYv4NBEgdZ85hrVF34h2gGU8K76UBEp1mxz1VT4DbGkqNutQW9EXHj
"
26,rsvp/fecon235,Jupyter Notebook,"## fecon235 :: Notebooks for financial economics

[![Join the chat at https://gitter.im/rsvp/fecon235](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/rsvp/fecon235?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
/ [CHANGELOG] / [BSD License and TOS][235li]

**Spin-off Notice:** ***the modules and functions used by our research notebooks
have been refactored into another repository, [fecon236].***
The home for *our Jupyter notebooks will remain here at [fecon235]*
in the `nb` directory.


### What is this repository for?

**fecon235** provides an interface for ***financial economics*** to the Python
ecosystem, especially packages for mathematics, statistics, science,
engineering, and data analysis.
Complex packages such as *numpy, pandas, statsmodels, scipy, and matplotlib*
are seamlessly integrated at a high-level with APIs of various data hosts for:

- Essential commands which correctly handle annoying low-level pitfalls.

- Retrieval of economic and financial data, both historical and the most current. 

- Data munging, for example, resampling and alignment of time-series data
  from hosts using mutually incompatible formats.

- Analysis using techniques from econometrics, time-series analysis,
  and statistical machine learning.

- Abstraction and software optimization of mathematical operators,
  for example, linear algebra used in portfolio analysis.

- Visualization of data using graphical packages. 

- *Reproducible research which is collaborative and openly accessible
  at zero cost.*

To practically test theoretical ideas interactively,
our code can employed with any Python IDE interactive development
environment, IPython console, or with a Jupyter notebook.
The code has been tested against both python27 and python3 since 2014,
and works across major platforms: Linux, Mac, and Windows.

**Database:** the primary source is [FRED], the U.S. Federal Reserve
Economic Data bank which is accessed directly online using our interface. 
Other specialized data can be directly retrieved using our [Quandl] API 
module, for example, futures prices. Data for stocks, mutual funds, and 
ETFs is retrieved from the best available sources using `pandas_datareader`.
Data is designed to be accessible *free* of charge,
and *interoperable* in different time frequencies.


### How does one get started?

* Good introductory lectures for economists to Python and its ecosystem:
  Quantitative Economics by Thomas [Sargent].

* For the fecon235 and fecon236 installation FAQ, please
  see https://git.io/econ which also covers external dependencies.

* For the older pre-2016 notebooks, please use import style 
  discussed in https://git.io/fecon-intro 

* Docker container (optional): instantly run fully-configured programs and 
  interactive notebooks; start by: `docker pull rsvp/fecon235` # see our 
  [Docker] image for details.  

Some basic commands like `get()` and `plot()`
will do a lot of the heavy lifting to get you started immediately. 
The commands are very easy to customize, 
producing sophisticated results quickly 
without tweaking the underlying numerical packages.

The *docs* directory should be gradually adding tutorials. 
The source code, in the meantime, is thoroughly annotated.


### Examples of code

The best way to see the code in action is to 
run the notebooks in the `nb` directory
which are described further below. 
Note that GitHub can render Jupyter notebooks directly in the browser, 
however, they will not be executable.

Here is a rendering of a notebook at GitHub for 
*Housing economy, home prices and affordibility* https://git.io/housing 
If you had executed that notebook locally, it would 
have also retrieved the latest available data and 
recomputed the results.

How is worker's wage correlated with GDP output? See https://git.io/gdpwage
How much Federal debt must each worker assume? And how fast is the
US government debt increasing? https://git.io/debtpop

To score the Federal Reserve's performance under its dual
mandate for inflation and unemployment, see https://git.io/fed
(where tangentially the Phillips curve is discredited by constructing
heat map scatter plots). 
Notebook https://git.io/infl gives an in-depth analysis of inflation,
including a combined forecast using three orthogonal methods.

Elevated default risk across bond markets is indicative of a
weak economy. But how can a policy maker calibrate credit spreads
to assess changes in interest rates? We consider mortgage and corporate
credit spreads to construct a *robust* Unified Credit Profile
(a tutorial on MAD, Median Absolute Deviation, in
rescaling non-Gaussian time-series), see https://git.io/creditprof

Please see https://git.io/fedfunds 
to forecast the Fed Funds rate using futures contracts on LIBOR.

The notebook https://git.io/cotr discerns how various asset classes 
are positioned in the market. In contrast, an overview of asset prices is 
given in https://git.io/georet using geometric mean returns.

In https://git.io/gold we make a conjecture that 
real gold prices is a stationary time-series bound by real interest rates.
In https://git.io/xbt Bitcoin is statistically analyzed as a financial asset.
We examine the crude oil markets, specifically the Brent over WTI spread,
and construct an optimal portfolio, in https://git.io/oil .

SEC 13F filings can be easily parsed, see https://git.io/13F
where we track asset managers Stanley Druckenmiller and John Paulson.

In https://git.io/equities we examine the separable components
of total return for equities, especially due to enterprise earnings
and market speculation, using S&P data assembled by Robert Shiller
which goes back to the year 1871.
In https://git.io/gdpspx we examine the close relationship between the
real economy and the equities market, while demonstrating
the Holt-Winters time-series model for predictions.

In https://git.io/gmix we analytically and visually show how a Gaussian
Mixture model handles ""fat tail"" risk of leptokurtotic financial assets
under small-sample conditions.
Markowitz portfolios, designed in the arithmetic mean-variance framework
for a static period, are notoriously fragile when markets change.
In contrast, our Boltzmann portfolios are adaptive over multi-periods to
*geometrically* maximize wealth using techniques from reinforcement learning.
Part 1: https://git.io/boltz1 Part 2: https://git.io/boltz2

Bootstrapping has two benefits: small-sample statistics
and simulation from controlled population.
In https://git.io/bootspx we simulate alternate histories
for leptokurtotic SPX equity returns:
to visualize sample price paths, and for
estimating probabilities of events such as investment loss.


### Development and contacts ###

* Guidelines: we welcome your [pull request] to improve our code. 
  Details are outlined in [Development].

* Lead developer is Adriano [rsvp.github.com][admin].
  Please join our chat with fellow users and developers at [Gitter].

This project is a derivative from the seminar series held at the
University of California at Berkeley, jointly sponsored by the
Department of Economics and the Haas School of Business.
We are also grateful to [BIDS], Berkeley Institute for Data Science,
and the [Mathematical Sciences Group][MathSci] for their technical support.


![fecon235-wordclouds.jpg](https://git.io/fecon235words)


### Partial contents of nb directory ###

##### [gauss-mix-kurtosis.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/gauss-mix-kurtosis.ipynb) : Gaussian Mixture and Leptokurtotic Assets

Gaussian Mixture GM(n) can create distributions with leptokurtosis (""fat
tails""). Our problem is the inverse: from observable statistics, deduce the
model parameters analytically. We demonstrate how a GM(2) model can
synthesize Gaussian risk-equivalence for leptokurtotic financial assets.
A numerical solution provides accurate probabilities which can be used to
experimentally understand how kurtosis itself is distributed under
small-sample conditions. The non-Gaussian distributions are visualized through
quantile-quantile probability plots. Shortcut: https://git.io/gmix

##### [boots-eq-spx.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/boots-eq-spx.ipynb) : Bootstrap leptokurtotic SPX equity returns

Bootstrapping has two benefits: small-sample statistics
and simulation from controlled population.
We simulate alternate histories: to visualize sample price paths,
and for estimating probabilities of events such as investment loss.
Bootstrapping facilitates study of small-sample behaviour for which
asymptotic statistical theory is unsuitable, or where closed-form
mathematical analysis is intractable, for example, *geovolatility*
which is the volatility of the geometric mean rate.
Shortcut: https://git.io/bootspx

##### [prtf-boltzmann-1.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/prtf-boltzmann-1.ipynb) : Boltzmann portfolios

We develop an alternative to the Markowitz framework
called Boltzmann portfolios which handle uncertainty from the 
standpoint of cross-entropy and optimal sequential decisions.
The improved result is a faster online algorithm which is more robust.
Markowitz portfolios are designed in the arithmetic mean-variance framework
for a static period, and are fragile to changing market conditions.
In contrast, Boltzmann portfolios are adaptive over multi-periods to
geometrically maximize wealth using techniques from reinforcement learning.
Part 1: https://git.io/boltz1 Part 2: https://git.io/boltz2

##### [qdl-spx-earn-div.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/qdl-spx-earn-div.ipynb) : Separable components of total return for equities

We specify a model for equity returns by decomposition into enterprise and
speculative returns, plus dividend yield. That model is then tested using stock market
data going back to the year 1871 (well-known database assembled by Robert Shiller).
An understanding of their respective contributions helps us to form
better informed expectations of total return for equities.
We demonstrate that the (arithmetic) percentage reasoning is prone is large errors,
whereas a logarithmic (geometric) version is exact.
Shortcut: https://git.io/equities or https://git.io/spx

##### [qdl-libor-fed-funds.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/qdl-libor-fed-funds.ipynb) : Use pandas to analyze short-term rates

We examine the spread between two interest rates: LIBOR and Fed Funds. 
The former has a much greater depth in the futures market in terms of 
volume and maturity horizon, implying richer information content. 
Modeling their relationship, we construct a synthetic forward Fed Funds 
rate, useful in gauging market sentiment regarding Fed policy. 
Estimate is given for the change in Fed Funds rate over the 
next 12 months. Shortcut: https://git.io/fedfunds

##### [qdl-xau-contango.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/qdl-xau-contango.ipynb) : Use pandas to analyze gold contango

The *London Bullion Market Association* ceased publishing daily data 
on their *Gold Forward Offered Rate* (**GOFO**), as of 30 January 2015 -- 
so we develop an observable proxy called *tango* using gold futures 
and LIBOR. This supply/demand indicator is then compared against 
change in spot prices. Observed strong correlations appear 
to be artificial. Shortcut: https://git.io/xau-contango

##### [qdl-xbt-bitcoin.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/qdl-xbt-bitcoin.ipynb) : Statistical analysis of Bitcoin as financial asset

We first examine time-series data for price, mining, and capitalization of Bitcoin, 
then optimize a robust model for the extremely volatile USD price series.
Taking the viewpoint of a Chinese user we perform a comparative valuation in 
Chinese yuan, and also cross-check with the perennial store of value: gold.
The astonishing volatility and geometric return makes Bitcoin a 
speculative financial asset which may hinder it as a payment system.
Shortcut: https://git.io/xbt

##### [qdl-COTR-positions.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/qdl-COTR-positions.ipynb) : Use pandas to read CFTC COTR

Commitment of Traders Report (COTR) is useful to extract market 
positions in precious metals, US dollar, interest rates, and 
equities markets. We develop our own scale-free measures to 
gauge market sentiment across time which can 
diverge from price directionality at interesting points.
Shortcut: https://git.io/cotr

##### [SEC-13F-parse.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/SEC-13F-parse.ipynb) : Use pandas to read 13F filings from SEC

Sort percentage allocation to long equities. 
Caveats are noted for portfolio management. 
Module yi_secform easily sums up 13F filings by one function.
For illustration, we follow asset managers with significant positions in GLD,
a gold ETF; see Stanley Druckenmiller's sudden accumulation,
and John Paulson's dramatic liquidation.
Shortcut: https://git.io/13F

##### [fred-credit-spreads.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-credit-spreads.ipynb) : Robust profiles of credit spreads

Serves as a tutorial on MAD, Median Absolute Deviation,
for robustly rescaling non-Gaussian time-series.
We consider mortgage and corporate credit spreads to construct a
robust Unified Credit Profile to calibrate credit default risk in
the context of monetary policy. Shortcut: https://git.io/creditprof

##### [fred-debt-pop.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-debt-pop.ipynb) : Growth of Federal debt, its burden on the US population  

We examine US government debt in real terms, and the current Federal debt per capita. 
Shortcut: https://git.io/debtpop

##### [fred-employ-nfp.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-employ-nfp.ipynb) : US employment data, Nonfarm Payroll

We focus on forecasting the monthly change in NFP using a variety of optics:
baseline expectation since 1939, Holt-Winters method, visual selection of local range,
regression against economic activity (SPX) -- but the
standard errors are inherently very large due to survey measurement error.

##### [fred-eur-fx.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-eur-fx.ipynb) : Euro currency qua Foreign Exchange  

We examine euro FX data from the Fed Reserve FRED database. Our synthetic
time-series, which takes us far back as 1971, give additional perspective to
observe the cross-rates against U.S. dollar and Japanese yen.  

##### [fred-eurozone.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-eurozone.ipynb) : Eurozone economics  

We examine the usual suspects: unemployment, inflation, real interest rate,
foreign exchange rate, comparative GDP. Appendix 1 concisely explains the
*euro crisis* in a video.  

##### [fred-gdp-spx.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-gdp-spx.ipynb) : US real GDP vs. SPX: Holt-Winters time series forecasting  

We examine the US gross domestic product's relationship to the US equity
market (S&P 500), in real terms. Forecasts for both are demonstrated 
using the **Holt-Winters time-series model**. We derive the most likely range 
for real GDP growth, and identify extreme equity valuations aside from 
inflationary pressures. Shortcut: https://git.io/gdpspx

##### [fred-gdp-wage.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-gdp-wage.ipynb) : U.S. GDP vs. Wage Income 

How is wage correlated with GDP output?  In answering this question,
we derive a model for GDP growth based on observations from wage growth. 
Shortcut: https://git.io/gdpwage

##### [fred-georeturns.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-georeturns.ipynb) : Comparative geometric mean returns

We examine economic and financial time series where Holt-Winters is used to
forecast one-year ahead. Daily data for bonds, equity, and gold is then
analyzed. The focus is on geometric mean returns because they optimally
express mean-variance under logarithmic utility. Shortcut: https://git.io/georet

##### [fred-housing.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-housing.ipynb) : Housing economy, home prices and affordibility  

Alan Greenspan in 2014 pointed out that there was never a recovery from recession
without improvements in housing construction. Here we examine some relevant
data, including the Case-Shiller series, and derive an insightful measure of
the housing economy, *hscore*, which takes affordibility into account.
Shortcut: https://git.io/housing

##### [fred-inflation.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-inflation.ipynb) : Inflation data from FRED using pandas

We examine inflation data: CPI and PCE, including the core versions, along
with the 10-year BEI rate (break-even inflation) from the bond market.
A unified inflation statistic *m4infl* is introduced,
which leads to the estimation of the geometric mean rate.
A robust optimized Holt-Winters model is used for forecasting.
Shortcut: https://git.io/infl

##### [fred-infl-unem-fed.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-infl-unem-fed.ipynb) : Score for the Fed's dual mandate

We examine unemployment and inflation data to construct a time-series which
gives a numerical score to the Fed's performance on its dual mandate. 
The key is to find comparable units to measure performance and a suitable
scalar measure to show deviation from the dual mandate. The visualization
includes sequential scatter plots using color heat map, which can be 
extended to studies of the Phillips curve. Shortcut: https://git.io/phillips

##### [fred-infl-velocity.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-infl-velocity.ipynb) : Inflation, money velocity, and interest rates  

We examine and attempt to replicate the results of two interesting articles by
Yi Wen and Maria Arias -- along the way, we take a detour and explore the
connection between money velocity and bond rates. This will tie together their
relationship with GDP and the money supply in a fitted equation.  

##### [fred-oil-brent-wti.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-oil-brent-wti.ipynb) : Oil: Brent vs. West Texas Intermediate (WTI)

We examine the history of crude oil prices, and their spreads.
A Boltzmann portfolio is computed for *optimal* financial positions.
Deflated prices give additional insight, along with some of the statistical
tools useful in financial economics.
Although WTI is more desirable than Brent from a petrochemical perspective,
that preference is reversed when the metrics are financial.
Shortcut: https://git.io/oil

##### [fred-usd-RTB-xau.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-usd-RTB-xau.ipynb) : Real trade-weighted indexes for USD, gold, and SPX  

We examine the value of USD against a basket of 26 foreign currencies using
real trade numbers. Trade statistics are released annually, however, the Fed
uses international inflation data to adjust the weights monthly.  

##### [fred-wage-capital.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-wage-capital.ipynb) : Real capital equivalence to wage-income 

We determine how much real capital has been necessary for risk-free interest
to match annual wage.  

##### [fred-xau-spx.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-xau-spx.ipynb) : Gold vs. SP500 returns, XAU vs. SPX  

Long-term comparison of two asset classes: we boxplot their return
distribution and also compute geometric mean returns. Correlation between the
two is shown to be nil. We then look at the history of projected returns using
Holt-Winters method, which also gives the latest forecasts. To conclude, we
closely examine the relative value of the two assets in terms of gold troy
ounces per equity share. Analytically short equities vs. long gold is
favorable for an investor with log utility, but hardly profitable over the
long haul.   

##### [fred-xau-tips.ipynb](https://github.com/rsvp/fecon235/blob/master/nb/fred-xau-tips.ipynb) : Gold and Treasury TIPS, their daily relationship  

Using monthly data we previously found that there is strong correlation 
between gold and real rates, so we investigate this relationship on a daily frequency. 
We then use this correlation to help make forecasts using the 
Holt-Winters time-series method. 
Lastly, we show the history of gold prices in real terms which leads to our 
conjecture that real gold is a stationary time-series bound by real interest rates. 
Shortcut: https://git.io/gold

---

[BSD License and TOS][235li] / This page, last update : 2018-12-03

[admin]:        https://rsvp.github.com ""Adriano rsvp.github.com""
[Anaconda]:     https://www.anaconda.com/download ""Anaconda Python distribution""
[Development]:  https://github.com/MathSci/fecon236/blob/develop/.github/CONTRIBUTING.md ""Development""
[Docker]:       https://hub.docker.com/r/rsvp/fecon235 ""Docker image rsvp/fecon235""
[FRED]:         https://fred.stlouisfed.org ""Federal Reserve Economic Data""
[Gitter]:       https://gitter.im/rsvp/fecon235 ""Gitter fecon235""
[pull request]: https://help.github.com/articles/using-pull-requests/ ""Pull request""
[Quandl]:       https://www.quandl.com  ""Quandl, financial and economic data""
[Sargent]:      https://lectures.quantecon.org/py ""Thomas Sargent, Quantitative Economics""
[wiki]:         https://github.com/rsvp/fecon235/wiki  ""Wiki for fecon235""
[rsvp]: https://rsvp.github.com ""Adriano rsvp.github.com""
[MathSci]: https://github.com/MathSci ""Mathematical Sciences Group""
[BIDS]: https://bids.berkeley.edu ""Berkeley Institute for Data Science""
[235is9]: https://github.com/rsvp/fecon235/issues/9 ""fecon235 issue 9""
[fecon235]: https://github.com/rsvp/fecon235 ""fecon235 repository""
[CHANGELOG]: https://git.io/235log ""fecon235 Change Log""
[235li]: https://git.io/235li ""fecon235 BSD License and TOS""
[fecon236]: https://github.com/MathSci/fecon236 ""fecon236 repository""
[236li]: https://git.io/236li ""fecon236 BSD License and TOS""
[236is]: https://git.io/236is ""fecon236 issues""
[Travis]: https://travis-ci.org/MathSci/fecon236 ""fecon236 at Travis CI""
[PyPI]: https://pypi.org/project/fecon236 ""fecon236 at PyPI""
"
27,Semyonic/apple-store-tr-inflation-price-change-notifier,JavaScript,"### Apple Store Turkey Inflation Price Notifier

It will notify price changes via Notification Centers **(Tested in Windows)**

### Developed quickly, so please report any bugs/errors and feel free to contribute !

## Requirements

- Nodejs 10.x.x

## Start

- Install dependencies with `yarn`
- Start with `yarn start`

## Limitations

- Only **one** product price changes watched & notified with this script

## Configure

- To watch price changes, get the link from Apple Store Turkey same as `.env` file and add/remove them.
- Don't forget to change environment variable name in the code !
"
28,OpenCMISS-Examples/left_ventricle_inflation,Python,"========================
left_ventricle_inflation
========================

Left ventricle inflation 

Building the example
====================

Instructions on how to configure and build with CMake::

  git clone https://github.com/OpenCMISS-Examples/left_ventricle_inflation.git
  mkdir build
  cmake -DOpenCMISSLibs_DIR=/path/to/opencmisslib/install ../left_ventricle_inflation
  make  # cmake --build . will also work here and is much more platform agnostic.

Running the example
===================

Explain how the example is run::

  cd build
  ./src/fortran/left_ventricle_inflation.F90

or maybe it is a Python only example::

  source /path/to/opencmisslibs/install/virtaul_environments/oclibs_venv_pyXY_release/bin/activate
  python src/python/left_ventricle_inflation.py

where the XY in the path are the Python major and minor versions respectively.

Prerequisites
=============

None

License
=======

Apache 2.0 License
"
29,16GMCN/MTH-9886-Emerging-Market-and-Inflation,,"# MTH-9886-Emerging-Market-and-Inflation
"
30,MosheLichman/ZIP-Regression,Python,"# ZIP-Regression
My code for fixed-effect Zero-Inflated Poisson Regression model.

This code is part of my work on the Prediction of Sparse User-Item Consumption Rate.

As such, it means that it's an academic code. I've done a lot of work to make it super efficient and I believe there are more 
comments in the code than actual code, but I'm sure more could have been done.

## Example Notebooks
To make it easier to work with the code, I added to IPython notebooks to the repository. 

1. The first one creates a synthetic data that I've used for uni-testing, but you can use it to understand the formatting of the data.
2. The second one is a complete run example of the model using the synthetic data showing both sanity uni-tests and empirical evaluations.

## Dependencies
1. numpy and scipy
2. pandas
3. cython
4. You also need to run the setup.py. Type in the cmd line 'python setup.py build_ext --inplace' in the project directory.
"
31,seyonv/MIE479,Matlab,"## Outline of the Framework.An autoregressive equation is used to model the inflation rates in collaboration with a Regime Switching model. Two distinct equations are obtained representing the corresponding mean, variance and autoregressive coefficient associated with each regime. An n-period non-recombining binomial tree is then constructed with the Markov transition probabilities for the inflation rate. The terminal node values are computed using recursion (as the process is autoregressive). The expectation is then taken over all the terminal nodes with the transition probabilities being the probability measure. The resulting value is the expected inflation rate, n periods from now condi- tional on the current regime. A similar process is done to find the expected inflation rate variance, n periods from now conditional on the current regime. The next step is to find the nominal expected returns of all the assets in the asset pool. This is done using geometric returns from prior data. The covariances of the assets to each other are then computed. The expected returns are perturbed by an inflation factor. This factor is the inflation Beta of the asset, computed using regression, multiplied by the expected inflation rate generated.The objective function follows the form of a single-factor model and has a noise term that is computed using the expected inflation variance solved for. The quadratic program formulated is then solved for and the resulting weights, for investment in each asset, are returned. Rebalancing over time is performed but with an additional transaction cost constraint that ensures the impracticality of dramatic changes in allocation cannot occur.### Steps for generating graphs:  1. Navigate to Capstone-MATLAB  2. Add to Path(Selected Folders and Subfolders) MS REGRESS FEX 1.08, Symbol Files, Main- ProgramFiles  3. In CSV Files, add nyse SP to path  4. Open the file “a.m” and modify parameters as desired. The comments above the file explain the parameters and how to choose them  5. run “a.m”  ### Steps for viewing all MATLAB workspace variables:  1. Complete steps 1-3 in “Steps for generating graphs”  2. In “a.m”, comment out all the current code, and uncomment the line “run create inflation hedged portfolio.m”  3. In “create inflation-hedged portfolio.m”, delete the function header and its corresponding end  4. Uncomment the section at the beginning  5. Define variables as desired and run “a.m”  "
32,EricSchles/inflation_calc,Python,"inflation_calc
=========

**inflation_calc** provides a toolkit with economical computations based on
data from `data.okfn.org <http://data.okfn.org/data>`__.  This project builds heavily on the work of
`economics <https://pypi.python.org/pypi/economics>`

Features
--------

-  CPI
-  Inflation (based on CPI by default)
-  predict (predicts future cpi's based on current cpi's using ARIMA)
   
Requirements
------------

-  `statsmodels <https://pypi.python.org/pypi/statsmodels>`__
-  `scipy <https://pypi.python.org/pypi/scipy>`__
-  `pandas <https://pypi.python.org/pypi/pandas>`__
-  `requests <https://pypi.python.org/pypi/requests>`__
-  `editdistance <https://pypi.python.org/pypi/editdistance>`__
   
CPI
---

::

    >> from inflation_calc.cpi import CPI
    >> import datetime
    >>
    >> # Create a new CPI instance
    >> cpi = CPI()
    >>
    >> # Get CPI for Iceland in 2007
    >> cpi.get(datetime.date(2007,1,1), 'Iceland')
    CPI(date=datetime.date(2007, 1, 1), value=112.07753358)
    >> 
    >> # We're going to work with Iceland so set default country
    >> # (we're creating a new instance but the country variable can be set)
    >> iceland = CPI(country='Iceland')
    >>
    >> # Get CPI in 2012 (not in the data)
    >> iceland.get(datetime.date(2012,1,1))
    ...
    KeyError: 'Date 2012-01-01 not found in data'
    >>
    >> # Get the closest CPI value sintead
    >> iceland.closest(datetime.date(2012,1,1))
    CPI(date=datetime.date(2011, 1, 1), value=155.03663004)

Inflation
---------

::

    >> from inflation_calc.inflation import Inflation
    >> import datetime
    >>
    >> # Create a new Inflation instance
    >> inflation = Inflation()
    >>
    >> # How many US $ would I need in 2011 to pay for what cost $5 in 2007
    >> inflation.inflate(5, datetime.date(2011,1,1), datetime.date(2007,1,1), 'United States')
    5.424340332378624
    >> 
    >> # We can also set the reference year and the country
    >> usa_2007 = Inflation(reference=datetime.date(2007,1,1), country='United States')
    >>
    >> # Get the inflation for 2007 in the United States
    >> usa_2007.get(datetime.date(2011,1,1))
    Inflation(factor=1.0848680664757249, value=0.08486806647572484)

License
-------

inflation_calc is available under the GNU General Public License, version 3.
See LICENCE for more details.
"
33,fddxl/mesh_inflation,JavaScript,# mesh_inflation
34,Naman-ntc/3D-HourGlass-Network,Python,"# 3D-HourGlass-Network
3D CNN Based Hourglass Network for Human Pose Estimation (3D Human Pose) from videos. This was my summer'18 research project.

## Discussion
In this work I try to extend the idea in [Carriera et. al. CVPR'17](https://arxiv.org/pdf/1705.07750.pdf) of 3D CNN inflation for action recognition from videos to human pose estimation from videos. We use a pretrained hourglass network with a fully connected depth regressor, inflate the 2D convolutions to 3D convolutions and perform temporal 3D human pose estimation. This inflation helps the network learn features from nearby frames and refine its predictions. Similar idea was used in [Girdhar et. al. CVPR'18](https://arxiv.org/pdf/1712.09184.pdf)  (at about the same time!) where they perform multiperson human pose estimartion from videos using an `inflated` Mask RCNN

## Requirements

* python 3.6
* pytorch 0.4
* torchvision
* progress

## Datasets
We used [Human 3.6](http://vision.imar.ro/human3.6m/) dataset for this project.

## Instructions to run
`python main.py -expID [EXP-NAME] -nFramesReg [NUM-FRAMES]`

## Results
We improved the baseline performance of hourglass network from MPJPE of 64 to MPJPE 62.8 and thus show significance of temporal features in real world problems. This idea could be easily extended for other tasks also like semantic segmentation and object detection.
"
35,MathSci/fecon236,Python,"## fecon236 :: Tools for financial economics

***Curated wrapper over Python ecosystem.
Source code for fecon235 Jupyter notebooks.***

GitHub repository is at [fecon236], see [CHANGELOG][236log] for revision history.
The protected **master** branch gets released via `pip`, see our [PyPI].
The **develop** branch is where pull requests are currently directed.

[![Gitter](https://badges.gitter.im/MathSci/fecon236.svg)](https://gitter.im/MathSci/fecon236?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) / master [![Build Status](https://travis-ci.org/MathSci/fecon236.svg?branch=master)](https://travis-ci.org/MathSci/fecon236) / develop [![Build Status](https://travis-ci.org/MathSci/fecon236.svg?branch=develop)](https://travis-ci.org/MathSci/fecon236)


[![fecon236 logo](https://git.io/fecon236-px200.png)](https://github.com/MathSci/fecon236)

### What is this repository for?

**fecon236** provides an interface for ***financial economics*** to the Python
ecosystem, especially packages for mathematics, statistics, science,
engineering, and data analysis.
Complex packages such as *numpy, pandas, statsmodels, scipy, and matplotlib*
are seamlessly integrated at a high-level with APIs of various data hosts for:

- Essential commands which correctly handle annoying low-level pitfalls.

- Retrieval of economic and financial data, both historical and the most current. 

- Data munging, for example, resampling and alignment of time-series data
  from hosts using mutually incompatible formats.

- Analysis using techniques from econometrics, time-series analysis,
  and statistical machine learning.

- Abstraction and software optimization of mathematical operators,
  for example, linear algebra used in portfolio analysis.

- Visualization of data using graphical packages. 

- *Reproducible research which is collaborative and openly accessible
  at zero cost.*

To practically test theoretical ideas interactively,
[fecon236] can employed with any Python IDE interactive development
environment, IPython console, or with a Jupyter notebook.
The code has been tested against both python27 and python3 since 2014,
and works across major platforms: Linux, Mac, and Windows.

***The best way to see the convenience of [fecon236] in action is to
run the notebooks in the fecon235 `nb` [directory][235nb].***


### How does one get started?

For installation details and FAQ, please first visit our [wiki].
For the casual user in an [Anaconda] environment, we recommend:
`conda update pip`, then `pip install --pre fecon236`

Documentation is currently being served from [236docs].
Please start your orientation with this [README notebook][readnb]
which shows how most of this project is self-documenting.


### Development status: stable

For the developer, we recommend forking the [fecon236] repository, then
`pip install --editable .`

- fecon235 becomes a repository *solely* of Jupyter notebooks.
  The old Python source code at [fecon235] will remain for archival purposes,
  while *new* code development shifts over to [fecon236].

Version 10 of fecon236 represents refactoring of the fecon235 v5.18.0312
Python code, not the Jupyter notebooks, with a *new* architecture
depicted in Appendix 1. Function names have been retained, but under fecon236
expect infrequent function calls to be explicit rather than implicit,
i.e. modules names and their aliases are significant.

- After 2019-01-01, our official support for python27 will discontinue
  (like numpy and pandas), however, straddling code may still
  continue to work.
 
Version 11 of fecon236 will signal when our [Travis] builds under Python 2.7
fail, and at that point we expect to require at least Python 3.6.


### Community

Join the chat at [Gitter][236gtt] and ping the lead developer @rsvp.
Please consider becoming a member of the [Mathematical Sciences Group][MathSci].

[![MathSci logo](https://git.io/MathSci-px200.png)](https://github.com/MathSci)



### Appendix 1: fecon236 package map

```
>>> print(fe.map)
Annotated tree map of package directory [with module aliases]
    fecon236
    ├── __init__.py   (Router, sole non-empty __init__.py file herein)
    ├── tool.py       (Tools, low-level essentials)
    ├── top.py        (Top priority, experimental)
    ├── boots   (Bootstrap)
    │   └── bootstrap.py   [bs]
    ├── dst   (Distributions)
    │   └── gaussmix.py   [gmix]
    ├── econ
    │   └── infl.py
    ├── futures
    │   └── cftc.py
    ├── host
    │   ├── fred.py
    │   ├── hostess.py
    │   ├── qdl.py
    │   ├── _ex_Quandl.py
    │   └── stock.py
    ├── math
    │   └── matrix.py   [mat]
    ├── ml   (Machine Learning)
    │   └── learn.py
    ├── oc   (Optimization Control)
    │   └── optimize.py   [op]
    ├── parse
    │   └── sec.py
    ├── prob   (Probability)
    │   └── sim.py   (Simulation)
    ├── prtf   (Porfolio theory)
    │   └── boltzmann.py   [boltz]
    ├── rates  (Fixed Income)
    │   └── fedfunds.py
    ├── tsa    (Time Series Analysis)
    │   └── holtwinters.py   [hw]
    ├── util   (Utilities)
    │   ├── group.py
    │   └── system.py
    └── visual
        └── plots.py
```

---

[BSD License and TOS][236li] / This page, last update : 2018-07-25

[wiki]: https://git.io/econ ""fecon235 wiki Home""
[readnb]: https://git.io/fecon-intro ""fecon235 README notebook""
[235gtt]: https://gitter.im/rsvp/fecon235 ""@rsvp at Gitter""
[rsvp]: https://rsvp.github.com ""Adriano, lead developer""
[236gtt]: https://gitter.im/MathSci/fecon236 ""@MathSci at Gitter""
[MathSci]: https://github.com/MathSci ""Mathematical Sciences Group""
[BIDS]: https://bids.berkeley.edu ""Berkeley Institute for Data Science""
[235is7]: https://github.com/rsvp/fecon235/issues/7 ""Disruption equities data""
[235is9]: https://github.com/rsvp/fecon235/issues/9 ""Moving to Python 3""
[235nb]: https://git.io/fecon235nb ""fecon235 nb directory""
[fecon235]: https://github.com/rsvp/fecon235 ""fecon235 repository""
[fecon236]: https://github.com/MathSci/fecon236 ""fecon236 repository""
[236log]: https://git.io/236log ""fecon236 CHANGELOG""
[236docs]: https://github.com/MathSci/fecon236/tree/develop/docs ""fecon236 Documentation""
[236li]: https://git.io/236li ""fecon236 BSD License and TOS""
[236inst]: https://git.io/236inst ""fecon236 docs Installation""
[236req]: https://git.io/236req ""fecon236 require.txt""
[236is]: https://git.io/236is ""fecon236 Issues""
[FRED]: https://fred.stlouisfed.org ""Federal Reserve Economics Data""
[Quandl]: https://www.quandl.com ""Quandl data""
[Anaconda]: https://www.anaconda.com/download ""Anaconda Python distribution""
[Travis]: https://travis-ci.org/MathSci/fecon236 ""fecon236 at Travis CI""
[PyPI]: https://pypi.org/project/fecon236 ""fecon236 at PyPI""
"
36,ONSvisual/inflation-calculator,JavaScript,"# inflation-calculator
 [A personalised inflation calculator](https://onsvisual.github.io/inflation-calculator/calculator/index.html)
"
37,ace-subido/ph-inflation-calculator,JavaScript,"# Philippine Inflation Calculator

An inflation calculator for the Philippines. [1960 - 2011 Data is from International Monetary Fund, International Financial Statistics](https://www.indexmundi.com/facts/philippines/inflation). [2012 - 2018 Data is from BSP](http://www.bsp.gov.ph/statistics/spei_new/tab34_inf.htm).

In an effort to learn ES6, Jest and React, a Philippine Inflation Calculator.

- `/web` - contains all the files for the web version in `ace-subido.github.io/ph-inflation-calculator`
"
38,vefunder/crvfunder,Vyper,"# veFunder - CRV Fundraising via Emissions

The Curve DAO currently subsidises liquidity pools in exchange for fees. There's some bribing action happening, where external protocols influence veCRV voters in favor of their gauge, but largely the gauge is focussed on AMMs. This is because it's the current paradigm.

With the new generalised cross-chain gauge architecture, Curve inflation can be directed to any arbitrary ERC20 on a sidechain, with any arbitrary on-chain logic (subject to DAO approval). This has the potential to fund more than just subsidised liquidity pools. This product aims to showcase exactly this: a DAO approved crowdfunding endeavor. This also has the potential to position Curve DAO as a decentralised public goods funding source: provided it adds value to the Curve ecosystem.

## Overview

- [`FundraisingGaugeV1`](./contracts/FundraisingGaugeV1.vy): the implementation used for fundraising gauges
- [`GaugeFactoryV1`](./contracts/GaugeFactoryV1.vy): permissionless gauge factory for deploying fundraising gauges

### Dependencies

* [python3](https://www.python.org/downloads/release/python-368/) version 3.6 or greater, python3-dev
* [brownie](https://github.com/eth-brownie/brownie) - tested with version [1.18.1](https://github.com/eth-brownie/brownie/releases/tag/v1.17.2)
* [ganache-cli](https://github.com/trufflesuite/ganache-cli) - tested with version [6.12.1](https://github.com/trufflesuite/ganache-cli/releases/tag/v6.12.1)

### Testing

To run the unit tests:

```bash
$ brownie test -x
```

### Deployment

To deploy first edit the [`scripts/deploy.py`](./scripts/deploy.py) file to unlock the appropriate account, then run the following:

```bash
$ brownie run deploy --network mainnet
```

### Deployment Addresses

- `FundraisingGaugeV1`: [`0xCED78da2c749236309774d7415236B7090B3bF27`](https://etherscan.io/address/0xCED78da2c749236309774d7415236B7090B3bF27)
- `GaugeFactoryV1`: [`0x696B5D296a8AeF7482B726FCf0616E32fe72A53d`](https://etherscan.io/address/0x696B5D296a8AeF7482B726FCf0616E32fe72A53d)

### [`Gauge Factory V1`](./contracts/GaugeFactoryV1.vy) Spec

Below is a list of callable methods on the Gauge Factory V1 contract.

1. `deploy_gauge(_receiver: address, _max_emissions: uint256) -> address: nonpayable`: Deploy a new fundraising gauge

```python
>>> tx = factory.deploy_gauge(alice, 200 * 10 ** 18, {""from"": alice, ""priority_fee"": ""2 gwei""})
Transaction sent: 0xaa0af656794ef7bf25ae986b82ccf91c148c5af70869f9cdf7f23ab5cbcb35e6
  Gas price: 0.0 gwei   Gas limit: 9007199254740991   Nonce: 4
  GaugeFactoryV1.deploy_gauge confirmed   Block: 14376787   Gas used: 193770 (85.00%)
>>> tx.events[""NewGauge""]
OrderedDict([('_instance', '0x521629cbe068e58b43f1aEaB73E47fC43231E67C'), ('_receiver', '0x66aB6D9362d4F35596279692F0251Db635165871'), ('_max_emissions', 200000000000000000000))])
```

Note: A gauge does not automatically receive emissions, it must be voted in by the Curve DAO and then veCRV voters must allocate voting power to change the gauge weight.

2. `implementation() -> address: view`: Get the implementation address used for creating proxies. This address is fixed at deployment and non-upgradeable

```python
>>> factory.implementation()
0xE7eD6747FaC5360f88a2EFC03E00d25789F69291
```

3. `get_gauge_count() -> uint256: view`: Get the total number of gauges deployed (these aren't necessarily voted in by the DAO

```python
>>> factory.get_gauge_count()
1
```

4. `get_gauge_by_idx(_idx: uint256) -> address: view`: Get the address of the gauge deployed at index `_idx`. This function returns `ZERO_ADDRESS` for indexes past `get_gauge_count()`

```python
>>> [factory.get_gauge_by_idx(i) for i in range(factory.get_gauge_count())]
[""0x521629cbe068e58b43f1aEaB73E47fC43231E67C""]
```

### [`Fundraising Gauge V1`](./contracts/FundraisingGaugeV1.vy) Spec

After a gauge is deployed, voted in by the DAO, and receiving emissions, the `receiver` must call the [`Minter`](https://curve.readthedocs.io/dao-gauges.html#minting-crv) to collect their accumulated CRV.

1. `receiver() -> address: view`: The account which receives emissions from this gauge.

```python
>>> gauge.receiver()
'0x66aB6D9362d4F35596279692F0251Db635165871'
```

2. `max_emissions() -> uint256: view`: The maximum amount of emissions `receiver()` will receive, afterwards emissions will not accrue (akin to a supply burn)

```python
>>> gauge.max_emissions()
200000000000000000000
```

3. `claimable_tokens_write(_user: address) -> uint256: nonpayable`: The amount of CRV currently claimable by `_user`. This is a write method, but should be changed in the ABI to be a view method and called via `eth_call`.

```python
>>> gauge.claimable_tokens_write.call(alice)
1180591620717411303424
```

### License

(c) Curve.Fi, 2020 - [All rights reserved](LICENSE).

### Links

[Discord Link](https://discord.gg/PsNJQenbHm)
"
39,HoagieT/Inflation-Nowcast-Model,Python,"# Inflation Nowcast
A dynamic factor model that forecasts inflation, i.e. CPI, PPI, in China

This code implements the nowcasting framework described in ""[Macroeconomic Nowcasting and Forecasting with Big Data](https://www.newyorkfed.org/research/staff_reports/sr830.html)"" by Brandyn Bok, Daniele Caratelli, Domenico Giannone, Argia M. Sbordone, and Andrea Tambalotti, *Staff Reports 830*, Federal Reserve Bank of New York (prepared for Volume 10 of the *Annual Review of Economics*).

**Note:** The vintage example files (Vintage_CPI.py, Vintage_PPI.py) require installation of Wind Database and Wind Python API. Users may use their own data source as well.

## Download instructions

Download the code as a ZIP file by clicking the green 'Clone or download' button and selecting 'Download ZIP'.


## File and folder description

* `DiscreteKalmanFilter.py` : Discrete Kalman Filter algorithm which is applied to estimate parameters in Dynamic Factor Model as well as dealing with unbalanced dataset
* `DynamicFactorModel.py` : Dynamic Factor Model module, which is the main body of nowcasting algorithm
* `Functions.py` : Miscellaneous functions
* `Vintage_PPI.py` : Vintage generator for PPI related data, Wind API required
* `Nowcast_PPI.py` : To nowcast PPI, Vintage_PPI.py must be run first
"
40,datasets/cpi-gb,JavaScript,"Consumer Price Index (and hence inflation) for the UK from 1850 to the present (monthly since June 1947).

## Data

Key source files are:

* [Price Index 1800 to Present](http://www.ons.gov.uk/ons/datasets-and-tables/downloads/csv.csv?dataset=mm23&cdid=CDKO)
* [Inflation 1800 to Present](http://www.ons.gov.uk/ons/datasets-and-tables/downloads/csv.csv?dataset=mm23&cdid=CDSI)

We take these and just to a split out of annual from monthly and some tidying of the date format (see scripts/process.js).

### Processing

First do:

    curl ""http://www.ons.gov.uk/ons/datasets-and-tables/downloads/csv.csv?dataset=mm23&cdid=CDKO"" > cache/cpi-uk.csv

Then run the processing script to split out monthly and annual (they put them in the same file ...):

    node scripts/process.js

## Rant

Why is it always so complicated to get data. A quick search on the interwebs yields: <http://www.ons.gov.uk/ons/rel/cpi/consumer-price-indices/october-2012/cpi-time-series-data.html>

But this turns out to be so big that it does not open in a spreadsheet programme (if you take CSV). In addition all the series descriptions are mixed in at the bottom of the file so this is not machine processable!

Let's try instead to go for the series selector to try and break it down: <http://www.ons.gov.uk/ons/datasets-and-tables/data-selector.html?dataset=mm23>

But this is about 20 different series - which one do you want? Make an educated guess and repeat each time you're wrong!

"
41,JLiekenbrock/inflation,HTML,"# inflation

## Website
https://jliekenbrock.github.io/inflation/

## Dashboard
https://jliekenbrock.shinyapps.io/dashWorld/

## Feedback 15.06.

Zusammenhang zwischen (zwei) Variablen animieren, ala Gapminder, evtl. auch in Shiny
- partial least squares (Leo)
- Merkmale auswählen
- neuer Tab zwei Merkmale gegeneinander darstellen

## Datenlage (idealerweise von Weltbank)
- Inflation (sehr gut) (monatlich)
- GDP (in Arbeit) (jährlich)
- Arbeitslosigkeitsrate
- M1/M2 Geldmenge

## TODO:
- Karte (interaktiv) mit Regionen (nach Weltbank) / Weltkarte (Jan) (Bsp region ändern)
- Daten zusammenfügen (china, indien...) (Jan)
- gdp animation für (top10)/region nach gdp(Dennis)
- weitere Datenquellen finden (Leo)
- Korrelationen betrachten

## weitere Ziele:
- Regressionsmodell

## Animation in R
https://plotly.com/ggplot2/animations/

### Racing bar charts
https://www.r-bloggers.com/2020/01/how-to-create-bar-race-animation-charts-in-r/

https://github.com/amrrs/animated_bar_charts_in_R

## data sources:

### outlook worldbank
https://www.worldbank.org/en/publication/global-economic-prospects
https://thedocs.worldbank.org/en/doc/18ad707266f7740bced755498ae0307a-0350012022/related/GEP-June-2022-Chapter-1-Charts-Data.zip

### gpd until 2020

https://data.worldbank.org/indicator/NY.GDP.MKTP.CD

https://api.worldbank.org/v2/en/indicator/NY.GDP.MKTP.CD?downloadformat=excel

### Inflation
https://www.worldbank.org/en/research/brief/inflation-database#:~:text=The%20World%20Bank%27s%20Prospects%20Group,consumer%20price%20index%20(CPI)%20inflation
"
42,OpenBB-finance/MacroDatabase,,"<p align=""center"">
  <a href=""https://openbb.co/"">
    <img src=""https://raw.githubusercontent.com/OpenBB-finance/OpenBBTerminal/main/images/openbb_splashscreen.png"" alt=""Logo"" width=""1000"">
  </a>
</p>
<h3 align=""center"">Macro Database 🌎</h3>

It's one thing to understand companies existing in countries, sectors and industries and another to understand 
movements within these categories due to macroeconomics. The former is attempted to be solved with
[FinanceDatabase](https://github.com/JerBouma/FinanceDatabase) and the MacroDatabase is an attempt to cover the latter. 

Within this database of over 570.000 datasets, you are able to view an incredibly large amount of financial indicators 
(e.g. GDP, employment rates, interest & inflation rates), prices (e.g. commodities, CPIs and housing indices), an 
extensive variety of country data (e.g. government bond yields of the Netherlands, real consumption of households 
in Japan) and so much more.

| Category                                | Datasets                      |                 
|:----------------------------------------|------------------------------:|
| Prices                                  | 10,406                        |                       
| U.S. Regional Data                      | 418,232                       |                                         
| Money, Banking, & Finance               | 11,585                        |                                               
| Production & Business Activity          | 3,777                         |                                              
| Academic Data                           | 14,880                        |                    
| National Accounts                       | 12,448                        |                                           
| International Data                      | 95,706                        |                                                 
| Population, Employment, & Labor Markets | 9,077                         |
| **Total**                               | **576,111**                   |

Find an overview of the largest categories within the database [here](/Database). The categorisation comes from 
the [Federal Reserve Economic Data (FRED) database](https://fred.stlouisfed.org/) and this repository aims to 
make sense of all the data within these categories.

## Table of Contents

1. [Using the Database](#using-the-database)
3. [Questions & Answers](#questions--answers)
4. [Contribution](#contribution)

## Using the Database
To access the database you can download the entire repository, but I strongly recommend making use of the package 
closely attached to the database. It allows you to select specific json files as well as search through collected
data with a specific query.

### Installation
You can install the package with the following steps:
1. `pip install macrodatabase`
2. (within Python) `import macrodatabase as md`

### Functions
The package has the following functions:

- `show_country_options(search=None, category=None, parameter=None)` - gives curated country options. If no 
parameter is provided, gives all options. If search is provided, searches with this query and if category or parameter 
is provided, gives a specific selection.
- `show_states_options(search=None, category=None, parameter=None)` - gives curated states options. If no 
parameter is provided, gives all options. If search is provided, searches with this query and if category or parameter 
is provided, gives a specific selection.
- `show_database_options(search=None, include_discontinued=False)` - gives all options within the database given 
a certain search term or all if no search term is provided.
- `select_country_data(category, parameter, country=None, unit=None, period=None, seasonality=True)` - gives a certain 
set of curated country data based on the parameters given. E.g. ""GDP"" and ""Liquid Liabilities to GDP"". You can also 
specify the unit, period and seasonality to get specific types of data. If not provided, the function returns all 
types.
- `select_states_data(category, parameter, state=None, unit=None, period=None, seasonality=True)` - gives a certain 
set of curated state data based on the parameters given. E.g. ""Real Estate"" and ""Housing Inventory: Average 
Listing Price"". You can also specify the unit, period and seasonality to get specific types of data. If not provided, 
the function returns all types.
- `select_database_data(parameter)` - grab data from the whole database. This follows the structure that can be 
obtained via `show_database_options`. E.g. to select Mortgage Rates you would use 'Interest Rates/Mortgage Rates'.
- `collect_data(ids, api_key, show_progress=True)` - based on IDs, collect data via the 
[FREDAPI](https://github.com/mortada/fredapi) package. This allows you to instantly collect all data for the 
curated list. For example, all countries you can find within 'Liquid Liabilities to GDP' (150+).

## Questions & Answers
In this section you can find answers to commonly asked questions. In case the answer to your question is not here, 
consider creating an [Issue](https://github.com/OpenBB-finance/MacroDatabase/issues).

- **How did you get your data?**
    - Please check the [Methodology](https://github.com/OpenBB-finance/MacroDatabase/tree/master/Methodology).
- **Which countries and states are supported?**
    - Please see [Countries](https://github.com/OpenBB-finance/MacroDatabase/tree/master/Structure/countries.json) and
    [States](https://github.com/OpenBB-finance/MacroDatabase/tree/master/Structure/states.json).
- **How can I find out which options exists?**
    - For this you can use the ``show_country_options`` function for the Curated Countries, ``show_state_options`` 
    for the Curated States and ``show_database_options`` function for general database querying.
- **How frequently does the Database get updated?**
    - Every sunday this database gets refreshed via GitHub Actions.
    See [Methodology](https://github.com/OpenBB-finance/MacroDatabase/tree/master/Methodology) for how this is done.

## Contribution
Projects are bound to have (small) errors and can always be improved. Therefore, we highly encourage you to submit 
issues and create pull requests to improve the package."
43,rjrosati/Inflation.jl,Julia,"# Inflation.jl

[![Build Status](https://travis-ci.com/rjrosati/Inflation.jl.svg?token=zMDX3GmCZbdBcf9JWMdp&branch=master)](https://travis-ci.com/rjrosati/Inflation.jl)
[![codecov](https://codecov.io/gh/rjrosati/Inflation.jl/branch/master/graph/badge.svg?token=JIJHU89U8J)](https://codecov.io/gh/rjrosati/Inflation.jl)

A Julia package for numerical evaluation of cosmic inflation models. Perturbations are evolved with the transport method. It supports symbolic calculation of the equations of motion, and remains efficient at a high number of fields, even with non-canonical kinetic terms.

`Inflation.jl`automatically applies the [horizon-crossing approximation](https://arxiv.org/pdf/1303.3611.pdf), if the potential is detected to be sum-separable. Support is planned for automatic application of other approximations when they are valid as well.

Watch the talk given about this package at JuliaCon 2020: https://www.youtube.com/watch?v=gvUZiPPB3nI

![logo](https://github.com/rjrosati/Inflation.jl/raw/master/inflationjl.png ""Logo"")

## Installation
For now, Inflation.jl is an unregistered Julia package. It can be installed with
```julia
julia> import Pkg

julia> Pkg.add(""https://github.com/rjrosati/Inflation.jl"")
```

## an example
```julia
using Inflation
using SymPy

# this is a quadratic inflation model with 10 fields and randomly selected masses

# set the field space dimension
d = 10

# set the model parameters, and their values
params = [symbols(""m$i"") for i in 1:d]
pvalues = rand(d)*1e-9

function G(Phi,p)
    d = length(Phi)
    g = Matrix{eltype(Phi)}(I,d,d)
    return g
end

function V(Phi,p)
    m = p
    return sum([ m[i]*Phi[i]^2)/2 for i in 1:d])
end

# set the initial conditions
Pi0 = zeros(d) # zero initial velocity

# pick a position randomly over the sphere, with radius to give ~N0 e-folds
N0 = 100
Phi0 = randn(d)
Phi0 ./= norm(Phi0)
Phi0 .*= sqrt(4*N0)

# symbolically construct the equations of motion
# because this potential is sum-separable, the horizon-crossing approximation will automatically be calculated
funcs = inflation_setup(d,V,G,params)

# solve the background equations of motion
sol = background_evolve(Phi0,Pi0,pvalues,funcs,verbose=true)

# solve the 2-pt correlation function equations of motion
# by default, use 7 k-values centered at a pivot scale of 0.002 Mpc^-1
tsol = transport_perturbations(sol,pvalues,funcs,verbose=true)

println(tsol)
```

see the `examples` directory for more complicated potentials and metrics, how to scan parameter space, evaluate several simulations in parallel, output and analyze data.

At the moment, `Inflation.jl` can only solve the 2-pt correlation function equations of motion. Solving for higher-point correlation functions is possible with [PyTransport](https://github.com/jronayne/PyTransport)/[CppTransport](https://github.com/ds283/CppTransport).
"
44,asaenzg/mscthesis,HTML,"# MSc. Project: NN Approach to Inflation Forecasting

I compare the performance of a RNN and a VAR model for inflation forecasting across 5 economies: the United States, the Euro Area, the Netherlands, Chile and Mexico.

The 'Data' file contains monthly time series of inflation, nominal interest rates, money supply M2, output gap, unemployment rates, real wages and RER YoY changes for these countries.

The 'Models' file contain the data presentation, the different models used and the results of the proyect.

The models used in the project are listed below:

    1. Benchmark: an AR(1) model. 
    2. VAR: the VAR's order was selected using AIC. 
    3. NN with keras: A multivariate RNN with a LSTM hidden layer.

Please, run first the 'data_presentation' file in order to load the data for the other R Markdown files.

The AR(1) and VAR models were built using RStudio, while the keras NN was developed using Python. The code files are in R Markdown and Jupiter Notebook format (.Rmd and .ipynb, respectively).
"
45,alekseinetsunajev/InflationExpectationsCode,Matlab,"This is the data and code for the paper The Anchoring of Ination Expectations in the Short and in the Long Run by 

Dieter Nautz
Aleksei Netsunajev
Till Strohsal

""Inflation Expectations Spillovers between the United States and Euro Area""

The data is in Excel format. The ordering of the variables as well as time horizon is as described in the paper.

The related estimation code is provided in Matlab. Various subprograms are called from the main program in MAIN.m.
Requirements for running the code: Matlab, Optimization_Toolbox, Statistics_Toolbox.

To get the main results for the model considered in the paper, open the MAIN.m file in Matlab 
and let it run. It will take a while to complete. 
The results will be printed on the Matlab command window and then figures will appear."
46,LeonMG/Neutrinos,C,This a repository in construction for a project for interacting neutrinos in cosmology for a Natural inflation model.
47,k-batista/inflation,Clojure,"# inflation

A Clojure library designed to ... well, that part is up to you.

## Usage

Run project 

```
lein run server
```

Data
https://www.dieese.org.br/

GAS
https://www.gov.br/anp/pt-br/assuntos/precos-e-defesa-da-concorrencia/precos/precos-revenda-e-de-distribuicao-combustiveis/serie-historica-do-levantamento-de-precos

Power Energy
https://portalrelatorios.aneel.gov.br/mercado/cativo#!

## License

Copyright © 2022 FIXME

This program and the accompanying materials are made available under the
terms of the Eclipse Public License 2.0 which is available at
http://www.eclipse.org/legal/epl-2.0.

This Source Code may also be made available under the following Secondary
Licenses when the conditions for such availability set forth in the Eclipse
Public License, v. 2.0 are satisfied: GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or (at your
option) any later version, with the GNU Classpath Exception which is available
at https://www.gnu.org/software/classpath/license.html.
"
48,mbjoseph/vif,R,"vif
===

[![Build Status](https://travis-ci.org/mbjoseph/vif.svg?branch=master)](https://travis-ci.org/mbjoseph/vif)

Interactive R shiny variance inflation factor sandbox: https://mbjoseph.shinyapps.io/vif-sandbox/
"
49,BigOyayubi/ZstdUnity,CMake,"# ZstdUnity
simple zstandard decompress binding for unity

# References

ZstdUnity is inspired by xLua[1] build sets.

* [1] xLua, https://github.com/Tencent/xLua

# Dependencies

* cmake

# QuickStart

* make plugins
    * `$ sh make_osx.sh`
* copy plugins
    * `$ cp -ap plugin/Plugins your/unity/project/Assets/`
* copy C# bindings
    * `$ cp -ap Assets/Uzstd your/unity/project/Assets/`

```csharp

//simple pattern
byte[] compressed;
byte[] dst = new byte[decompressedSize];
Uzstd.API.decompress(dst, dst.Length, compressed, compressed.Length);

//stream
using(var context = DecompressContext.CreateWithStream())
{
  byte[] work;
  int totalDecompressed = 0;
  do
  {
    var result = Uzstd.API.decompressStream(context, work, work.Length, compressed, compressed.Length);
    if( result == 0 ) {break;} //decompress done.
    if( result <  0 ) {throw new System.Exception(""decompress error""); }
    System.Array.Copy(work, 0, dst, totalDecompressed, result);
    totalDecompressed += result;
  }while(totalDecompressed < dst.Length);
}

//with dictionary
using(var context = DecompressContext.CreateWithDictionary(dict))
{
  Uzstd.API.decompressDictionary(context, dst, dst.Length, compressed, compressed.Length); 
}

//stream with dictionary
using(var context = DecompressContext.CreateWithStreamDictionary(dit))
{
  byte[] work;
  int totalDecompressed = 0;
  do
  {
    var result = Uzstd.API.decompressStreamDictionary(context, work, work.Length, compressed, compressed.Length);
    if( result == 0 ) {break;} //decompress done.
    if( result <  0 ) {throw new System.Exception(""decompress error""); }
    System.Array.Copy(work, 0, dst, totalDecompressed, result);
    totalDecompressed += result;
  }while(totalDecompressed < dst.Length);
}
```

# TODO

* test plugins android/ios/linux.

"
50,pascalmichaillat/intermediate-macro,,"# Intermediate Macroeconomics

This repository contains material for a one-semester course in intermediate macroeconomics.

## Instructor

The course material was developed by [Pascal Michaillat](https://www.pascalmichaillat.org/) for ECON 1210 at [Brown University](https://www.brown.edu).

## Course Webpage

The course is hosted at https://www.pascalmichaillat.org/t2.html.

## Course overview

The course explores core topics in macroeconomics, including national statistics, consumption and saving, unemployment, inflation, business cycles, monetary and fiscal policy, economic growth, and population dynamics. The course starts by presenting short-run and long-run economic fluctuations in the United States and abroad. It then introduces models describing such fluctuations: 

+ IS-LM model of business cycles
+ Matching model of unemployment
+ Models of inflation
+ Malthusian model of preindustrial growth
+ Solowian model of modern growth

## Course material

The repository contains all the material for the course.

+ `lectures` folder: 30 slide decks for 30 one-hour lectures
+ `references` folder: 3 journal articles describing the basic matching model and basic Malthusian model presented in lectures
+ `homework` folder: 
	* 8 problem sets, with their solutions
	* 100 multiple-choice questions, with their solutions
+ `exams` folder: 
	* 2 midterm exams, each with a practice version and solutions
	* 1 final exam, with a practice version and solutions

## Course organization

The course is organized in 6 modules.

1. Macroeconomic concepts: lectures 0–6; problem set 1
2. IS-LM model of business cycles: lectures 7–13; problem sets 2–4
3. Matching model of unemployment: lectures 14–20; problem sets 5–6
4. Models of inflation: lecture 21
5. Malthusian model of growth: lectures 22–24; problem set 7
6. Solowian model of growth: lectures 25–29; problem set 8

## Useful resources

No textbook is required for this course, but [Macroeconomics](https://www.pearson.com/us/higher-education/program/Blanchard-Macroeconomics-7th-Edition/PGM333935.html) by Olivier Blanchard nicely complements several parts of the course.

## License

The content of this repository is licensed under the terms of the Creative Commons Attribution 4.0 International License ([CC BY 4.0](http://creativecommons.org/licenses/by/4.0/)).
"
51,pesobitph/pesobit-source,C++,README.md
52,BenjiKCF/Hong-Kong-Big-Data-Downloader-,HTML,"# Hong Kong Big Data Downloader 
A data downloader for Hong Kong data. This includes HK Housing price (Centa-City Leading Index), HK GDP, HK Inflation, HSI, HK Unemployment, Chinese housing price, Chinese GDP, Chinese Inflation, CSI300, SP500, US interest, USD:RMB

The data are joinned together into a single DataFrame to facilitate future data analysis.

This version will use Quandl and Pandas datareader from yahoo and google to download all the economic data.
Centa-City leading index will be downloaded on  http://202.72.14.52/p2/cci/SearchHistory.aspx and parsed the htm file with beautiful soup

I will also upload my downloaded data to here for the ease of use.
I have also applied a machine learning algorithm in the end to demonstrate how to use the data.

The data will be put into a correlational heatmap with seaborn and I will provide the most correlated variables for a follow up LSTM prediction. 
"
53,srguiwiz/inflation,HTML,"# Inflation Calculators

## Use

These inflation calculators are live online at
https://infl.at/
.

Each calculator immediately works in your browser,
but also then
can be installed from the browser to become an icon on your phone's home screen.

| &#x2003; | Country | Live At | Currency |
| --- | --- | --- | --- |
| ![US icon](us/inflation-us.svg) | US | https://infl.at/us/ | US$ |
| ![CA icon](ca/inflation-ca.svg) | Canada | https://infl.at/ca/ | CA$ |
| ![DE icon](de/inflation-de.svg) | Deutschland | https://infl.at/de/ | €, davor DM |
| ![UK icon](uk/inflation-uk.svg) | United Kingdom | https://infl.at/uk/ | £ |
| ![FR icon](fr/inflation-fr.svg) | France | https://infl.at/fr/ | €, avant cela F |
| ![CH icon](ch/inflation-ch.svg) | Schweiz | https://infl.at/ch/ | Fr. |
| ![AT icon](at/inflation-at.svg) | Österreich | https://infl.at/at/ | €, davor ÖS |
| ![IN icon](in/inflation-in.svg) | India | https://infl.at/in/ | ₹ |
| ![JP icon](jp/inflation-jp.svg) | 日本 | https://infl.at/jp/ | 円 |
| ![IL icon](il/inflation-il.svg) | ישראל | https://infl.at/il/ | &#x2067;₪ אחרי ל״י&#x2069; |
| ![QA icon](qa/inflation-qa.svg) | قطر | https://infl.at/qa/ | ر.ق |
| ![PH icon](ph/inflation-ph.svg) | Philippines | https://infl.at/ph/ | ₱ |
| ![CL icon](cl/inflation-cl.svg) | Chile | https://infl.at/cl/ | CLP$, antes de ese Eº |
| ![BW icon](bw/inflation-bw.svg) | Botswana | https://infl.at/bw/ | P |
| ![ID icon](id/inflation-id.svg) | Indonesia | https://infl.at/id/ | Rp |
| ![PK icon](pk/inflation-pk.svg) | پاکستان | https://infl.at/pk/ | ₨ |
| ![LB icon](lb/inflation-lb.svg) | لبنان | https://infl.at/lb/ | ⁧ل.ل.⁩ |
| ![CN icon](cn/inflation-cn.svg) | 中国 | https://infl.at/cn/ | 元 |
| ![BR icon](br/inflation-br.svg) | Brasil | https://infl.at/br/ | R$, e outros no passado |
| ![NG icon](ng/inflation-ng.svg) | Nigeria | https://infl.at/ng/ | ₦, preceded by £ |
| ![BD icon](bd/inflation-bd.svg) | বাংলাদেশ | https://infl.at/bd/ | ৳ |
| ![AU icon](au/inflation-au.svg) | Australia | https://infl.at/au/ | $, preceded by £ |

## More Countries

If you send a pull request, your calculator can be online too.

First, to understand what you will have to change, compare existing directories,
for example with `diff de in` .
Then, you can work on your files in a specific country directory.
You can work on files even without running a server, without node or npm.

You can fork this repository to derive a calculator

- for another country,
- for a currency and its predecessor,
- with more current data,
- with further back data, or
- with a different appearance.

One difficulty level up is to derive a calculator

- between currencies of countries.

The US, Canadian, and Swiss inflation calculators have been configured for their
single currency, respectively.
A historical currency switch is handled correctly in the German and Austrian
calculators, as an example.
Two switches are handled in the French calculator, as an example.
The code for multiple currencies is present equally in all calculators.
The Canadian and Swiss calculators are multilingual.
Right to left writing is supported.

This calculator is optimized for certain uses.

Numbers and notes taken, if any, stay on a user's device only.
Nothing gets sent to a server.

We are grateful to the people who have collected and processed the
information the consumer price index is based on in their countries,
and to those who have funded those efforts.

## Purpose

One purpose of this project is understanding and getting along,
across generations.

For example,
for a grandparent to understand why a kid wants to spend $20 on a shirt,
when their own shirts used to be $3.
And, for a kid to understand what it means a grandparent worked for $2 per hour.

This also is for people whose activities have prevented them from
paying attention to some aspects of money.
Sometimes they have to pay attention.
These calculators hopefully help making sense of numbers changing in time.

This app was started as an exercise.

## Outlook

The initial organization and structure of this project had been chosen to fit
the phase it has been in.

Incremental changes are expected.

Better development documentation is intended to be written on demand.

## Internationalization Services

For help with internationalization and localization,
for education, training, consulting, development, automation, and testing,
write to i18n at infl dot at.

Internationalization is work that enables localization.
"
54,acrdlph/inflationary-token,JavaScript,"# Dynamic inflationary token inspired by [Livepeer](https://github.com/livepeer/protocol)


## Inflation mechanism

This token allows a certain percentage of totalSupply to be newly minted in every round (time period). A round is defined by the token creator as a number of blocks.

If and only if a new round has started, the owner of the token can initialize the round and mint the new inflationary tokens.

The current implementation keeps inflation constant, but in the next step there will be a `setInflation()` function that adjusts the inflation rate in each period based on dynamic variables like participation rate or time passed since launch.

## Run
Spawn a local blockchain:
```
yarn ganache
```
And in another tab:
```
yarn install
yarn test
```

"
55,kranthikittu/Android_inflation,Kotlin,
56,TariqAHassan/EasyMoney,Python,"EasyMoney
=========

[![Build Status](https://travis-ci.org/TariqAHassan/EasyMoney.svg?branch=master)](https://travis-ci.org/TariqAHassan/EasyMoney)

## Overview

Feature Summary:

- Computing Inflation
- Currency Conversion
- Adjusting a given currency for Inflation
- 'Normalizing' a currency, i.e., adjust for inflation and then convert to a base currency.
- Relating ISO Alpha2/3 Country Codes, Currency Codes as well as a Region's Name to one another.
-  This tool automatically obtains the latest inflation and exchange rate information from online databases.

**NOTICE: THIS TOOL IS FOR INFORMATION PURPOSES ONLY.**

## Dependencies

EasyMoney requires: [numpy], [pandas], [pycountry], [requests] and [wbdata]<sup>†</sup>.

## Installation

Python Package Index:
```bash
$ pip install easymoney
```

Latest Build:
```bash
$ pip install git+git://github.com/TariqAHassan/EasyMoney@master
```

EasyMoney is compatible with Python 2.7 and 3.3+.

## Examples

##### Import the tool
```python
from easymoney.money import EasyPeasy
```

##### Create an instance of the EasyPeasy Class

The standard way to do this is as follows:

```python
ep = EasyPeasy()
```

However, [fuzzy searching] can also easily be enabled.

```python
ep = EasyPeasy(fuzzy_threshold=True)
```

#### Prototypical Conversion Problems

##### 1. Currency Converter
```python
ep.currency_converter(amount=100000, from_currency=""USD"", to_currency=""EUR"", pretty_print=True)

# 94,553.71 EUR
```

##### 2. Adjust for Inflation and Convert to a base currency
```python
ep.normalize(amount=100000, region=""CA"", from_year=2010, to_year=""latest"", pretty_print=True)

# 76,357.51 EUR
```

##### 3. Convert Currency in a more Natural Way
```python
ep.currency_converter(amount=100, from_currency=""Canada"", to_currency=""Ireland"", pretty_print=True)

# 70.26 EUR
```

#### Handling Common Currencies

##### 1. Currency Conversion
```python
ep.currency_converter(amount=100, from_currency=""France"", to_currency=""Germany"", pretty_print=True)

# 100.00 EUR
```
EasyMoney understands that these two nations share a common currency.

##### 2. Normalization

```python
ep.normalize(amount=100, region=""France"", from_year=2010, to_year=""latest"", base_currency=""USD"", pretty_print=True)

# 111.67 USD
```

```python
ep.normalize(amount=100, region=""Germany"", from_year=2010, to_year=""latest"", base_currency=""USD"", pretty_print=True)

# 113.06 USD
```

EasyMoney also understands that, while these two nations may share a common currency, the rate of inflation in these regions could differ.

#### Region Information

EasyPeasy's `region_map()` method exposes some of the functionality from the `pycountries` package in 
a streamlined manner.


```python
ep.region_map('GB', map_to='alpha_3')

# GBR
```

```python
ep.region_map('GB', map_to='currency_alpha_3')

# GBP
```


If fuzzy searching is enabled, the search term does not have to exactly match
those stored in the databases cached by an `EasyPeasy` instance.

For example, it is possible to find the ISO Alpha 2 country code for 'Germany' by passing 'German'.

```python
ep.region_map('German', map_to='alpha_2')

# DE
```

#### Options

It's easy to explore the terminology understood by `EasyPeasy`, as well as the dates for which
data is available.

```python
ep.options()
```

|   Region  | Alpha2 | Alpha3 | Currencies | InflationDates |      ExchangeDates        |         Overlap           |     
|:---------:|:------:|:------:|:----------:|:--------------:|:-------------------------:|:-------------------------:|
| Australia |   AU   |  AUS   |     AUD    |  [1960, 2015]  | [04/01/1999, 29/11/2016] | [04/01/1999, 31/12/2015]   |
|  Austria  |   AT   |  AUT   |     EUR    |  [1960, 2015]  | [04/01/1999, 29/11/2016] | [04/01/1999, 31/12/2015]   |
|  Belgium  |   BE   |  BEL   |     EUR    |  [1960, 2015]  | [04/01/1999, 29/11/2016] | [04/01/1999, 31/12/2015]   |
|   ...     |  ...   | ...    |     ...    |      ...       |           ...             |           ...             |

Above, the 'InflationDates' and 'ExchangeDates' columns provide the range of dates for which inflation and exchange rate information 
is available, respectively. Additionally, all dates for which data is available can be show by setting the 
`range_table_dates` parameter to `False`. The 'Overlap' column shows the range of dates shared by the 'InflationDates'
and 'ExchangeDates' columns.

## Documentation

For complete documentation please click [here].

## License

This software is provided under a BSD License.

## Resources

Indicators used:

1. [Consumer price index (2010 = 100)]
    * Source: International Monetary Fund (IMF), International Financial Statistics.
    * Note: All inflation-related results obtained from easymoney (including, but not necessarily limited to, inflation rate and normalization) are the result of calculations based on IMF data.
       		   These results do not constitute a direct reporting of IMF-provided data.
2. [Euro foreign exchange reference rates - European Central Bank]
    * Source: European Central Bank (ECB).
    * Notes:
       * The ECB data used here can be obtained directly from the link provided above.
       * Rates are updated by the ECB around 16:00 CET.
       * The ECB states, clearly, that usage of this data for transaction purposes is strongly discouraged. 
         This sentiment is echoed here; as stated above, ***this tool is for information purposes only***.
       * All exchange rate-related results obtained from EasyMoney (including, but not necessarily limited to, currency conversion and normalization) are the result of calculations based on ECB data.
       		   These results do not constitute a direct reporting of ECB-provided data.
    
<sup>†</sup>Sherouse, Oliver (2014). Wbdata. Arlington, VA. 

  [Consumer price index (2010 = 100)]: http://data.worldbank.org/indicator/FP.CPI.TOTL
  [Euro foreign exchange reference rates - European Central Bank]: https://www.ecb.europa.eu/stats/exchange/eurofxref/html/index.en.html
  [numpy]: http://www.numpy.org
  [pandas]: http://pandas.pydata.org
  [requests]: http://docs.python-requests.org/en/master/
  [pycountry]: https://pypi.python.org/pypi/pycountry
  [wbdata]: https://github.com/OliverSherouse/wbdata
  [fuzzy searching]: https://github.com/seatgeek/fuzzywuzzy 
  [here]: https://tariqahassan.github.io/EasyMoney/index.html
"
57,aurelienHamouti/legislative_inflation,JavaScript,"# Projet de visualisation de l'évolution législative en Suisse 

## Description
Le présent projet s’inscrit dans le cadre du cours de Visualisation des données dispensé par M. Isaac Pante à l’Université de Lausanne au semestre du printemps 2021. Il a pour objet de permettre la visualisation de l’œuvre de l’Assemblée fédérale suisse selon plusieurs perspectives, notamment : 
-	**chronologique** : en permettant de suivre le travail du législateur au fil des mois et des années ; 
-	**quantitative** : le projet intègre la possibilité d’agréger les objets législatifs afin de se rendre compte du nombre de lois votées par mois, par année ou sur toute la période donnée, ainsi que la taille de chaque loi ; 
-	**qualitative** : la couleur des éléments permet en outre de déterminer les thématiques et sous-thématiques relatives à chaque loi.

L’objectif poursuivi est de permettre à l’utilisateur d’observer le travail effectué par le législateur et de pouvoir tirer ses propres conclusions par exemple sur les cycles régissant l’Assemblée , les thématiques qui y sont abordées, les priorités du législateur etc. 


### Illustration du graphique agrégé 
![illustration graphique agrégé](/figures/Illustration_graphique_agrégé_1.png)


### Illustration du graphique chronologique
![illustration graphique non agrégé](/figures/Illustration_graphique_non_agrégé_1.png)


## Installation et mise en place
Pour installer le programme, il est nécessaire de télécharger et d'extraire les fichiers sur un serveur local ou distant (Sur GitHub, cliquer sur ""Code"" puis ""Download Zip"", extraire le fichier dans le dossier souhaité).

Le programme n'étant pas encore hébergé sur un site internet, il peut être consulté en local en téléchargeant un logiciel d'édition de codes (comme  **[Visual Studio Code](https://code.visualstudio.com/download)**, en installant l'extension **[Live Server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)**).

Depuis Visual Code Studio avec l'extension Live Server, ouvrir le dossier téléchargé en cliquant sur ""Fichier"" puis ""Ouvrir le dossier"". Le script peut désormais être lancé en cliquant sur le bouton en bas à droite de l'écran **Go Live**. 

Le logiciel utilisant une version en ligne de la librairie de visualisation D3.JS, une connexion à internet est requise.


## Base de données
Deux bases de données sont principalement utilisées afin d’alimenter le projet : 
-	le **[Recueil officiel](https://www.fedlex.admin.ch/fr/oc?news_period=last_day&news_pageNb=1&news_order=desc&news_itemsPerPage=10)** : dont sont uniquement extraites les lois fédérales définitivement votées par l’Assemblée fédérale et publiées (pour les besoins de la visualisation, ne sont pas compris dans la base de données les ordonnances, règlements, arrêtés pris par le pouvoir exécutif) ; 
-	le **[Recueil systématique](https://www.fedlex.admin.ch/fr/cc?news_period=last_day&news_pageNb=1&news_order=desc&news_itemsPerPage=10)** : dont sont extraits les listes de thématiques législatives ainsi que leurs codes correspondants afin de permettre d’identifier la thématique de chaque objet législatif dans la base de données.

![illustrations bases](/figures/IllustrationRORS.png)

## Données
Pour chaque loi, la base données contient plusieurs informations : 
-	le nom de la loi ;
-	la date de publication de la loi ;
-	la date du vote ou de la modification de la loi ;
-	le numéro au Recueil officiel ;
-	un lien hypertexte vers le Recueil officiel ;
-	l’unité administrative responsable de la loi ; 
-	le nombre de pages de la loi.

À ce stade, les données ont été recueillies sur **10 ans** (de 2010 à 2020). Le projet et sa base de données ont toutefois été conçus afin de permettre une mise à jour des prochaines lois (pour les années 2021 et suivantes) ainsi qu’un enrichissement (pour les années 2009 et antérieures).

![illustrations données](figures/IllustrationDonnees1.png)


## Auteurs
**Aurélien Hamouti** (développeur): développement et programmation du code principal et intégration à GitHub.

**Catherine Döbeli et David Pressouyre** (juristes) : création, enrichissement et mise à jour des bases de données et assistance au développement.

## Droits d'auteurs
Copyright@ Tout droits réservés


**************************************************************************************************

# Project to visualize the legislative evolution in Switzerland 

## Description
This project is part of the Data Visualization course taught by Mr. Isaac Pante at the University of Lausanne during the spring 2021 semester. It aims to allow the visualization of the work of the Swiss Federal Assembly from several perspectives, including: 
- **Chronological**: by allowing to follow the work of the legislator over the months and years; 
- **Quantitative**: the project integrates the possibility to aggregate the legislative objects in order to see the number of laws passed per month, per year or over the whole given period, as well as the size of each law; 
- **Qualitative**: the color of the elements also makes it possible to determine the themes and sub-themes related to each law.

The objective is to allow the user to observe the work done by the legislator and to be able to draw his or her own conclusions, for example, on the cycles governing the Assembly, the themes addressed, the legislator's priorities, etc. 


### Illustration of the aggregated graph 
![illustration graphique agrégé](/figures/Illustration_graphique_agrégé_1.png)



### Illustration of the chronological graph
![illustration graphique non agrégé](/figures/Illustration_graphique_non_agrégé_1.png)



## Installation and setup
To install the program, it is necessary to download and extract the files on a local or remote server (on GitHub, click on ""Code"" then ""Download Zip"", extract the file in the desired folder).

As the program is not yet hosted on a website, it can be consulted locally by downloading a code editing software (like **[Visual Studio Code](https://code.visualstudio.com/download)**, by installing the **[Live Server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)** extension).

From Visual Code Studio with the Live Server extension, open the downloaded file by clicking on ""File"" then ""Open the file"". tTe script can now be launched by clicking on the button at the bottom right of the **Go Live** screen. 

As the software uses an online version of the D3.JS visualization library, an internet connection is required.


## Database
Two databases are mainly used to feed the project: 
- the **[Recueil Officiel](https://www.fedlex.admin.ch/fr/oc?news_period=last_day&news_pageNb=1&news_order=desc&news_itemsPerPage=10)** : from which are extracted only the federal laws definitively voted by the Federal Assembly and published (for the needs of the visualization, ordinances, regulations, decrees taken by the executive power are not included in the database) ; 
- the **[Recueil systématique](https://www.fedlex.admin.ch/fr/cc?news_period=last_day&news_pageNb=1&news_order=desc&news_itemsPerPage=10)** : from which are extracted the lists of legislative themes as well as their corresponding codes in order to identify the theme of each legislative object in the database.

![illustrations bases](/figures/IllustrationRORS.png)

## Data
For each law, the database contains several information: 
- its name;
- its date of publication;
- its date of vote or modification;
- its number in the Recueil Officiel;
- an hyperlink to the Recueil Officiel;
- the administrative unit responsible for the law; 
- its size in number of pages.

At this stage, data has been collected for **10 years** (2010 to 2020). However, the project and its database have been designed to allow for updating of future laws (for the years 2021 onwards) as well as enrichment (for the years 2009 onwards).

![illustrations données](figures/IllustrationDonnees1.png)

## Authors
**Aurélien Hamouti** (developer): development and programming of the main code and integration to GitHub.

**Catherine Döbeli and David Pressouyre** (lawyers): creation, enrichment and update of the databases and development assistance.

## Copyrights
Copyright@ All rights reserved


"
58,rozgo/eosio.inflation,C++,"# EOSIO Contract for inflating an eosio.token


Setup accounts
```
cleos create account eosio fud.token <pub_key> <pub_key> 
cleos create account eosio fud.bank <pub_key> <pub_key>
```

Setup eosio.token
```
cleos set contract fud.token ~/contracts/eosio.contracts/eosio.token -p fud.token
cleos push action fud.token create '[ ""fud.bank"", ""1000000.0000 FUD""]' -p fud.token@active
cleos push action fud.token issue '[ ""fud.bank"", ""1000.0000 FUD"", ""token supply increase by bank deposit"" ]' -p fud.bank@active
```

Setup inflation contract
```
eosio-cpp -o inflation.wasm inflation.cpp --abigen
cleos set contract fud.bank ~/contracts/fud.bank/inflation -p fud.bank@active
cleos set account permission fud.bank active --add-code
cleos push action fud.bank init ""[]"" -p fud.bank@active
```

Inspect and inflate
```
cleos get table fud.bank fud.bank issuance
cleos get table fud.token FUD stat
cleos push action fud.bank inflate '[]' -p fud.bank@active
```
`inflate` action can be called as many times as you want. Can be scheduled with a cron job daily, weekly, monthly, etc.
"
59,koksoya/inflation-forecast,Jupyter Notebook,"# inflation-forecast

## Objectives of the Project
- To define inflation,
-To determine the factors affecting the increase of inflation,
-To train a linear regression model with the identified attributes,
-To make predictions with this model,
-To determine the accuracy score of this model,
-To predict the future of inflation by using the data
-To tell the effect of inflation on our lives with concrete examples

## Source of data
Central Bank of the Republic of Turkey and the data used in the project is taken from the Electronic Data Dissemination System
Link -> https://evds2.tcmb.gov.tr/index.php?

## Motivation
To understand the reasons of inflation, which is the reason of the excessive cost of life, to learn the factors affecting this and to predict the effect of inflation on the cost of living in the ongoing process.

### What is Inflation?
Inflation is an increase in prices of goods and services.
However, the prices of goods and services may increase or decrease over time.
Inflation is not only an increase in the price of a particular good or service, but a continuous increase in the general level of prices.
In other words, it is not just inflation that increases the prices of some goods or an increase in prices of all goods.
For example, the monthly inflation rate of 1 percent indicates that the general level of prices increased by 1 percent compared to the previous month.
The fact that the annual inflation rate is 30 percent indicates that the prices have increased by 30 percent on average compared to the previous year, for example, a basket of goods purchased for 200 TL last year can only be purchased for 260 TL this year.

Inflation rates are also very effective on exchange rates as they can directly affect the steps taken by central banks in monetary policies.
Because the inflation rate is the leading indicator for the changes to be made by the central banks on interest rates.

### Factors Affecting the Increase of Inflation
- High demand
- Goods and services can not meet the demand
- Reduction of production
- Increase in consumption
- Increased costs
- Reduction of money supply
- Increase in foreign exchange rates
- Growth of foreign trade deficit


It can be solved by taking measures to reduce the demand (interest rate increase etc.) or increase the production.
"
60,itamarcaspi/core-inflation,HTML,
61,fernote7/Inflation,R,"[![Build Status](https://travis-ci.org/fernote7/Inflation.svg?branch=master)](https://travis-ci.org/fernote7/Inflation) [![CRAN_Status_Badge](http://www.r-pkg.org/badges/version/Inflation)](https://CRAN.R-project.org/package=Inflation) [![downloads](http://cranlogs.r-pkg.org/badges/Inflation)](https://cran.rstudio.com/web/packages/Inflation/index.html) ![Build Status](https://ci.appveyor.com/api/projects/status/github/fernote7/Inflation?branch=master&svg=true)

[![codecov](https://codecov.io/gh/fernote7/Inflation/branch/master/graph/badge.svg)](https://codecov.io/gh/fernote7/Inflation)

# Inflation
Inflation provides access to core inflation functions. Four different core inflation 
functions are provided. The well known trimmed means, exclusion and double weighing methods, 
alongside the new Triple Filter method <https://goo.gl/UYLhcj>.

## Installation

```R
install.packages(""Inflation"") 
```
"
62,nmecsys/Inflation,R,"[![Build Status](https://travis-ci.org/fernote7/Inflation.svg?branch=master)](https://travis-ci.org/fernote7/Inflation) [![CRAN_Status_Badge](http://www.r-pkg.org/badges/version/Inflation)](https://CRAN.R-project.org/package=Inflation) [![downloads](http://cranlogs.r-pkg.org/badges/Inflation)](https://cran.rstudio.com/web/packages/Inflation/index.html) ![Build Status](https://ci.appveyor.com/api/projects/status/github/fernote7/Inflation?branch=master&svg=true)
![CRAN](https://img.shields.io/cran/l/Inflation.svg)
[![codecov](https://codecov.io/gh/fernote7/Inflation/branch/master/graph/badge.svg)](https://codecov.io/gh/fernote7/Inflation)

# Inflation
Inflation provides access to core inflation functions. Four different core inflation 
functions are provided. The well known trimmed means, exclusion and double weighing methods, 
alongside the new Triple Filter method <https://goo.gl/UYLhcj>.

## Installation

```R
install.packages(""Inflation"") 
```
"
63,rpetrich/partialzip,C,"Use cmake 2.6 to create the Makefiles for this.

Requires libcurl 7.19.4 for file:// URL support.

test.c contains an example that is designed for a simple test.zip containing
only a text.txt.

"
64,gabrielrvsc/ForecastingInflation,R,"# ForecastingInflation
"
65,devinsays/salaryinflation,JavaScript,"# Salary Inflation Calculator

Calculate how much your salary would need to be adjusted to keep up with inflation. [Visit website](https://salaryinflation.com/).

![Screenshot of website.](https://github.com/devinsays/salaryinflation/raw/main/assets/screenshot.gif)

### About

* Calculated using the [Consumer Price Index](https://www.bls.gov/cpi/).
* Data provided by the [U.S. Bureau of Labor Statistics](https://www.bls.gov/data/inflation_calculator.htm).

Built using html, css and vanilla javascript. Deployed on Cloudflare Pages.

Pull requests and feedback welcome."
66,bquast/Cryptocurrency-Inflation,TeX,"Bitcoin and Cryptocurrencies
=============================================================
Or How Inflation Will Come About in Cybermoney
-------------------------------------------------------------

In 2009 the online currency **Bitcoin** was launched by an anonymous developer known by the pseudonym Satoshi Nakamoto.
The protocol was based on a 2008 white paper by the same author, and every aspect of it is public and open source.
This quickly led to the launching of several alternative online currencies, based on the Bitcoin protocol.
These currencies have recently become known as **cryptocurrencies**.

There are some key benefits to cryptocurrencies, a few of which I will mention here.
Firstly, the system is self-regulating, meaning that no government or institution controls it.
For the user that means that their holdings cannot be used as a policy instrument.
Conventional fiat currencies are owned by a government,
which means that they can be used to e.g. stimulate economic growth by printing extra money,
which lessens the value of individuals holdings.

Secondly, users control their own holdings on their own computer, which eliminates the need for a bank.
This brings the advantage that users are not dependent on open hours,
waiting lines, or e-banking websites, it also means no fees.
Additionally a user's holdings cannot be wiped out by his or her bank bankrupting after speculative investing or something of that sort.

Thirdly, transactions are as easy, instant, and costless as sending an email.
Bitcoin exists online digitally,
which means that there is no physical counterpart that needs to be moved,
such as with gold, or paper money.
Additionally, it is equally valid across countries, which means that there is no need to exchange it.
This makes Bitcoin an ideal mechanism for remittances, which nowadays can cost as much as 10 percent.
Additionally no government can apply capital restrictions on these remittances.

Lastly, the instant nature of transactions means it is well suited for online retailing.
Credit card transactions seem instant, but in fact are not.
A significant percentage is in fact reversed after initial clearance.
This is very costly for retailers, this often occurs after packaging of shipping has started.

From a technical perspective there are many innovative features to cryptocurrencies,
and I will begin by highlighting the key ones.
After this I will focus on two economic aspects, which have been thought to be problematic,
namely the lack of inflation and also socially wasteful mining.
Although these aspects might seem unrelated, they have a common solution.

**Bitcoin** is a confusing term.
It is both a monetary unit of denomination,
such as Swiss franc, euro, or pound sterling,
as well as, a monetary system as a whole, including the protocol, the network, and the software.
To distinguish between the two, the system **Bitcoin** is written with a capital letter B,
the monetary unit is **bitcoin**, with a small letter b.

Bitcoin is built from the ground up to be decentralised and anonymous.
All software is open source and publicly available.
Anybody can perform any function within the network (user or node),
there is no central or essential node,
there is redundancy in every aspect.

The essential principle is that every user has a piece of software on their computer, a **wallet**,
which contains a set of **public addresses** (like bank account numbers),
each address is mathematically linked with a **private key** (like a password).
Using this secret key, users can create a digital **signature**, 
to prove that they are the owner of an address.
This signature, together with a transaction is sent to a **bitcoin miner**.
The miner is a node in the network,
which verifies that the address and signature are linked,
after which the transaction is recorded in the public ledger,
or **blockchain** and disseminated throughout the network.

There are a number of other features which are important to highlight.
Bitcoins are created through a process called **mining**,
this is a computationally intensive process used as the mechanism for transaction verification.
The Bitcoins created as a reward for mining becomes incrementally smaller, until finally becoming zero.
This is predicted to be around the year 2140, and at that point around 21 million bitcoins will have been created.
There will never be more bitcoins in the system.
Furthermore, bitcoins will be lost if private keys are lost, these will never be recovered.
The system is thus strictly deflationary.
To keep transactions of every size possible, bitcoins are highly granular,
every bitcoin can be divided into a hundred million **satoshi** (named after the pseudonym of the creator).

As the value of bitcoin goes up, more people will choose to engage in the lucrative mining.
As extra computational power comes in, the difficulty of mining automatically goes up,
which means more computing power is used for the same transactions.
This is necessary to safeguard the integrity of the network.

Having established the key features of the Bitcoin system,
we will now focus on two often heard economic concerns about the Bitcoin system.
Namely the issue of deflation and the issue of socially wasteful mining.

As mentioned above, there will only ever be around 21 million bitcoins, and some will be lost,
this makes the system deflationary, which is troubling to economists.
Deflation provides a disincentive to spend, causing economic slowdown (see e.g. Fisher, 1933). 
Since deflation causes the price of products to fall, it incentivises people to save ans spend later.
Additionally, these savings are not invested properly,
since deflation simultaneously provides a disincentive for borrowers, 
by making future paybacks more expensive, raising the effective interest rate.

The second issue is the value of the mining process.
As described above, the process of mining is the solving of computational problems,
in order to secure the integrity of the Bitcoin network.
However, the actual social value of the arithmetic solution itself is zero, since it has no application other than Bitcoin integrity.
As the number of bitcoins is limited, and more money is invested in it, the value can only increase.
The increase in value will make it more lucrative to engage in bitcoin mining,
which means more computational power will be devoted to this.
To keep the system secure in face of this extra computing power, the difficulty goes up.
However, if the extra power had not come in, this would not have been necessary.
The extra computers which engage in bitcoin mining thus do not add any social value.

It has to be noted, that the bar for social value is being set very high.
Extraction, storage, and transfer of value is a resource intensive enterprise.
Consider the gold mining industry (note, this is the origin of the term **bitcoin mining**).
The extraction of gold is a very resource intensive, dangerous, and pollutive process.
After the extraction, purification, and molding, most gold is stored highly guarded in vaults.
Finally then, gold can be utilised to conduct transactions,
which involves shipping bars of gold across the ocean under maximum security,
only to be stored in another highly protected vault, on arrival. (see e.g. Friedman and Schwartz, 1967)

The solution for both these lies in the multiplicity of cryptocurrencies.
As mentioned above, every aspect of Bitcoin is open and publicly accessible,
it is therefore relatively easy to start an alternative Bitcoin, and this has been done.
There are in fact many currencies based on the Bitcoin protocol, collectively referred to as
cryptocurrencies.
It is relatively easy and cheap to construct a number cryptocurrency, whereby the number of available coins can be set by the creator.
The most popular alternative to Bitcoin is called Litecoin, its main difference is that it processes transactions faster, and the total number of coins is four times as high.
Aside Litecoin, there are many other alternative cryptocurrencies,
most of which never gain momentum and the value of which remains only trivially above zero.
However, a significant number does succeed.
The momentum mechanism could perhaps best be compared with a positive variation on currency attacks (see Obstfeld, 1986, 1995, 1996).
Unlike the creation of new coins in an existing cryptocurrency, the creation of new cryptocurrencies is relatively cheap.

The key point to observe here, is that cryptocurrencies do have value, but only as a transaction mechanism.
Hereby the biggest bottleneck is probably the number of cryptocurrencies that merchants are willing the accept simultaneously.
However, due to their similarity, it is very straightforward for e.g. merchants to accept multiple currencies.
When we combine the value with the relatively costless creation of cryptocurrencies,
we see an equilibrium in the number of cryptocurrencies that is far higher than in the current situation.

Inflation is impossible within the Bitcoin network, as well as within most other cryptocurrencies.
However, inflation in the cryptocurrency economy is still possible, through an expansion the number of cryptocurrencies.

It is also through this multiplicity that wasteful mining will be limited.
As noted above, cryptocurrencies have value, because they are effective mechanisms for transactions.
However, this is the only source of value.
If a cryptocurrency becomes too expensive (which causes excessive mining), 
a new, lower valued, cryptocurrency will arise.
Since the value of this currency is lower, but it is equally effective in transactions, value will flow out of the overvalued cryptocurrency and into the undervalued one.
This lowers the value of the overvalued cryptocurrency, and less mining will be done here, reducing the waste.

In conclusion, cryptocurrencies such as Bitcoin have an enormous potential as a transaction mechanism,
giving users control of their own holdings and making transactions instant and costs negligible.
Two commonly heard issues with cryptocurrencies are deflation and wasteful mining.
It can be shown that these issues are not pervasive,
when the cryptocurrency economy as a whole is considered.
Cryptocurrencies derive their value only from being an efficient transaction mechanism,
if they appear to become overvalued (causing excessive mining), other cryptocurrencies will arise.
This will increase the total number of cryptocoins (between all cryptocurrencies),
which will drive down the price, and limit excessive mining."
67,motherjones/inflation-calculator,,
68,helpimalive/inflation_cr_expansion,PostScript,"# This is a repository for the Inflation and CR Expansion research

# Notes on Usage

# Schedule
		Matt:
		DONE at the MSA level; we can leave the national one in excel
		1) Formalize macro model in python

		Walker:
		DONE
		2) Validate MSA-level models in python
			Pull MSA-level data 
				Cap Rates (major sector combined)
				GDP
				DONE: CPI - will indicate specific markets to pull

Walker: Familiarize with Research Paper format
		
		DONE
		Together
			Write script in python to wrangle data into a single dataframe
		
		DONE
		Matt
			Forecast cap rate expansion based on forecasted conditions

Matt:
Walker start; Matt Review: 	prior research section (done by by end of January)
Walker start; Matt Review:  exhibits (graphs of MSAs outputs) (use matplotlib) (give walker a template to use)
	
	12/12-12/19
	Walker start; Matt Review
	5) Write Results Section
	
	1/3 - 1/8
	Walker start; Matt Review
	6) Write Conclusions Section
	7) Compile list of journals to submit
	
	1-9-1/15
	Both: review
	8) Submit to Journals
	9) Write a non-technical version
	10) Submit non-technical version to Linneman Letter
	
	
Note: All MSAs for which the BLS provides CPI are included except Riverside-SD-Ontario because that only began in 2017, Alaska and Hawaii for lack of good cap rate data and apilcable GDP that matched the CPI area
https://www.bls.gov/cpi/additional-resources/geographic-revision-2018.htm"
69,sklise/adjust-for-inflation,JavaScript,"# Inflation Calculator

http://inflation.skli.se

A website for calculating buying power of the United States dollar from 1913 to present. An experiment with [React][1]

## Running

This site is built with [Gulp][2] and [Harp][3]. You'll need Node.js as well. Once you have Node installed, run the following:

```
npm install gulp -g
npm install harp -g
```

Then from within the directory of this project, run

```
npm install -d
```

to install the development dependencies.

There are 3 scripts:

- `npm run start` : Starts up the Harp server on localhost:9000
- `npm run build` : Compiles the site to `_site/`
- `npm run publish` : Publishes the site to Amazon S3, you must first have a `.env` file with `S3_KEY` and `S3_SECRET`.

## Data Source

CPI data was retrieved from the [Bureau of Labor Statistics][4], Series [CUUR0000AA0][5].

[1]: http://facebook.github.io/react
[2]: http://gulpjs.com
[3]: http://harpjs.com
[4]: http://data.bls.gov/timeseries/CUUR0000SA0?output_view=pct_1mth
[5]: http://download.bls.gov/pub/time.series/cu/cu.data.1.AllItems"
70,rjrosati/inflation-simulation,Python,"# inflation-simulation
Have you ever wondered ""How far away will my screams reach?""? Well, here is the ultimate answer. It doesn't get any less causally connected than this. Here we introduce INFLATION SIMULATOR 9000. Be it that you started screaming at the beggining of the universe, of rather late (during radiation dominated era) we can tell you how far away they will ever reach!

# Download
To run a pre-compiled version of the game, download and unzip the file for your OS from the releases page:
https://github.com/rjrosati/inflation-simulation/releases/latest . Then double-click the executable. For Mac and Linux the executable is named `universe`, on Windows it's `universe.exe`.

# Controls
The simulation will begin paused.
+ <kbd>SPACE</kbd> starts/pauses the simulation.
+ <kbd>ENTER</kbd> speeds up time by a factor of 10 while held down
+ <kbd class=""mouse"">Left click</kbd> release a shell of light where you click.
+ <kbd>p</kbd> toggles the plot of a(t) 
+ <kbd>h</kbd> toggles the display of the causal horizon (i.e. the max comoving distance the current light ray could travel in infinite time) 
+ <kbd>e</kbd> ends inflation and switches to radiation domination
+ <kbd>g</kbd> GODMODE, sets view to comoving coordinates.
+ <kbd>r</kbd> resets the simulation to the initial conditions at t=0
+ <kbd>m</kbd> toggles music 

# Things to try:

- Causal horizon:
Switch to GODMODE. Start a light beam. Notice how the light beam will never reach the causal horizon. End inflation. Causal horizon will skyrocket, why do you think that is?
- Look at the plots in the two modes: 
NOTICE THE INTERSECTIONS: Your screams could hardly be heard during inflation but radiation era brings them back to those distant places!!!

# To run from source
To download this script, click on the green ""clone or download"" button right above the list of files. If you have `git` installed, you can clone the repository, or you can download the current version as a zip file.

## Installation
If you don't have `Python` installed, we recommend you install the Anaconda distribution (for Python 3), which comes packaged with `numpy`. https://www.continuum.io/downloads

You'll then need to run `pip install pygame`.

## Running the script
On Mac or Linux, open a terminal in the script's folder and type 
```bash
$> python ./universe.py
```

On Windows, hold down <kbd>Shift</kbd> and right-click in the script's folder. Choose ""Open Command Window Here"". Type:
```cmd
C:\Users\...\inflation-simulation> python universe.py
```

# Some warnings:
The units are arbitrary at the moment. A switch to Planck units will be coming in the near future.

We are not solving the full FRW equations here, especially not when switching from inflation to radiation domination.
If we solved the full equations of motion, we wouldn't be able to stay in inflation arbitrarily long.
You might notice some irregularites if you end inflation before a(t)=10 or so (like light going backwards).
This is an artefact of the approximations we are using and isn't physical. 
If anyone has an easy fix, feel free to message or submit a pull request.

The music is Hybrid Song from TeleportProkg.
"
71,tonybutt/cosmic-inflation,,"# inflation
"
72,apontzen/inflation,JavaScript,
73,Ko4ka-Beershire-Co/Inflation-project,Python,"# The Website:

https://beershire.ru/inflation-monitor/

# TO DO:

1) Fix str(date) bug - LOL not a bug, but a feature
2) Create Heroku Container

# Inflation-project

Private gspread for data-processing 
https://docs.google.com/spreadsheets/d/1cqXBxle2kR41QkGOjTdIVudozedBGLsjHUXtaQAKjF8/edit?usp=sharing

Dev console login
https://console.developers.google.com/

	Sber(2Q2019)	Ko4ka (3Q2021)
Housing	0	0.3
Food stamples	0.389	0.2
Utilities	0.152	0
Apparel	0.097	0.1
Healthcare	0.066	0.05
Debt interest	0.066	0.2
Leisure	0	0.05
General items	0.057	0
Vacation	0.048	0.1

// Parcers

-Housing

--Price for m^2 (Moscow)
--Av. Rent for 2 BR App
---Utilities //sub-class
----Water
----Electricity
--Mortgage rate

-Food

--Grocery
---Milk
---Nutella
--Fresh
---Tomatoes
---Asparagus
--Meats
---Beef
---Chicken
--Household
---Ariel washing powder
---Sponges
--Alchohol
--Toiletries
---Shampoo
---Perfume

-Apparel

--Winter
--Summer
--Shoes

-Healthcare

--Panadol
--Aspirin

-Interest rate

-General items

--iPhone
--Fuel
--Hundai Solaris New
--Ikea GESTALTA

-Vacation

--Travel tickets
--USD

# Features
->Check if the date matches (make sure it is once per day)
->Parcer status Gsheets and Python
->Transport from private to sheet to public Dashboard

"
74,phantomachine/SOECB-MARKOV,Matlab,"# SOECB-Markov

Paper and source codes for **Uncovering the Hit List for Small Inflation Targeters**: *A Bayesian Structural Analysis*, by Timothy Kam, Kirdan Lees and Philip Liu (2009), in *Journal of Money, Credit and Banking*, Vol. 41, No. 4: 583-618.

Code was written in MATLAB and relies of some functions in the MATLAB Statistics Toolbox.
"
75,rioclaro/inflation,R,"# inflation
Vamos estudar a série histórica do IPCA e montar modelos de previsão
"
76,fairmat/InflationModels,,"InflationModels
===============

Plugins Implementing Inflation Models"
77,BenCasselman/inflation,R,"# inflation
This repo contains data and code for working with data from the Consumer Price Index, including relative-importance values for all months back to Dec. 2016, and the code used to calculate it.
There are three files here:
- `cpi_weights.csv` contains the weights for both CPI-U (`wt`) and CPI-W(`w_wt`) for all available item codes by month.
- `cpi_weights.R` contains the code to calculate and extract those weights.
- `cpi_functions.R` contains miscellaneous functions for working with the CPI data. These are really for my own use, and the code is unannotated, so probably won't be of general interest."
78,NumCosmo/NumCosmo,C,README.md
79,fenixnake/inflation,,"# inflation
# 撸钱钱原理图

![](https://raw.githubusercontent.com/fenixnake/inflation/master/inflation.png)

### 资本主义货币之诡谲循环来源于定义的叠加变换和""交易工具""的'单纯视角'的幻象。  
e.g. RMB35年通胀约900倍。  
"
80,arno-id/inflation-calc,JavaScript," # inflation-calc
fun project with weighted inflation

# Adatforrás változtatás

Jelenleg a projekt a főmappából tölti be a következő fájlt: 	***3_6_2h.csv	***
Pontosvesszővel tagolt CSV ami 4 oszlopot vár:
1. **Kód**

Szám. 1,2 vagy 3 hosszú. A KSH által használt azonosító kódok. Automatikusan elrendezi a kalkulátor a szülő-gyerek kapcsolatot. 

2. **Név**

A tétel megnevezése

3. **Súly**

Százalékos súlyérték (amennyiben az összes súly összege 100 a CSV-ben)

4. **Infláció érték**

Tizedesponttal elválasztott százalékos érték
"
81,unclearness/inflation_py,Python,"# inflation_py 
An implementation of inflation from silhouettes in python.
Generate a height/depth map and a mesh from a single silhouette.
No machine learning is included.

# Run
`python inflation.py` generates sample outputs.

OpenCV, numpy and scipy are required as dependencies.

# Sample inputs and outputs
- Input
  - A single silhouette (mask) image
- Output
  - a depth/height map (colorized) and a mesh in .ply format (its shaded rendering is shown in the table below)

|Input silhouettes|<img src=""./data/circle.png"" width=""128"">|<img src=""./data/square.png"" width=""128"">|<img src=""./data/A.png"" width=""128"">|<img src=""./data/hiragana.png"" width=""128"">|<img src=""./data/character.png"" height=""128"">|
|---|:---:|:---:|:---:|:---:|:---:|
|Distance Transform|<img src=""./data/visualized_depth/circle_dist.jpg"" width=""128""> <img src=""./data/screenshots/circle_dist.jpg"" width=""128"">|<img src=""./data/visualized_depth/square_dist.jpg"" width=""128""> <img src=""./data/screenshots/square_dist.jpg"" width=""128"">| <img src=""./data/visualized_depth/A_dist.jpg"" width=""128""> <img src=""./data/screenshots/A_dist.jpg"" width=""128"">|<img src=""./data/visualized_depth/hiragana_dist.jpg"" width=""128""> <img src=""./data/screenshots/hiragana_dist.jpg"" width=""128"">|<img src=""./data/visualized_depth/character_dist.jpg"" width=""128""> <img src=""./data/screenshots/character_dist.jpg"" width=""128"">|
|Distance Transform + Activation (tanh)|<img src=""./data/visualized_depth/circle_dist_tanh.jpg"" width=""128""> <img src=""./data/screenshots/circle_dist_tanh.jpg"" width=""128"">|<img src=""./data/visualized_depth/square_dist_tanh.jpg"" width=""128""> <img src=""./data/screenshots/square_dist_tanh.jpg"" width=""128"">|<img src=""./data/visualized_depth/A_dist_tanh.jpg"" width=""128""> <img src=""./data/screenshots/A_dist_tanh.jpg"" width=""128"">|<img src=""./data/visualized_depth/hiragana_dist_tanh.jpg"" width=""128""> <img src=""./data/screenshots/hiragana_dist_tanh.jpg"" width=""128"">|<img src=""./data/visualized_depth/character_dist_tanh.jpg"" width=""128""> <img src=""./data/screenshots/character_dist_tanh.jpg"" width=""128"">|
|Baran's method|<img src=""./data/visualized_depth/circle_baran.jpg"" width=""128""> <img src=""./data/screenshots/circle_baran.jpg"" width=""128"">|<img src=""./data/visualized_depth/square_baran.jpg"" width=""128""> <img src=""./data/screenshots/square_baran.jpg"" width=""128"">|<img src=""./data/visualized_depth/A_baran.jpg"" width=""128"">  <img src=""./data/screenshots/A_baran.jpg"" width=""128"">|<img src=""./data/visualized_depth/hiragana_baran.jpg"" width=""128""> <img src=""./data/screenshots/hiragana_baran.jpg"" width=""128"">|<img src=""./data/visualized_depth/character_baran.jpg"" width=""128""> <img src=""./data/screenshots/character_baran.jpg"" width=""128"">|

# Algorithm
## Distance Transform (+ Activation)
Based on distance transform that computes distance from silhouette edges to pixels in the silhouette.
This method tends to cause steepy surfaces.
Additioanlly, you can set activation function to operate steepness but it is difficult to control.

## Baran's method
Based on Poisson's equation.
Implementation of the following paper:
""Notes on Inflating Curves"" [Baran and Lehtinen 2009](http://alecjacobson.com/weblog/media/notes-on-inflating-curves-2009-baran.pdf).
This method generates smooth surfaces considering gradient space.
Especially, a circle silhouette becomes a hemisphere mesh.
"
82,mauep2025/Forecast-and-assessment-of-General-Inflation-,MATLAB,
83,Shivamdhar/CSE-472-BotInflationOnYoutube,Python,"*Detecting bot-inflated videos on Youtube*

Youtube has emerged as one of the social media platforms for creators to publish content and monetize it through their increasing audience and viewership. In the race of coming in limelight, few creators try to improve the statistics of published content like number of views, subscribers, likes, etc. through automated scripts or bots. This is a concern for two reasons - a) inflated views lead to disparity among the genuine creators, gaining popularity via organic traffic and others resorting to bot inflation for fame, thus abusing the remuneration mechanism b) ad impressions which work only in case of user interactions like clicks, get wasted due to the activity of view bots, taking a toll on the youtube advertisers. Hence, it is important to solutionize the problem by analyzing the social media interactions and penalize the fake popularity seekers for violating the terms of service. This would also help businesses to get finer insights from their consumer base and not get misled by popularity of certain content.  

The project can be run on any OS environment having python 3.5.+ installed. 
Following libraries need to be installed before hand:

requests==2.18.4

ujson==1.35

ijson==2.3

jsonschema==2.6.0

glob2==0.6

cloudpickle==0.5.3

pickleshare==0.7.4

numpy==1.15.4

scipy==1.1.0

nltk==3.3

pandas==0.23.0

Following is the directory structure:

- dataset: Consists of the following directories

		- comments 
			- processed : contains processsed comments scraped in the form of tab separated files (.tsv files)
		
        - dumped_objects
			
            - history.p and model.p : pickle files generated by our implementation of MaxEnt Classifier during training phase
		
        - statistical_analyzer 
			
            - view_bot.csv : contains statistical properties for the videos in the dataset and forms the input for the statistical analyzer
		
        - tweettube_dataset
			
            - 1.json, 2.json, 3.json, 4.json : contains the raw data scraped form TweetTube

		- dump.sql : contains database screenshot containing videos and related statistics

- code: Consists of the following files 
		
        - API_KEY.txt : contains base64 encoded YouTube API key
		
        - MaxEnt.py : implementation of MaxEnt Classifier
		
        - bot_users.py : contains a list of probable bot users on YouTube based on the comments
		
        - constants.py : contains the constants used across the code base eg: file paths and external APIs
		
        - data_scraper.py : contains modules for scraping video statistics and comments and storing it in MySQL DB and .tsv respectively
		
        - engine.py : wrapper class on MaxEnt Classifier which helps in training the model and classifying the test set
		
        - feature_functions.py : contains all the patterns extracted based on bot behaviour observed while parsing the comments dataset
		
        - pre_processor.py : contains code for reducing noise in the comments dataset by making use of punctuation removal and lemmatization techniques
		
        - statistical_analyzer.py : contains logic for identifying view bot inflation based on correlation between view count and metrics like sum of 								likes and dislikes


How to run and test the model:

	(Use the following steps on the pre-processed data)

	1. Data Scraping : python data_scraper.py

	2. View Bot Identification : python statistical_analyzer.py 

	3. Comment Bot Identification 
		
            - Training Phase : python engine.py train
		
            - Testing Phase : python engine.py test"
84,rbturnbull/ausdex,Python,"# ausdex

![pipline](https://github.com/rbturnbull/ausdex/actions/workflows/pipeline.yml/badge.svg)
[<img src=""https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/rbturnbull/49262550cc8b0fb671d46df58de213d4/raw/coverage-badge.json"">](<https://rbturnbull.github.io/ausdex/coverage/>)
[<img src=""https://github.com/rbturnbull/ausdex/actions/workflows/docs.yml/badge.svg"">](<https://rbturnbull.github.io/ausdex/>)
[<img src=""https://img.shields.io/badge/code%20style-black-000000.svg"">](<https://github.com/psf/black>)
[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg)](code_of_conduct.md)
[![status](https://joss.theoj.org/papers/817baa72d2b17b535af8f421a43404b0/status.svg)](https://joss.theoj.org/papers/817baa72d2b17b535af8f421a43404b0)

A Python package for adjusting Australian dollars for inflation.

The Australian Bureau of Statistics (ABS) publishes the Consumer Price Index (CPI) 
for Australia and its capital cities which allows for adjustment of the value of Australian dollars for inflation. 
`ausdex` makes these data available with an inflation calculator in a convenient Python package with simple programmatic and command-line interfaces.

ABS datasets are generally housed in Microsoft Excel spreadsheets linked from the data catalogue. Working with these spreadsheets directly is cumbersome. The `ausdex` package provides an Application Programming Interface (API) for Australian CPI data that seemlessly interoperates with `NumPy` and `pandas`. It makes working with Australian dollars in Python convenient in a similar manner to the [cpi](https://github.com/palewire/cpi) Python package which adjusts US dollars for inflation.

The package is documented here: https://rbturnbull.github.io/ausdex

## Installation

You can install `ausdex` from the Python Package Index (PyPI):

```
pip install ausdex
```

`ausdex` requires Python 3.8 or higher.

To install ausdex for development, see the documentation for [contributing](https://rbturnbull.github.io/ausdex/contributing.html).

## Command Line Usage

Adjust single values using the command line interface:
```
ausdex inflation VALUE ORIGINAL_DATE
```
This adjust the value from the original date to the equivalent for the most recent quarter.

For example, to adjust $26 from July 21, 1991 to the latest quarter run:
```
$ ausdex inflation 26 ""July 21 1991"" 
$ 52.35
```

To choose a different date for evaluation use the `--evaluation-date` option. This adjusts the value to dollars in the quarter corresponding to that date. For example, this command adjusts $26 from July 1991 to dollars in September 1999:
```
$ ausdex inflation 26 ""July 21 1991""  --evaluation-date ""Sep 1999""
$ 30.27
```

By default, `ausdex` uses the CPI for Australia in general but you can calculate the inflation for specific capital cities with the `--location` argument:
```
$ ausdex inflation 26 ""July 21 1991""  --evaluation-date ""Sep 1999"" --location sydney
$ 30.59
```

Location options are: 'Australia', 'Sydney', 'Melbourne', 'Brisbane', 'Adelaide', 'Perth', 'Hobart', 'Darwin', and 'Canberra'.


## Module Usage

```
>>> import ausdex
>>> ausdex.calc_inflation(26, ""July 21 1991"")
52.35254237288135
>>> ausdex.calc_inflation(26, ""July 21 1991"", evaluation_date=""Sep 1999"")
30.27457627118644
>>> ausdex.calc_inflation(26, ""July 21 1991"", evaluation_date=""Sep 1999"", location=""sydney"")
30.59083191850594
```
The dates can be as strings or Python datetime objects.

The values, the dates and the evaluation dates can be vectors by using NumPy arrays or Pandas Series. e.g.
```
>>> df = pd.DataFrame(data=[ [26, ""July 21 1991""],[25,""Oct 1989""]], columns=[""value"",""date""] )
>>> df['adjusted'] = ausdex.calc_inflation(df.value, df.date)
>>> df
   value          date   adjusted
0     26  July 21 1991  52.352542
1     25      Oct 1989  54.797048
```

## Dataset and Validation

The Consumer Price Index dataset is taken from the [Australian Bureau of Statistics](https://www.abs.gov.au/statistics/economy/price-indexes-and-inflation/consumer-price-index-australia). It uses the nation-wide CPI value. The validation examples in the tests are taken from the [Australian Reserve Bank's inflation calculator](https://www.rba.gov.au/calculator/). This will automatically update each quarter as the new datasets are released.

The CPI data goes back to 1948. Using dates before this will result in a NaN.

To access the raw CPI data as a pandas DataFrame, use this function:
```
df = ausdex.latest_cpi_df()
```

The Excel spreadsheet for this is stored in the user's cache directory. 
If you wish to download this Excel file to a specific location, use this function:
```
ausdex.files.cached_download_cpi(local_path=""cpi-data.xlsx"")
```

For more infomation about the methods to download data from the ABS, see the [API specification](https://rbturnbull.github.io/ausdex/reference.html).

## Contributing

See the guidelines for contributing and our code of conduct in the [documentation](https://rbturnbull.github.io/ausdex/contributing.html).

## License and Disclaimer

`ausdex` is released under the Apache 2.0 license.

While every effort has been made by the authors of this package to ensure that the data and calculations used to produce the results are accurate, as is stated in the license, we accept no liability or responsibility for the accuracy or completeness of the calculations. 
We recommend that users exercise their own care and judgment with respect to the use of this package.
 
## Credits

`ausdex` was written by [Dr Robert Turnbull](https://findanexpert.unimelb.edu.au/profile/877006-robert-turnbull) and [Dr Jonathan Garber](https://findanexpert.unimelb.edu.au/profile/787135-jonathan-garber) from the [Melbourne Data Analytics Platform](https://mdap.unimelb.edu.au/).

Please cite from the article when it is released. Details to come soon.

## Acknowledgements

This project came about through a research collaboration with [Dr Vidal Paton-Cole](https://findanexpert.unimelb.edu.au/profile/234417-vidal-paton-cole) and [Prof Robert Crawford](https://findanexpert.unimelb.edu.au/profile/174016-robert-crawford). We acknowledge the support of our colleagues at the Melbourne Data Analytics Platform: [Dr Aleksandra Michalewicz](https://findanexpert.unimelb.edu.au/profile/27349-aleks-michalewicz) and [Dr Emily Fitzgerald](https://findanexpert.unimelb.edu.au/profile/196181-emily-fitzgerald).
"
85,bricas/dbix-class-datetime-epoch,Perl,
86,michaelkirker/Sectoral-Factor-Model-Code,Matlab,"# Sectoral-Factor-Model
Model code for the model described the paper ""What Drives Core Inflation? A Dynamic Factor Analysis of Tradable and Nontradable Prices"". RBNZ Working Paper DP2010/13

Rather than include all the code to handle both New Zealand and Australian data, and all the different graphs and tables found in the Working Paper, I have opted to simplify down the code in this repository to the code required to estimate the model, compute core inflation, and produce a few of the key graphs. This should hopefully be more accessible to the user.

## Disclaimer(s) ##

Please note that the model code presented here reflects an updated version of that discussed in the RBNZ Working paper DP2010/13. A number of small corrections were made to the code.

While the structure of the model in the code is the same as that used by the RBNZ for their Sectoral Factor Model, the code here does not represent the exact same code being used by the RBNZ, and so results produced by this code are likely to differ from those published by the RBNZ. 


## Contact details ##

Created by: Michael Kirker

Email: <mkirker@uchicago.edu>

Website: [http://michaelkirker.net](http://michaelkirker.net ""http://michaelkirker.net"")

Git repository: [https://github.com/michaelkirker/Sectoral-Factor-Model-Code](""https://github.com/michaelkirker/Sectoral-Factor-Model-Code"")


## Repository structure ##

* /code/
	* Folder containing functions required to run the model.
* /documentation/ 
	* Collection of documentation providing more background on the code
* /input/
	* Folder containing the data input required to estimate and run the model
* /output/ 
	* Folder containing all the finalized output of the model.
* /temp/ 
	* Folder containing temporary files created by the model.
* batch.m
	* Batch file that executes the model




## How to use this code ##

The entire model can be run using the `batch.m` file. Each part of this batch file can be run independently if you have already run the previous sections. This is useful if you want to make changes to the code the analyses the output without having to re-estimate the model. Simply comment out the sections you do not wish to run.


The user can change settings related to the data etc inside of `batch.m`. Changes to the model structure (i.e. number of lags) can be made within the file `DFMcore.m`. User input should not be required anywhere else.

## Version History ##

* Current version (0.1)
	* This version of the model corrects a couple of coding typos in the working paper version of the model. These changes are yet to be fully documented here yet, however I will try to document these changes at some point in the future. The only noticeable difference is that the core inflation measure produced by this code is smoother than that in the Working Paper version (which had a typo when updating a variance term in the model).
	* To simplify things for the user, not all output from the paper is produced.
	* The model file (`DFMcore.m`) still needs cleaning up and further commenting. See the documentation folder for more information on the mathematical steps being taken in estimating the model.




## To-do ##

The following is a list of forthcoming changes

* Improve documentation within the code
	* Specific focus on detailing all the elements within each output structure
	* Add in code for all the tables and graphs in the paper.
	"
87,pgxcentre/lambda,Python,"# A python script to compute genomic inflation factor

`compute_lambda.py` is small script to compute lambda (the genomic inflation
factor) from a GWAS result.


## Dependencies

The tool requires a standard [Python](http://python.org/) installation (version
2 or 3) with the following packages:

1. [pandas](http://pandas.pydata.org/) version 0.17 or latest

The tool has been tested on *Linux* only, but should also work on both Mac OSX
and Windows.


## Usage

Using either `python` or `python3`:

```console
$ python compute_lambda.py --help
usage: compute_lambda.py [-h] [-v] -i FILE [FILE ...] [-d DELIM] [-w] -f NAME
                         [--snp-field NAME] [--chi2] [--p-value] [--one-sided]
                         [-e FILE]

Compute inflation factor (lambda) in GWAS results.

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show program's version number and exit

INPUT FILES:
  -i FILE [FILE ...], --input FILE [FILE ...]
                        The list of files containing GWAS results.
  -d DELIM, --delim DELIM
                        The field delimiter (default is a tabulation).
  -w, --whitespace      The file is delimited by white spaces (e.g. Plink
                        results).
  -f NAME, --field NAME
                        The name of the field containing the statistics.
  --snp-field NAME      The name of the field containing the SNP name.

GENERAL OPTIONS:
  --chi2                Statistics were computed using a chi-squared
                        distribution.
  --p-value, -p         Flag to use the p-value instead of the statistic. This
                        assumes a standard normal distribution for the test
                        statistic.
  --one-sided           Flag for one-sided tests (when using p-values to
                        compute the inflation factor)

SUBSET OPTIONS:
  -e FILE, --extract FILE
                        A file containing markers to extract for the analysis
                        (only one marker per line).
```
"
88,fqroldan/Conquest,Jupyter Notebook,"# Conquest
Jupyter Notebooks replication of The Conquest of American Inflation
"
89,Lumenaut-Network/tools,Java,"# Status
This project is **>>> not actively developed <<<** anymore since the inflation mechanism within stellar has been disabled.

# Tools
This repository contains various tools that help in the management process of a Stellar Inflation Pool.

# Manager
The manager folder contains a JavaFX application to manually manage fetching current voters, balances and inflation payment via direct signing of the transaction by a single party. This tool is meant to be a temporary solution for the Lumenaut pool until a secure and automated process is in place, but can be used by single inflation pool owners that do not require multisignature handling to decentralize inflation pool responsibilities for what concerns inflation payouts.

* Setup guide: https://github.com/Lumenaut-Network/tools/tree/master/manager
* User's manual: https://github.com/Lumenaut-Network/tools/wiki/Pool-Manager

# Scripts
* **Stellar Address Suffix Finder** sasf.py helps in searching of vanity addresses.
* **Testnet Inflation** is a collection of scripts to setup an inflation pool in the horizon test network.
"
90,grenok/Thesis,R,"# Thesis
"
91,DecenterApps/ResistanceProtocol,JavaScript,"# ResistanceProtocol
Inflation Resistant Stablecoin

UML Diagram:
https://app.diagrams.net/#G1ESvZRNm7P7Lv8m95BMcQB4rjX2j_kAPI

Website:
https://resistanceprotocol.web.app/
"
92,leeclout/tcpnoise,Shell,"# tcpnoise
upstream metadata retention log inflation engine

Lee Clout 2016
Licensed under GNU GENERAL PUBLIC LICENSE Version 3

Designed to make pseudo-random, meaningful connections to all hosts on the internet.
Randomisation has been added to avoid multiple connections to the same network. A meaningful connection is understood as a TCP 3 way handshake.

In light of data retention laws passed in Australia forcing telecommunications providers to log a very ambiguously described ""metadata"" in association with your internet service; they describe it as capturing the outside of the envelope but not seeing inside. Though as you can imagine if you receive a lot of mail from the aids clinic then one can paint a pretty plain picture.

So as more or less a joke, not to mention a chance to play with some big numbers, I wrote this to randomly attempt TCP connections across the IPv4 internet, using netcat, it just sends an empty TCP SYN packet, followed by a ACK on successful, nothing special, hopefully not viewed as intrusive either.  All this means my data retention logs are going to be filled with so much noise and crap, though to be honest it probably doesn't even hide your meaningful traffic as it would present such a different pattern to say visiting google, but hey it's got some fun applications for research and easily built to be slow and noiseless to the remote end.

It works by breaking down the range of IP addresses (4 bytes) and the range of ports (2 bytes) and quite simply using some creatively arranged counters to avoid similar Autonomous Systems (or people who own huge amounts of addresses).  By cycling through these numbers it happily just goes along creating noise on your link to your provider (the capture point more or less), but by just sending empty packets and waiting for a response it hardly uses any bandwidth.

A dear friend Mr Rugge, highlighted the fun when using etherape with increased timings when running this script, you get a tapestry of connections flood your screen :)

Still very much under development. Enjoy.

Current build is attempting 5 connections per host, but these can be easily commented out by adding a # symbol as the first character of the relevant line that starts with nc.  The first nc connection uses the sequential port, the rest to TCP ports 23,80,22,123 but these commands can easily be changed to suit your needs.

The script logs connection into an individual host file, a text document named by the IP address, stored in a subdirectory of the script named tcpnoise/*
This method creates a lot of files within that folder, though I found it a better solution than piping everything to a single file and using logrotate or similar.  For example if you use the random port only and leave the program running long enough you will eventually hit the same machine on a different port, this subsequent hit will be appended to the same host file and help create a better profile.  I find it great when using grep against the folder to search for open or refused ports.


Happy for anyone's input, we would love to open the discussion about pushing any open connections found to a central database.
"
93,tylercreeves/PadPal,C++,"# PadPal

> Author: Tyler Reeves, AKA T-Rex ([@tylercreeves](https://github.com/tylercreeves))

<img src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Pad-Pal%20(front).jpg"" data-canonical-src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Pad-Pal%20(front).jpg"" width=""500"" height=""666.67"" />

**An untralight electric sleeping pad inflator solution**

The PadPal is a bare bones, simple electric sleeping pad inflation device. The goal of this project is to make a sleeping pad inflator that us UL folks would not shun away in flavor of sore jaw muscles, empty lungs, and light heads.

Below is a breakdown of the project as well as how you can make your own. 

If making your own seems like a hassel, you can also purchase them from me for $44.00 shipped to the lower 48 states (contact me for shipping rates elsewhere) by reaching out to me via reddit u/tylercreeves


## Design

The PadPal is designed to leverage consumer grade 3D printing technology and consumer accessible PCB manufactures like JLCPCB. It is composed of 5 parts.

>**Part:** 3D printed fan duct housing

**Qty:** 1

>**Part:** 3D printed sleeping pad valve adapter

**Qty:** 1

>**Part:** 6x15mm coreless DC motor with .8mm shaft and micro JST connector

**Qty:** 1

>**Part:** 31mm 4 blade propeller with .8mm press fit shaft hole.

**Qty:** 1

>**Part:** PadPal V3 PCB with SMD

**Qty:** 1

<img src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Pad-Pal%20(components).jpg"" data-canonical-src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Pad-Pal%20(components).jpg"" width=""500"" height=""666.67"" />


## 3D Printed Hardware

There are 2 user printed parts that compose the PadPals general body. Bellow are printing suggestions for each part.

>**Part:** PadPal_Duct_V3

**Material:** Polycarbonate

**Settings:** Use custom support structures to support the motor housing, bridges for the PCB housing, and chamerfered bridges from motor housing to inner fan duct. Here is a picture of the areas I added custom support enforcers. A brim may help prevent the Polycarbonate from warping.

<img src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Custom_Supports.JPG"" data-canonical-src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Custom_Supports.JPG"" width=""500"" height=""576"" />
<img src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Fan_Duct_Sliced.JPG"" data-canonical-src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Fan_Duct_Sliced.JPG"" width=""500"" height=""500"" />

>**Part:** PadPal_ThermarestWingLock_V3

**Material:** TPU

**Settings:** print with skinny end facing up, add a 2mm brim, no supports

<img src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Winglock_Adapter_Sliced.JPG"" data-canonical-src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Winglock_Adapter_Sliced.JPG"" width=""500"" height=""576"" />

## Code (Finite State Machine)

The PadPal utalizes an Attiny13ASU microcontroller that can be programmed to controlle the DC motor. I have programmed the MC with a finite state machine that works as follows. When you plug in the device, it waits 2 seconds before starting. After 2 seconds pass, it ramps up the fan to a specified speed. Once at specified speed it maintains that speed for a specified time. Once the specified time has ellapse, it will turn off the fan and enter sleep mode to avoid accidentally draining a forgetful hikers bacttery bank. To restart the PadPal, the user must unplug it and plug it in again.

## Making/Buying the Custom PCB

To get a custom motor controller PCB for this project, you have two options. One is to download the EDA GERBER files, BOM file, and source a manufactureur for the PCB as well as all the components. This board used SMD components and requires some decent skills in SMD soldering to pull off. It you go this route, there usually are minimum order quantities required for the PCB and components, so you may end up with a few extra boards.

<img src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Pad-Pal_PCB.JPG"" data-canonical-src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Pad-Pal_PCB.JPG"" width=""600"" height=""600"" />

To save some of you the time and complexity of making and programming the boards yourself, you can contact me via reddit at u/tylercreeves where I sell the assembled and programmed boards for $12.18 shipped to the lower 48 states (contact me for special shipping rates elsewhere).

## Programming the PCB

Assuming you have gone the route of making your own boards, here is how to program the PadPal PCB. You will need to make an ""Arduino as ISP"". For this I used an Arduino Uno board and purchased a perferate ""hat"" board to solder up programmer with pogopins. Here are picture of the Arduino uno, custom ""hat"", and the two together.

<img src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Hat%26Arduino.jpg"" data-canonical-src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Hat%26Arduino.jpg"" width=""666.67"" height=""500"" /> 
<img src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Ardiuno_as_ISP.jpg"" data-canonical-src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Ardiuno_as_ISP.jpg"" width=""500"" height=""666.67"" />

First you will need to download the Arduino IDE if you havent done so. Next you need to flash the ""Arduino as ISP"" example sketch into the Arduino You will use to program your PadPal. Now you need to download the MicroCore liberary into your Arduino IDE so you can program the PadPal. Please watch [this video](https://www.youtube.com/watch?v=G2nVVtmKgWI&list=LL&index=113) of an unrelated project on how to do so by Electronics BD.

## Arduino as ISP Programmer Pin-Out

Here is a picture of my setup and Pin-Out of the headers on my custom motor control boards. You might have to do some clever mix and matching between my picture and the linked video untill I put up a complete pin-out for the arduino-ISP programmer I made.

<img src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Header_PinOut.JPG"" data-canonical-src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Header_PinOut.JPG"" width=""1100"" height=""500"" />
<img src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/20220712_123211.jpg"" data-canonical-src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/20220712_123211.jpg"" width=""500"" height=""666.67"" />

**Bellow is an FSM Diagram to assist in understanding the code so one can modify it.**

Review the FSM diagram along side the included code to get a sense of what is going on in the code. 

<img src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Pad-Pal_FSM_Diagram.JPG"" data-canonical-src=""https://github.com/tylercreeves/PadPal/blob/main/Pictures/Pad-Pal_FSM_Diagram.JPG"" />

## Assembly/Finishing

After you purchase a board, or finish making, soldering, and programming your own, you are ready for assembly! I'm not even going to tell you how, its pretty simple once all the parts are infront of you your ready. I'd suggest do the motor first, followed by the fan blade, then plugin the motor to the PCB and insert the PCB to its housing. Its a tight fit so you may need to get glever with some soft contact tools to push it in all the way.
"
94,williamjameshandley/primordial,Python,"========================================
primordial: inflationary equation solver
========================================
:primordial: inflationary equation solver
:Author: Will Handley
:Version: 0.0.14
:Homepage: https://github.com/williamjameshandley/primordial
:Documentation: http://primordial.readthedocs.io/

.. image:: https://travis-ci.org/williamjameshandley/primordial.svg?branch=master
   :target: https://travis-ci.org/williamjameshandley/primordial
   :alt: Build Status
.. image:: https://codecov.io/gh/williamjameshandley/primordial/branch/master/graph/badge.svg
   :target: https://codecov.io/gh/williamjameshandley/primordial
   :alt: Test Coverage Status
.. image:: https://badge.fury.io/py/primordial.svg
   :target: https://badge.fury.io/py/primordial
   :alt: PyPi location
.. image:: https://readthedocs.org/projects/primordial/badge/?version=latest
   :target: https://primordial.readthedocs.io/en/latest/?badge=latest
   :alt: Documentation Status
.. image:: https://zenodo.org/badge/150298714.svg
   :target: https://zenodo.org/badge/latestdoi/150298714
   :alt: Permanent DOI for this release



Description
===========

``primordial`` is a python package for solving cosmological inflationary equations.

It is very much in beta stage, and currently being built for research purposes.


Example Usage
=============

Plot Background evolution
-------------------------
.. code:: python

    import numpy
    import matplotlib.pyplot as plt
    from primordial.solver import solve
    from primordial.equations.inflation_potentials import ChaoticPotential
    from primordial.equations.t.inflation import Equations, KD_initial_conditions
    from primordial.equations.events import Inflation, Collapse
    
    fig, ax = plt.subplots(3,sharex=True)
    for K in [-1, 0, +1]:
         m = 1
         V = ChaoticPotential(m)
         equations = Equations(K, V)
    
         events= [Inflation(equations),                    # Record inflation entry and exit 
                  Inflation(equations, -1, terminal=True), # Stop on inflation exit
                  Collapse(equations, terminal=True)]      # Stop if universe stops expanding
    
         N_p = -1.5
         phi_p = 23
         t_p = 1e-5
         ic = KD_initial_conditions(t_p, N_p, phi_p)
         t = numpy.logspace(-5,10,1e6)
    
         sol = solve(equations, ic, t_eval=t, events=events)
    
         ax[0].plot(sol.N(t),sol.phi(t))
         ax[0].set_ylabel(r'$\phi$')
    
         ax[1].plot(sol.N(t),sol.H(t))
         ax[1].set_yscale('log')
         ax[1].set_ylabel(r'$H$')
    
         ax[2].plot(sol.N(t),1/(sol.H(t)*numpy.exp(sol.N(t))))
         ax[2].set_yscale('log')
         ax[2].set_ylabel(r'$1/aH$')
         
    ax[-1].set_xlabel('$N$')

|image0|

Plot mode function evolution
----------------------------
.. code:: python

    import numpy
    import matplotlib.pyplot as plt
    from primordial.solver import solve
    from primordial.equations.inflation_potentials import ChaoticPotential
    from primordial.equations.t.mukhanov_sasaki import Equations, KD_initial_conditions
    from primordial.equations.events import Inflation, Collapse, ModeExit

    fig, axes = plt.subplots(3,sharex=True)
    for ax, K in zip(axes, [-1, 0, +1]):
        ax2 = ax.twinx()
        m = 1
        V = ChaoticPotential(m)
        k = 100
        equations = Equations(K, V, k)

        events= [
                Inflation(equations),                    # Record inflation entry and exit
                Collapse(equations, terminal=True),      # Stop if universe stops expanding
                ModeExit(equations, +1, terminal=True, value=1e1*k)   # Stop on mode exit
                ]


        N_p = -1.5
        phi_p = 23
        t_p = 1e-5
        ic = KD_initial_conditions(t_p, N_p, phi_p)
        t = numpy.logspace(-5,10,1e6)

        sol = solve(equations, ic, t_eval=t, events=events)

        N = sol.N(t)
        ax.plot(N,sol.R1(t), 'k-')
        ax2.plot(N,-numpy.log(sol.H(t))-N, 'b-')

        ax.set_ylabel('$\mathcal{R}$')
        ax2.set_ylabel('$-\log aH$')

        ax.text(0.9, 0.9, r'$K=%i$' % K, transform=ax.transAxes)

    axes[-1].set_xlabel('$N$')


|image1|


.. |image0| image:: https://raw.githubusercontent.com/williamjameshandley/primordial/master/figures/background.png
.. |image1| image:: https://raw.githubusercontent.com/williamjameshandley/primordial/master/figures/ms.png 

To do list
==========
Eventually would like to submit this to `JOSS <https://joss.theoj.org/>`_. Here are things to do before then:

Cosmology
---------
* Slow roll initial conditions
* add :math:`\eta` as independent variable
* add :math:`\phi` as independent variable

Code
----
* Documentation
* Tests
   * 100% coverage
   * interpolation
"
95,AntonGroos/EnKF-AI,Python,"# EnKF-AI
This repository contains Python 3 implementaitions of ensemble Kalman Filters with adaptive covariance inflation. Note that the programms in this repository were made to highlight catastrophic filter divergence, thus they are not very efficient and sometimes diliberatly inefficient in choice of some variables.

In order to run the programs contained in this repository you need at least Python 3.7 and following modules:

- numpy 
- tkinter
- matplotlib
- scipy
- pillow
- csv
- threading

There should be eight Python files, three .jpg files, and one .txt file. I will now list the Python files and their purpose:

equilibrium.py given a turbulence regime F the programm starts N = 100 long running simulations of the Lorenz 96 model to and calculates the equilibrium mean, the variance of each node, and the benchmark Error_A. 

experiments.py is a tiny programm, that will help you create a matrix of measurement errors in a shape that the algorithm in plotfilters.py will accept. You don't need to do this unless You want so experiment with higher system dimensions.

ENKF.py the basic ensemble Kalman filter. 
EnKF_CI.py the ensemble Kalman filter with constnant additive covariance inflation.
EnKF_AI.py the ensemble Kalman filter with adaptive covariance inflation.
EnKF_CAI.py the ensemble Kalman Filter with constant additve and adaptive covariance inflation.
These programms won't run on their own and contain only functions and numeric integration schemes.

tests.py this file contains the GUI. Executing it will open a window letting the user enter various variables and start long time simulations or individual trials displaying a plot and statistics. It uses the ENKF.py, EnKF_CI.py, EnKF_AI.py, and EnKF_CAI.py programms for the filter and should be very user friendly.

plotfilters.py uses the Error_matrix.txt to create long time simmulations of each filter, it uses a slightly modified version of the other filter programms (as a function in plotfilters.py) to allow the same measurement errors for all filter for a more accurate comparison. It is also the programm I used to create plots with two filters at the same time for my thesis (if you just want to see the plot set N=1 in the programm). 

More detailed explanations can be found in each of the programms.





"
96,AlexQuinlivan/Helium,Objective-C,"AlexQuinlivan/Helium
=========================
An Android-like view inflation and bucketed resource library for iOS. 


Note
----
This project is in its very infant stages (it doesn't yet do what it says) and is only intended (at this point) as a side project to explore a bit more of the Objective-C runtime before throwing it away completely. That being said, it does have certain goals [(see Goals)](#goals). 


Goals
-----
- A drop in view language that mimics similar attributes from android layouts, but, allows use without the need for subclassing library views or having the libraries views clutter up the view hierarchy
- Custom view attributes
- A view binder like [ButterKnife](https://github.com/JakeWharton/butterknife) so arbitrary objects can have views bound into them from a root view. (Similar to an IBOutlet)
- A collection of predefined layouts (linear/frame/relative/etc...) that can be assigned to any view
- Custom layouts
- A resources pattern that loads the correct view/string/dimension for the current device config


Installation
------------
Helium is (not yet) available through the [CocoaPods](http://cocoapods.org) repo. However, to install
it directly from this repo, simply add the following line to your Podfile:
```ruby
pod 'Helium', :git => 'https://github.com/AlexQuinlivan/Helium.git'
```


Usage
-----
The api for this is changing very rapidly, the [example project](https://github.com/AlexQuinlivan/Helium/tree/master/Example) should be using the most up-to-date version of where this library is heading.

todo: Actually make this relevant and up to date, using the best practices as well. (Maybe it wont even end up in the final README)

#### An example view xml file
```xml
<?xml version=""1.0"" encoding=""utf-8"" ?>
<UIView xmlns:helium=""http://quinlivan.co.nz/helium""
    helium:id=""example_id""
    helium:layout_width=""match_parent""
    helium:layout_height=""match_parent""
    helium:layout=""@layout/frame""
    background_color=""#F00"">
    <UIView
        helium:layout_width=""200""
        helium:layout_height=""200""
        helium:layout_gravity=""center_vertical|right""
        background_color=""#ABCDEF"" />
</UIView>
```

#### An example view controller implementation
```objc
@interface ABCViewController : HLMViewController
@property (nonatomic, weak) UIView *example;
@end

@implementation ABCViewController
BIND_VIEW_OPTIONAL(example, example_id)

-(NSString *) layoutResource {
    return @""@view/example_view"";
}

@end
```


Similar projects
----------------
[iDroidLayout](https://github.com/tomquist/iDroidLayout) - https://github.com/tomquist/iDroidLayout


License
-------

    Copyright 2015 Alex Quinlivan
    
    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    
"
97,ouro-official/contracts,Solidity,"OURO 
===
Ouro aims to create an inflation-proof store of value system on BSC, featuring Peer-to-Pool asset swaps. In essence, the project derives fiat inflations manifested in the growth of the value of crypto assets and migrates them onto OURO, making it inflation-proof against the USD.

Binance Smart Chain Mainnet Deployment:

* OURO BEP20 Token: https://bscscan.com/token/0x0a4fc79921f960a4264717fefee518e088173a79
* OGS BEP20 Token: https://bscscan.com/token/0x416947e6Fc78F158fd9B775fA846B72d768879c2
* OURO Reserve: https://bscscan.com/address/0x8739aBC0be4f271A5f4faC825BebA798Ee03f0CA#code
* OURO Proxy: https://bscscan.com/address/0xEBc85Adf95498E53529b1c43e16E2D46e06d9E0e#code

OURO Proxy
===
Before GMT: Jan 30, 2023, AM 3:26, or unix timestamp: 1675049203, minting OURO can only be done via proxy contract, the interface of Proxy is just the same as OURO Reserve.


OURO RESERVE API
===
You can build your own smart contracts to interact with *OURO Reserve* with your own strategy.

## Terminology
* *OURO Reserve*: OURO Reserve is the only authoritative contract to mint *OURO* stable coin, OURO Reserve has the right to lend the assets it holds to earn risk-free yields. Anyone has the right to deposit assets into *OURO Reserve* to mint *OURO* at any time, and burn *OURO* to get back assets conversely.
* *OURO*: The stable coin *OURO Reserve* issues, initially 1:1 pegged to USD, appreciate by 3% max each month.
* *OGS*: The governance token of *OURO Reserve*, if profits has made in *OURO Reserve*, *OGS* holders shares the revenue from *OGS* price going up. Also, critical parameter changes of *OURO Reserve* can only be executed via DAO operated with *OGS* token.

## API

### getCollateral
Get collateral information which *OURO Reserve* supports

```solidity
function getCollateral(address token) external view returns (
        address vTokenAddress,
        uint256 assetUnit,
        uint256 lastPrice,
        AggregatorV3Interface priceFeed
);
```

Returns: detailed collateral information which *OURO Reserve* supports, including:
1. `vTokenAddress`: Venus VToken address for lending.
2. `assetUnit`: The amount for one unit of asset, eg: 1 BNB = 1e18.
3. `lastPrice`: Records the latest price during last `rebase()` operation.
4. `priceFeed`: The Chainlink price oracle for this asset.

### getAssetBalance
Get total collateral balance in *OURO Reserve*

```solidity
function getAssetBalance(address token) external view returns(uint256);
```
Parameters:

1. `token`: BEP20 asset to check, for BNB, use [WBNB](https://bscscan.com/token/0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c) address instead.

Returns: the amount of assets in *OURO Reserve*

### getPrice
Get *OURO* price in USD

```solidity
function getPrice() public view returns(uint256);
```

Returns: current *OURO* price in USD, *OURO Reserve* always keeps the price 1:1 pegged.

### getAssetsIn
Get the amount of assets required to mint given amount of *OURO*.

```solidity
function getAssetsIn(uint256 amountOURO, address token) external view returns(uint256);
```
Parameters:

1. `amountOURO`: amount of OURO expected to mint.
2. `token`: BEP20 token to swap in, for BNB, use [WBNB](https://bscscan.com/token/0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c) address instead.

Returns: amount of assets required.

### getOuroIn
Get the amount of *OURO* required to swap given amount of assets out.

```solidity
function getOuroIn(uint256 amount, address token) external view returns(uint256);
```

Parameters:

1. `amount`: amount of assets expected to swap out.
2. `token`: BEP20 token to receive, for BNB, use [WBNB](https://bscscan.com/token/0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c) address instead.

Returns: *OURO* amount required to burn.

### deposit
To mint *OURO* by depositing assets.

```solidity
function deposit(address token, uint256 amountAsset, uint256 minAmountOuro) external payable returns (uint256 OUROMinted);
```
*OURO*s are minted via this function only, users deposit assets to mint equivalent *OURO* based on asset's **realtime price** from Chainlink oracle;

In order to mint new *OURO*, you need to `approve()` your asset token to *OURO Reserve* contract first.

Prices may change between the time of query and the time of transaction confirmation, 
`minAmountOuro` is to limit the minimum amount of *OURO* willing to receive in `deposit()` transaction.

If you want to mint *OURO* at realtime price of the asset, simply set 0 to `minAmountOuro`.

Parameters:

1. `token`: BEP20 token to swap into reserve, for BNB, use [WBNB](https://bscscan.com/token/0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c) address instead.
2. `amountAsset`: amount of assets to swap in(this parameter is omitted for BNB deposit).
3. `minAmountOuro`: minimum amount of *OURO* willing to receive.

Returns: the amount of *OURO* minted.

Transaction reverts on error.

### withdraw
To withdraw assets by burning *OURO*

```solidity
function withdraw(address token, uint256 amountAsset, uint256 maxAmountOuro) external returns(uint256 OUROTaken);
```
Withdrawing assets is accompanied by burning equivalent value of *OURO* token.

In order to swap back your *OURO* for *OURO Reserve* to burn, you need to `approve()` your *OURO* token to *OURO Reserve* contract first, 
the *OURO Reserve* contract will be able to transfer *OURO* token from your account and returns equivalent(realtime price) assets back to you.

Prices may change between the time of query and the time of transaction confirmation, 
`maxAmountOuro` is to limit the maximum amount of *OURO* willing to burn in `withdraw()` transaction.

If you want to get back assets at realtime price, simply set *MAX_UINT256* to `maxAmountOuro`.

Parameters:

1. `token`: BEP20 token to swap out, for BNB, use [WBNB](https://bscscan.com/token/0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c) address instead.
2. `amountAsset`: amount of assets to swap out.
3. `maxAmountOuro`: maximum amount of *OURO* willing to burn.

Returns: the amount of *OURO* transfered out from your account.

Transaction reverts on error. 

Note: If *OURO Reserve* has insufficient collateral to return, it will transfer the maximum possible assets back.

PS. `uint256 MAX_UINT256 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff`
"
98,amaldevp/DelaunayInflation,Processing,"<img src=""./samples.png"">

################## Implementation of: ##################

Delaunay Inflation algorithm for 2D to 3D conversion introduced in:


Paper Title:- A digital assistant for shading paper sketches

Authors:- Amal Dev Parakkat, Hari Hara Gowtham, Sarang Joshi, Ramanathan Muthuganapathy

Published in:- Springer Visual Computing for Industry, Biomedicine, and Art 2020 (https://doi.org/10.1186/s42492-020-00049-7)

                                      and 

Paper Title:- Sketch and Shade: An interactive assistant for sketching and shading

Authors:- Amal Dev Parakkat, Sarang Anil Joshi, Uday Bondi Pundarikaksha, Ramanathan Muthuganapathy

Published in:- Expressive Symposium 2017 (http://diglib.eg.org/handle/10.2312/npar2017a16)



Operating system recommended:- Ubuntu 14.04 or newer/ macOS Sierra or higher

This program is a research prototype, and may contain bugs and flaws.

######### Contains: #########

Processing code for Delaunay inflation (Edit the input filename and run it, that is all :-) ).

A sample input and output of the program.

##################### Permission for usage: #####################

The code is purely for academic and non-commercial usage. Please make sure you cite our work, if the code and/or inputs are used.

This program is a research prototype and may contain bugs and flaws. Also, please note that it can be written in more optimized way.

##################### For further enquires: #####################

Contact: Amal Dev Parakkat (iitg.ac.in/amaldevp)

     E-mail: adp(dot)upasana(at)gmail.com
"
99,letsgoexploring/sargent-phillips-curve,Jupyter Notebook,"# sargentPhillipsCurve
Programs for replicating Figure 1.5 from ""The Conquest of American Inflation"" by Thomas Sargent.
"
100,malkawenedal/Impact-on-Inflation-due-to-Covid-for-US-Canada,Jupyter Notebook,"# Impact on Inflation due to Covid for US & Canada
# Members: Amandeep Kaur, Hira Binth Naseer , Nedal Mahanweh , Matthew Phan
# Fintech Bootcamp @ UFT

## Message 
Define the core message or hypothesis of the project.
The purpose of this project is to determine and analyze Covid 19 statistics and find correlation with the inflation of
the headline consumer index for US and Canada 
Quantitative analysis methods from Python and Pandas shall be in use for assessing various data sets regarding different Canada and the US with the Headline Consumer index of each country. 

## Requirements
The purpose of this project is to demonstrate data exploration, cleanup , data analysis based on certain questions,
and to engage in visualization using the libraries: PyViz, Panel, PlotExpress, and Hvplot. An additional library is also required
and we chose the library Pygal for additional visualization (bar charts)

Each question & Answer

## Approach
The coding actions include reading and cleaning csv data, visualization, plotting using hvplot, seaborn, plotly, panel, pyviz and pygal
Our team gathered covid cases easily from (https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data9)
We had covid info from World Bank
Our US information was collected into a CSV file and cleaned (https://www.rateinflation.com/inflation-rate/usa-historical-inflation-rate/)
We noticed that there was lacking 2022 data and some missing 2021 data, so we decided to not do any 2022 analysis
fill in 2021 data from another source. First was to clean the covid cases csv file, and collapse / aggregate Canada and US 
by monthly for analysis. Then Inflation rates for 2021 were cleaned by removing the years before 2019. 
We used help from this source : https://www.pluralsight.com/guides/building-visualizations-with-pygal 

The refined and constructed information shall yield the average covid cases per month, rolling standard standard deviations, averages
and a mean.
 
   Questions: 
   Is there a correlation between rise in covid cases and the headline consumer index for the US and Canada?
   (heatmap, parrallel coordinates, twin plot, plotly)   
   It has been observed that the Covid cases in US have more effect on the US Shelter inflation variable in comparison to covid cases in 
   Canada. Heat maps and these were chosen as a more deteremined visualization of showing correlation between specific shelters
   that have inflated during covid times
   
   Is there correlation between US and Canada inflation?.
   There is a direct correlation between inflation and Covid cases. A spike is observed in Q4 
   of 2020 following to Q1 of 2021 (this may be representing the second WAVE OF Covid).
   During our data exploration where we used the consumer headline index of inflation in general, there was correlation but not as strong
   with correlation between us and canada 

   What is the average covid cases per month for USA and Canada?
   Even though the population of US is exponentially larger than Canada, the average cases in both countries have raised at almost an equivalent rate as 
   observed by the line graphs 

   What is the STD of each data set? What will it look like plotted? Can these be plotted in a proper scale?
   the standard deviation chart is not properly scaled and due to time constraints this is the initial chart this other chart here is what it could look like but it has a 
   reverse index and without time constraint it could be fixed it looks different than the twin plots earlier but showing deviation the meeting points are still similar and show 
   different times of different waves 
   Twin Plot reference : https://cmdlinetips.com/2019/10/how-to-make-a-plot-with-two-different-y-axis-in-python-with-matplotlib/
   What will inflation and cases look like plotted?
   What does total covid cases and inflation rate look like on a aggregate chart?
   
   During our analysis for this question, we discovered that there is correlation between US inflation and covid cases, and Canada inflation
   and Canada covid cases, however we  also tested to see if there was correlation between US Inflation and Canada inflation which concluded
   to a judgement where there is no relation. This gave us the opportunity to explore further into specific inflation sectors and we intuitively
   decided to examine the Food and Shelter sectors. The Heatmap gives a positive result (high number close to 1) between Food, Shelter, And inflation
   for both countries individually. 
   The purpose of this project is to determine and analyse Covid 19 
statistics and final correlation with the inflation of the consumer index 
for US and Canada.
•Quantitative analysis methods from Python, Pandas & other data 
visualization libraries used for assessing various data sets and determine 
the correlation between inflation & covid cases
Covid cases dataset – the data was extracted for the 
two countries only from the 
global_time_series_data_set. It was cleaned to check for 
null values and renaming the columns.
•Inflation dataset – the data was extracted from World 
Bank for US and from statcan website for Canada. The 
extremely detailed dataset was extracted to display 
only the consumer price index. For further analysis; food 
& shelter component of the inflation was pulled, 
renamed and merged with the covid dataset using 
pandas.
  
These questions were asked because of the noticeable price increases the past few years of many categories including consumer, food, and real estate prices.

## Code Snippets & Outputs

There are 4 Jupyter Notebooks for this project:
File 1: US& CA inflation and covid cases analysis.ipynb
This file loads and cleans the csv files US&CA Dataset.csv , covid19_confirmed_cases_US_CA.csv , food_shelter_CA_US.csv, into Pandas Dataframes. Column names
are renamed for organization, nulls are checked to be sure there aren't too many, and data types are checked to see the data sets are matching for plotting and analysis.

Then Hvplot is used for visualizing covid cases for US & Canada
```
covid_db.hvplot()
```
![US & Canada Hvplot cases](/images/covid_Us_cases.png)
![US & Canada Hvplot cases](/images/covid_cases_ca.png)

```
# create figure and axis objects with subplots()
std_plot=US_data.rolling(window=7).std()

fig_std,ax_std=plt.subplots()
ax_std.plot(years_months_df[""Month & Year""], std_plot[""Inflation_US""], marker=""o"")
ax_std.set_xlabel(""Month & Year"")
```
![US Inflation STD & Covid Cases STD](/images/2_seperate_axes_1_plot_twinx_.jpg)
![Canada Inflation STD & Covid Cases STD](/images/ca_twin.png)
```
# Create panels to structure the layout of the dashboard
geo_column = pn.Column(
    ""## Total number of COVID Cses in US & Canada"", covid_db.hvplot(),
    px.parallel_categories(
    combined_df,
    dimensions=[""Inflation_CA"",""Covid_Cases_CA""],
    color=""Inflation_CA"",
),
    #  Plot  US data  in combined Dataframe using parallel_categories plot
px.parallel_categories(
    combined_df,
    dimensions=[""Inflation_US"",""Covid_Cases_US""],
    color=""Inflation_US"",
)
)
```
![Dashboard](/images/dashboard_1.png)

![Food & Shelter US](/images/bokeh_plot-2.png)

![Food & Shelter Canada](/images/bokeh_plot.png)
```
ax2_std=ax_std.twinx()
# make a plot with different y-axis using second axis object
ax2_std.plot(years_months_df[""Month & Year""], std_plot[""Covid_Cases_US""],color=""blue"",marker=""d"")
ax2_std.set_ylabel(""Covid Cases US STD"",color=""blue"",fontsize=14)
plt.show()
# save the plot as a file
fig_std.savefig('2_seperate_axes_1_plot_twinx_std.jpg',
            format='jpeg',
            dpi=100,
            bbox_inches='tight')
```
![US Inflation STD & Covid Cases STD Proper Scaled](/images/2_seperate_axes_1_plot_twinx_std.jpg)
```
# Line chart for US covid cases 
create_line_chart(avg_covid_cases[""Covid_Cases_US""],
                  title=""Average covid cases for USA "",
                 ylabel=""AVG covid cases for US"", xlabel=""year"",color=""blue"")
# Line chart for CANADA COVID CASES
create_line_chart(avg_covid_cases[""Covid_Cases_CA""],
                  title=""Average Covid Cases for Canada "",
                 ylabel=""avg covid cases for Canada "", xlabel=""year"",color=""orange"")
                 

```
![Average Cases both US & Canada Seperate](/images/avgs.png)

```

# creating object
bar_chart = pygal.Bar()
bar_chart = pygal.HorizontalBar()
# adding range of months from 1 to 12
#bar_chart.x_labels = map(str, range(1,12))
for index,row in combined_df.iterrows():
    #a.append(row[""Inflation_US""])
    b.append(row[""Covid_Cases_US""])
    c.append(row[""Covid_Cases_CA""])
    #d.append(row[""Inflation_CA""])
```
![Summary Bar Plot Pygal](/images/bar%20plot%20pygal.png)

```
# Plot data using parallel_coordinates plot
px.parallel_coordinates(correlation)
```
![Correlation Plotly Parallel Coordinates](/images/correlation%20%20for%20combined%20df%202%20.png)
```
## use  heatmap to plot the correlation 
sns.heatmap(correlation) 
```
![Heatmap Correlation Summary](/images/correlation%20%20for%20combined%20df.png)

```
#plotting heatmap based on correlation
sns.heatmap(correlation)
```
![Food, Shelter, Inflation Correlation Canada Heatmap](/images/correlation%201.png)

```
#finding a correlation between covid cases and inflation rate of food and shelter in US
correlation = us_df.corr()
correlation
```
![Food, Shelter, Inflation Correlation US](/images/correlation%20for%20US.png)



```
inflation_rate.rolling(window=7).mean().plot(figsize=(20,7))
```
![Rolling Mean For Inflation Canada / US](/images/rolling%20.mean%20for%20combined%20df.png)

```
US_data.rolling(window=7).std().plot(figsize=(10,5), title= ""7 day rolling standard deviation for inflation rate and covid cases of Canada"")
```
![Rolling STD 7 Day Canada Inflation & Cases](/images/rolling%20std%20for%20CA.png)

```
# create figure and axis objects with subplots()
fig,ax=plt.subplots()
ax.plot(years_months_df[""Month & Year""], combined_df[""Inflation_US""], marker=""o"")
ax.set_xlabel(""Month & Year"")
ax.set_ylabel(""Inflation"")
```
![Twin Plot US Inflation / Cases (unscaled)](/images/Twin%20Plot%20for%20Inflation%20&%20US%20Cases%20for%20Combined%20DataFram.png)

```
 #create figure and axis objects with subplots()
fig,ax = plt.subplots()
# make a plot
ax.plot(years_months_df[""Month & Year""], combined_df[""Inflation_US""], marker=""o"")
# set x-axis label
ax.set_xlabel(""Month & Year"",fontsize=14)
# set y-axis label
ax.set_ylabel(""Inflation US"",color=""red"",fontsize=14)
# twin object for two different y-axis on the sample plot
ax2=ax.twinx()
```
![Twin Plot US Inflation / Cases (proper scale)](/images/twin%20plot.png)
"
101,jsa-aerial/jsbgzf,JavaScript,"jsbgzf
======

Javascript bgzf inflation and deflation


Include the following libs:

* inflate.js (fetch and place or fetch remotely)
* pako_deflate.min.js (fetch and place or fetch remotely)
* jsbgzf.js (this file)

API consists of top level functions - no constructor needed or
wanted.

Synopsis:


* `buffer2String` - take a unsigned byte array (UBA) and convert to a
  string. Only works for iso-latin-1 (or ascii - 8 bit bytes) - no
  UTF-8 (unicode, ...) here

* `getChunk` - low level function to obtain a chunk of a file as a UBA

* `getBGZFHD` - parses and returns as a map bgzf headers (each
  compressed block has a bgzf header)

* `nextBlockOffset` - from a provided legal compressed block offset,
  obtain the offset of the next compressed block

* `blockSize` - from a provided legal compressed block offset,
  compute size of contained compressed block

* `countBlocks` - counts the total number of bgzf (compressed) blocks
  in file

* `inflateBlock` - from a provided legal compressed block offset,
  inflate the blcck to its UBA representation.

* `inflateBlock2stg` - same as inflateBlock but then use
  buffer2String to convert inflated block to a string

* `inflateRegion` - from a provided starting compressed block offset
  and some ending offset (need not be a block offset), expand all
  blocks covereed by region to a single UBA

* `inflateAllBlocks` - inflate all blocks in file to a single UBA.
  Likely not usable for large files.

* `inflateRegion2Stg` - same as inflateBlock2stg, but for
  inflateRegion

* `inflateAll2Stg` - same as inflateRegioin2Stg, but where region is
  the entire file

* `bgzf` - takes a UBA of data and deflates to a bgzf compressed
  block

Appending buffers - used internally, but are intended for public
use as well

* `appendBuffer` - append two unsigned byte arrays (UBA)
* `appendBuffers` - append vector of UBAs


---

Main functions for processing BGZF inflation and deflation:


---

Inflation:


```javascript
function getChunk (f, beg, end, cbfn)
```
Low level binary file reader.  Reads bytes from base offset BEG to
END inclusive as an array of unsigned bytes using a new FileReader
for each read.  CBFN is the callback to call when read is finished
and it is passed the FileReader object.


```javascript
function getBGZFHD (f, offset, cbfn)
```
Low level function that obtains the BGZF header for the BGZF
compressed file F at base byte offset OFFSET.  Decodes the header
and passes the resulting JS object, representing the header
information with fields as defined by template bgzf_hd_fmt, to
CBFN.


```javascript
function nextBlockOffset (f, offset, cbfn)
```
Low level function that given BGZF file F, base offset OFFSET,
obtains the offset of the next block and passes to CBFN


```javascript
function blockSize (f, offset, cbfn)
```
Low level function that given BGZF file F, base offset OFFSET,
obtains the block size of block at OFFSET and passes to CBFN


```javascript
function countBlocks (f, cbfn)
```
Low level function that given BGZF file F, obtains the total count
of _gzip_ blocks in F.  Each of these will correspond to one of
BGZF's 64KB uncompressed blocks.  NOTE: a chunk or interval may
contain more than one of these blocks! Passes count to CBFN.

WARNING: for large BGZF files this can take a looonnnggggg time.


```javascript
function inflateBlock(f, blockOffset, cbfn)
```
Low level function that given BGZF file F, base off BLOCKOFFSET,
inflates the single _gzip_ compressed block at that location and
passes the base array buffer obtained to CBFN.  NOTE: this uses the
JSZlib library.


```javascript
function inflateBlock2stg(f, blockOffset, cbfn)
```
Low level function that given BGZF file F, base offset BLOCKOFFSET,
inflates the single _gzip_ compressed block at that location,
converts the array buffer so obtained to a string (latin-1) and
passes that to CBFN


```javascript
function inflateRegion (f, begOffset, endOffset, cbfn)
```
Mid level function that given a BGZF file F, a region defined by
offsets BEGOFFSET and ENDOFFSET, fetches, inflates and appends all
(_inclusively_) the _gzip_ blocks in the region into a single array
buffer and passes to CBFN as its first argument, and passes the size
(in bytes) of the last inflated block in the region as second
argument.


```javascript
function inflateAllBlocks(f, cbfn)
```
Mid level function that given a BGZF file F, inflates all the
contained _gzip blocks, appends them all together into a single
array buffer and passes that to CBFN.  Calling this on any 'large'
BGZF _data_ file (bai should be fine) will likely blow up with
memory exceeded.


```javascript
function inflateRegion2Stg (f, begOffset, endOffset, cbfn)
```
Mid level function that given a BGZF file F, a region defined by
offsets BEGOFFSET and ENDOFFSET, fetches, inflates, appends
together and converts to a string all the gzip blocks in region.
Passes the string to CBFN


```javascript
function inflateAll2Stg (f, cbfn)
```
Mid level function.  Inflates the entire BGZF file F, converts to a
total string and passes to CBFN.  Calling this on any 'large' BGZF
_data_ file will likely blow off with memory exceeded.


---

Deflation:


```javascript
function bgzf (uba)
```
BGZF deflation; takes an unsigned byte array UBA, which is taken as
not yet deflated (though you could try deflating an already
deflated block, but this will likely lose) and deflate it to a
legal BGZF formatted compressed uba (including BSIZE payload).


```javascript
function addEOFblk (bgzfUba)
```
Takes a uba composed of a series of bgzf blocks and appends the EOF
block.


---

Utility functions:


```javascript
function appendBuffer( buff1, buff2, asUint8)
```
Take two array buffers BUFF1 and BUFF2 and, treating them as simple
byte arrays, return a new byte array of their catenation.  If asUint8
(boolean) is true, return the uint8 'view' array otherwise return the
underlying ArrayBuffer.


```javascript
function appendBuffers(bufferVec, asUint8)
```
Take a vector of array buffers and treating them as simple byte
arrays, return a new byte array of their catenation.  If asUint8
(boolean) is true, return the uint8 'view' array otherwise return
the underlying ArrayBuffer.


```javascript
function buffer2String (resultBuffer)
```
Take an array buffer considered as a byte stream, and return the
string representation of the buffer.  This works only on latin 1
character encodings (no UTF8).
"
102,gunthercox/NoCoin,,"# No Coin

No Coin is the most secure, inflation-proof crypto currency. Risk nothing by having no coins.

## What is No Coin?

No Coin is an experimental digital currency. It has no central authority and no peers are required for it's non-existent network.

## How fast is No Coin?

No Coin is instantaneously fast. It's also 100% reliable.
Recipients of No Coin will have the full value of the transfer immediately.

## What are the transfer fees?

No Coin has no transfer fees because it has no value.

## How to mine

Here is an example you can run on just about any system.

Start with the following command:

```

```

You should observe no coins being produced.

## Wallets

There isn't any. You don't need one.

## Spec

The spec for No Coin is as follows.

```

```

Isn't it elegant?

## Contributing

You don't.
"
103,elSomewhere/Time-Series-ML,Python,
104,whitfin/dot-notes-java,Java,"# dot-notes-java

[![Build Status](https://travis-ci.org/whitfin/dot-notes-java.svg?branch=master)](https://travis-ci.org/whitfin/dot-notes-java) [![Coverage Status](https://coveralls.io/repos/whitfin/dot-notes-java/badge.svg?branch=master&service=github)](https://coveralls.io/github/whitfin/dot-notes-java?branch=master)

This is a Java port of [dot-notes](http://github.com/whitfin/dot-notes) to work with Jackson JSON. The interface is the same, so please check out the [documentation](https://github.com/whitfin/dot-notes/wiki) for example usage. You can find the Javadocs from the latest release [here](http://www.javadoc.io/doc/com.whitfin/dot-notes) - they should be pretty self explanatory.

This lib is built using Travis and has 100% line/branch coverage, making it pretty robust. This does not mean it's perfect however, so make sure you have appropriate tests in your code to cover your usage.

### Setup

`dot-notes-java` available on Maven central, via Sonatype OSS:

```
<dependency>
    <groupId>io.whitfin</groupId>
    <artifactId>dot-notes</artifactId>
    <version>3.1.0</version>
</dependency>
```

### Differences to the JavaScript API

- The interface is the same for the most part, with the same methods surfaced to the API. Naturally there are a few differences due to the language changes, but it's all pretty straightforward.
- All work is done with the `JsonNode` component of `com.fasterxml` Jackson, rather than the old Codehaus version. 
- When passing a callback to `recurse`, please pass an instance of the `NodeIterator` class. You can override `requirePathGeneration` to return `false` to disable path generation for faster parsing.
- There is a lot more type validation, due to the strictness of Java. This leads to minor parity changes between the libraries cross-language, but it clearly unavoidable. An example of this is trying to create an Array noted key inside an ObjectNode; in Java you get an Exception, in JS it works just fine.
- All keys are wrapped in the `NotedKey` class, as they can either Integer (Array) or String (Object) keys. The `NotedKey` class therefore has `isNumber/isString` methods, and `asNumber/asString` methods to deal with appropriately. 

### Contributing

If you wish to contribute (awesome!), please file an issue in the main dot-notes repo, as this is just a port (unless it's a bug in this library). All PRs should pass `mvn clean test` and maintain 100% test coverage.

### Testing

Tests are run using Maven. I aim to maintain 100% coverage where possible (both line and branch). These tests can be run as follows:

```bash
$ mvn clean verify
```
"
105,zpbrent/magictrain,C++,"magictrain
==========

A bandwidth measurement tool which can detect bandwidth inflation attacks

==========
Build the tool:<br>
make

==========
Usage: <br>
./mtrain [options] [IP or DNS of target prover]<br>
Options:<br>
  -i iface name. Without -i, mtrain will find iface automatically<br>
  -e Train type. 0 is TIME_TRAIN, 1 is OF_TRAIN and 2 is SYN_TRAIN<br>
  -n How many trains used. Default is 3.<br>
  -s Train length. Default is 100.<br>
  -m 0=libpcap+rawSocket, 1=kernel+libnetfilter_queue. Packet transmission method selection. Default is 0.<br>
  -d DEBUG info. enabled.<br>
  -o Enable output pcap.<br>
  -t For test supporting rate purpose only.<br>
  -r For RTT estimation only.<br>
  -p For packet pair measurement only.<br>
  -? Print HELP info..

==========
If you use our tool, please cite the paper at:<br>

@article{zhou2018magic,<br>
  title={Magic Train: Design of Measurement Methods Against Bandwidth Inflation Attacks},<br>
  author={Zhou, Peng and Chang, Rocky KC and Gu, Xiaojing and Fei, Minrui and Zhou, Jianying},<br>
  journal={IEEE Transactions on Dependable and Secure Computing},<br>
  year={2018},<br>
  publisher={IEEE}<br>
}<br>
"
106,5G-Cash/5G,C,"5G-CASH integration/staging tree
===========================

What is 5G-CASH?
----------------
5G-CASH (VGC) is a digital currency that enables instant payments to anyone, anywhere in the world. It uses different key features technology to operate with no central authority allowing everyone to operate the way they want to with this hybrid privacy coin using Sigma and Dandelion++ Protocol along with TOR to remain anonymous.

Why 5G-CASH is a Hybrid Project?
-------------------------------
Because it uses POW to allow miners to compete with hashing power but also incentivate holders to mint their balances with POS v3.0 to earn the same reward amount and once holders allocate the necessary coins they can run Masternodes to easily support the consensus to secure the Network.

For more information, read the
[original whitepaper](https://fiveg.cash/wp-content/uploads/2021/09/5G-CASH-Whitepaper.pdf).



### Key Features
    -Privacy (Anonymous and Untraceable)
    -Sigma Protocol 
    -Tor Protocol
    -Dandelion++ Protocol
    -Proof of Work and Proof of Stake (3.0) share 55% of the block reward
    -Masternode gets 45% of the block reward

### Specifications and Block Rewards -----> https://discord.gg/tmQSFV9


Linux Build Instructions and Notes
==================================

Dependencies
----------------------
You can use the ""depscript.sh"" to automatically install Dependencies to build VGC or manually install them using the syntax below

1.  Update packages

        sudo apt-get update

2.  Install required packages
        
        sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils libboost-all-dev libzmq3-dev libminizip-dev

3.  Install Berkeley DB 4.8

        sudo add-apt-repository ppa:bitcoin/bitcoin && sudo apt-get update && sudo apt-get install libdb4.8-dev libdb4.8++-dev
4.  Install QT 5

        
        sudo apt-get install libminiupnpc-dev && sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler    libqrencode-dev
        
        

Building 5G-CASH
----------------------

1. Static compile

    git clone https://github.com/5G-Cash/5G.git
     
    cd 5G/depends
    
    make HOST=x86_64-linux-gnu
    
    cd ..
    
    ./autogen.sh
    
    ./configure --prefix=`pwd`/depends/x86_64-linux-gnu
    
    make


2. Shared binary

    git clone https://github.com/5G-Cash/5G.git
    
    cd 5G
    
    ./autogen.sh
    
    ./configure
    
    make
    
3.  It is recommended to build and run the unit tests:

        make check


Setting up a Fivegnode
==================================

Read [contrib/masternode-setup-scripts/README.md](contrib/masternode-setup-scripts/README.md) for instructions.
"
107,winitzki/eternal-inflation-book,TeX,"# ""Eternal Inflation"" by Sergei Winitzki, Ph.D.

This is the free version of the book ""Eternal Inflation"" (2009).

This book was published by World Scientific in 2009 under ISBN 978-981-283-239-9.

The copyright was returned to me (the author) in 2018.
I am therefore free to publish this book, without any Word Scientific typography, layout, and only with text written by me.

This book is now released under the GNU Free Documentation License. The entire text has been typeset with different font and page layouts.

A low-priced paper copy can be purchased from lulu.com:

[http://www.lulu.com/content/paperback-book/eternal-inflation/24950934](http://www.lulu.com/content/paperback-book/eternal-inflation/24950934)

# Build

Run `bash build.sh` in the source directory to build the PDF version of the book.

This requires LyX and LaTeX to be installed.

The most recent PDF build is available in the git repository as [EIbook/eternal_inflation_book.pdf](EIbook/eternal_inflation_book.pdf).



# Description

In generic models of cosmological inflation, the geometry of spacetime is highly inhomogeneous on scales of
many Hubble sizes, consisting of infinitely many causally disconnected “pocket universes.” The values of cosmological observables and even of the low-energy coupling constants and particle masses may vary among the
pocket universes. String-theoretic landscape models present a similar structure of a “multiverse” where an infinite number of de Sitter, asymptotically flat (Minkowski), and anti-de Sitter pocket universes are nucleated via
quantum tunneling. Since observers on Earth have no information about their location within the eternally inflating multiverse, the main question in this context has been that of obtaining statistical predictions for quantities
observed at a “random” location.

In this book, I discuss the long-standing technical and conceptual problems arising within this statistical framework, known collectively as the “measure problem” in multiverse cosmology. After reviewing various existing
approaches and mathematical techniques developed in the past two decades for studying these issues, I describe
a new proposal for a measure in the multiverse, called the reheating-volume (RV) measure. The RV measure is
based on approximating an infinite multiverse by a family of progressively larger but finite multiverses. Such
multiverses occur seldom but are allowed by all cosmological “multiverse” models. I give a detailed description of the new measure and its applications to generic models of eternal inflation of random-walk type and
to landscape scenarios. The RV prescription is formulated differently for scenarios with eternal inflation of the
random walk type and for landscape scenarios. For models of random-walk inflation, the RV cutoff considers
events where one has a finite (although large) total reheating volume to the future of an initial Hubble patch.

For landscape scenarios, I propose to calculate the distribution of observable quantities in a landscape that is
conditioned in probability to nucleate a finite total number of bubbles to the future of an initial bubble. In each
case I show in a mathematically rigorous manner that the RV measure yields well-defined results that are invariant with respect to general coordinate transformations, independent of the initial conditions at the beginning of
inflation, and free of the “youngness paradox” and the “Boltzmann brain” problems affecting some of the previously proposed measures. I derive analytic formulas for RV-regulated probability distributions that is suitable for
numerical computations.


## Table of contents



List of Figures iii

Preface 1

1 Introduction 1

2 Inflationary cosmology 5

2.1 The inflationary paradigm . . . . . . . . . . . . . . . . . . . . . . . 6

2.2 Slow-roll inflation and attractors . . . . . . . . . . . . . . . . . . . 7

3 Eternal inflation 15

3.1 Predictions in eternal inflation . . . . . . . . . . . . . . . . . . . . . 20

3.2 Physical justifications of the semiclassical picture . . . . . . . . . . 23

4 Stochastic approach to inflation 27

4.1 Eternal inflation of random walk type . . . . . . . . . . . . . . . . 27

4.1.1 Fokker–Planck equations: comoving distribution . . . . . 29

4.1.2 Volume-weighted distribution . . . . . . . . . . . . . . . . 33

4.1.3 Gauge dependence issues . . . . . . . . . . . . . . . . . . . 35

4.1.4 Interpretation of FP equations . . . . . . . . . . . . . . . . . 38

4.1.5 Methods of solution; approximations . . . . . . . . . . . . 40

4.2 Presence of eternal inflation . . . . . . . . . . . . . . . . . . . . . . 50

4.2.1 A nonlinear diffusion equation . . . . . . . . . . . . . . . . 54

4.2.2 The existence of solutions of nonlinear equations . . . . . 58

4.2.3 Proof of the sufficient condition . . . . . . . . . . . . . . . 61

5 Models with bubble nucleation 67

6 The measure problem and proposed solutions 73

6.1 Observer-based measures . . . . . . . . . . . . . . . . . . . . . . . 73

6.2 Regularization for a single reheating surface . . . . . . . . . . . . 77

6.3 Regularization for multiple types of reheating surfaces . . . . . . 83

6.4 Youngness paradox and Boltzmann brains . . . . . . . . . . . . . . 85

7 The RV measure: first look 87

7.1 Reheating-volume cutoff . . . . . . . . . . . . . . . . . . . . . . . . 90

7.2 RV cutoff in slow-roll inflation . . . . . . . . . . . . . . . . . . . . . 92



8 The RV measure for random-walk inflation 97

8.1 Motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97

8.2 Overview of the results . . . . . . . . . . . . . . . . . . . . . . . . . 101

8.2.1 Preliminaries . . . . . . . . . . . . . . . . . . . . . . . . . . 101

8.2.2 Finitely produced volume . . . . . . . . . . . . . . . . . . . 103

8.2.3 Asymptotics of ρ(V; φ0) . . . . . . . . . . . . . . . . . . . . 104

8.2.4 Distribution of a fluctuating field . . . . . . . . . . . . . . . 105

8.2.5 Toy model of inflation . . . . . . . . . . . . . . . . . . . . . 106

8.3 Derivations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107

8.3.1 Derivation of the equation for g . . . . . . . . . . . . . . . . 107

8.3.2 Singularities of g(z) . . . . . . . . . . . . . . . . . . . . . . 109

8.3.3 FPRV distribution of a field Q . . . . . . . . . . . . . . . . . 116

8.3.4 Calculations for an inflationary model . . . . . . . . . . . . 119

9 The RV measure for the landscape 127

9.1 Regulating the number of terminal bubbles . . . . . . . . . . . . . 130

9.2 Regulating the total number of bubbles . . . . . . . . . . . . . . . 135

9.3 A toy landscape . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137

9.3.1 Bubble abundances . . . . . . . . . . . . . . . . . . . . . . . 139

9.3.2 “Boltzmann brains” . . . . . . . . . . . . . . . . . . . . . . 148

9.4 A general landscape . . . . . . . . . . . . . . . . . . . . . . . . . . 149

9.4.1 Bubble abundances . . . . . . . . . . . . . . . . . . . . . . . 150

9.4.2 Example landscape . . . . . . . . . . . . . . . . . . . . . . . 155

9.4.3 “Boltzmann brains” . . . . . . . . . . . . . . . . . . . . . . 159

9.4.4 Derivation of Eq. (9.103) . . . . . . . . . . . . . . . . . . . . 161

9.4.5 Eigenvalues of M ˆ (z) . . . . . . . . . . . . . . . . . . . . . . 163

9.4.6 The root of λ0(z) . . . . . . . . . . . . . . . . . . . . . . . . 166

10 Conclusion 169

A Copyright transfer statement 173

B GNU Free Document License 175

B.0.0 Applicability and definitions . . . . . . . . . . . . . . . . . 175

B.0.1 Verbatim copying . . . . . . . . . . . . . . . . . . . . . . . . 175

B.0.2 Copying in quantity . . . . . . . . . . . . . . . . . . . . . . 176

B.0.3 Modifications . . . . . . . . . . . . . . . . . . . . . . . . . . 176

Bibliography 179

Index"
108,austinpracticaldatascience/session_0_inflation,Jupyter Notebook,"# session_0_inflation

Data and intro code for https://www.meetup.com/austin-practical-data-science/events/282610875/

More info on inflation can be found here: https://www.bls.gov/cpi/data-overview.htm
Methodology / concepts here: https://www.bls.gov/opub/hom/cpi/concepts.htm
"
109,Cryptolyfe/Inflation_Rate_Coin,Solidity,"# Inflation Rate Coin or INFR

In the last year alone, inflation has risen by 7% according to the Consumer Price Index, or CPI.
<br>
<br>
For our project, we created an ERC20 coin called INFCoin. We also created an INFCrowdSale to allow users to purchase tokens.  INFCoin, or Inflation Coin, uses the percent change in CPI to adjust the amount of the holder's tokens. The tokens are added or subtracted monthly, depending on if inflation increases or decreases.
<br>
<br>
For INFCoin, we created an ERC20 coin that includes a check inflation function.  The check inflation function checks for the percent change in inflation and then loops though an array of the current token holders, to add or subtract the tokens based on the inflation rate, to each token holder’s balance. This coin is a hedge against inflation.
Our coin is currently a proof of concept, as we still need to add an oracle to check inflation programmatically instead of manually.
<br>
<br>
To demonstrate:
<br>
<br>
First, we deployed the INFCoin sale. INFCoin sale inherited from crowdsale.  The CrowdSale contract uses the interface of ERC20 to sell the token, and for our token unique requirement of storing every owner address in an array, we had to modify the ERC20 interface to implement a function for adding to that array.
<br>
<br>
<img width=""1429"" alt=""INFCoin Deployer"" src=""https://user-images.githubusercontent.com/87285522/149602309-bd6daffd-556d-4e04-891a-e51aadb78f01.png"">
<br>
<br>
Then, we deployed the contract for the crowdsale using the token sale address generated by the coin sale contract.
<br>
<br>
<img width=""1433"" alt=""INFCoin Crowdsale w:Token sale address"" src=""https://user-images.githubusercontent.com/87285522/149603764-3ef5531c-46f5-4fa2-a573-b951707bca65.png"">
<br>
<br>
Following this, we purchased 1 ether's worth of tokens to our ganache wallet.
<br>
<br>
<img width=""1432"" alt=""Buy Tokens at Ganache Address"" src=""https://user-images.githubusercontent.com/87285522/149603880-ccfaa5ef-bc33-45e5-b156-b7d4d08e704b.png"">
<br>
<br>
Next, we deployed our INFCoin contract using our token address.
<br>
<br>
<img width=""1435"" alt="" INFCOIN contract w:token address"" src=""https://user-images.githubusercontent.com/87285522/149603964-be6c4b31-a067-4cd6-a7af-096edb3beab2.png"">
<br>
<br>
Once the INFCoin contract was deployed, we checked our ganache account balance.
<br>
<br>
<img width=""1434"" alt=""check balance of Ganache acct"" src=""https://user-images.githubusercontent.com/87285522/149603985-632991f2-429d-4cfa-94c9-e34f471f0c02.png"">
<br>
<br>
In the next step we checked the inflation and checked to see our tokens increased.
<br>
<br>
<img width=""1431"" alt=""check inflation and check adjusted balance"" src=""https://user-images.githubusercontent.com/87285522/149604092-b83b3ecc-5a7d-4083-8134-7ead5a2c987b.png"">
<br>
<br>
Finally, we added INFCoin to our metamask wallet.
<br>
<br>
<img width=""1297"" alt=""Add INF to Metamask "" src=""https://user-images.githubusercontent.com/87285522/149604588-f9386d85-fef5-4b4b-a560-7576d14433a3.png"">
<br>
<br>
Inflation Coin is a store of value that hedges against inflation, by maintaining the purchasing power of your investment.  Something your bank currently does not do!
<br>
<br>
"
110,jeopardization/TubeMaster,Java,"## Notice
This is still being tested. Expect bugs. Some features may be disabled/hardcoded as they haven't been tweaked yet. 

# TubeMaster
TubeMaster is a bot designed to automate the inflation of artificial YouTube stats. It is capable of liking/disliking videos and subscribing to channels using multiple accounts.

## Screenshots
![](https://i.imgur.com/GeTvHhE.png)
![](https://i.imgur.com/BGPTLNH.png)
![](https://i.imgur.com/bxwku4A.png)

## Usage
### Dashboard
| **Option** | **Description** | **Input Example** |
|-|-|-|
| **Account List** | List of accounts to be used for botting. Each account must have a username/email and password combination to sign in. They're read from a .TXT file and are separated line by line with a **username:password** format. | C:\Users\Jared\Documents\Accounts.txt |
| **Proxy List** | *N/A* | *N/A* |
| **Amount** | Number of accounts to use from the **Account List**. | 10 |
| **Threads** | Number of CPU threads to use. The more you use, the faster the botting will be. | 10 |
| **Module** | Botting module to use. Must be applied first from said module's tab. | Video Bot |
| **Logs** | Spits out details on how the botting is going. | *N/A* |

### Video Bot
| **Option** | **Description** | **Input Example** |
|-|-|-|
| **Video ID** | ID of the YouTube video you intend to bot. Should be a bunch of ambiguous characters just after the equal sign (=) near the end of the URL. | dPa2atWWVk8 |
| **Action** | Task for the bot to perform on the video. | Like |

### Channel Bot
| **Option** | **Description** | **Input Example** |
|-|-|-|
| **Channel** | ID of the YouTube channel you intend to bot. Should either be a user ID (followed by ""/user/"" in the URL) or a raw channel ID (followed by ""/channel/"" in the URL) | UC0X72NakQYxDmK4nIyhLKOA |
| **Action** | Task for the bot to perform on the channel. | Subscribe |
"
111,geekypy/FRED_MACRO_Inflation,Python,
112,gogo40/MyLittleDragon,C,"<center> <a href=""http://gogo40.com/""><img src=""http://gogo40.com/wp-content/uploads/2015/02/dragon1.png"" width=""300""></a> </center>

# MyLittleDragon
A personal inflation calculator. MyLittleDragon uses the IBGE raw data to create a personal inflation index.

License
-------

Copyright (c) 2015, gogo40
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this 
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this 
list of conditions and the following disclaimer in the documentation and/or other
materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may 
be used to endorse or promote products derived from this software without specific 
prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY 
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
113,htacg/html-tidy.org.api,HTML,"README for HTACG GitHub Pages
=============================

This repository consists of the HTML Tidy homepages' API and Quick Reference
Archives, as well as the CMake project and bash build scripts required to make
them.

Building Documentation
----------------------

**This** website is the API Reference Website for http://api.html-tidy.org.
It also includes the build scripts for generating the content. Please see
[tidy-html5-doxygen/README.md](tidy-html5-doxygen/README.md)


General Website Information
---------------------------

For ease of maintenance by multiple contributors HTACG's GitHub pages take
advantage of GitHub’s Jekyll integration. Therefore it is necessary to be
slightly familiar with Jekyll and GitHub’s implementation of Jekyll in order to
make changes to our sites.


References
----------

Everything you need to know about Jekyll can be found on
[jekyllrb.com](http://jekyllrb.com).


About Github and HTACG Pages
----------------------------

The HTAGC group main project page is served from files located in
[https://github.com/htacg/htacg.github.io](https://github.com/htacg/htacg.github.io).
It can be reached from [http://www.htacg.org](http://www.htacg.org) or 
[http://htacg.github.io](http://htacg.github.io). The latter is the standard 
means of accessing the project page, however the former works because we've set
up a domain name and configured GitHub to use the domain name via the `CNAME`
file in the repository.

HTACG Project pages are available as subdirectories of the HTACG domain, for
example:

- [http://www.htacg.org/html-tidy](http://www.htacg.org/html-tidy)
- [http://www.htacg.org/binaries](http://www.htacg.org/binaries)
- etc.

In general this is intuitive behaviour of GitHub pages but it can cause some
issues with relative paths used for project web pages. For example:

The HTML-Tidy main project page is served from files located in
[https://github.com/htacg/tidy-html5/tree/gh-pages](https://github.com/htacg/tidy-html5/tree/gh-pages).
It can be reached from [http://www.html-tidy.org](http://www.html-tidy.org), or
as above, from [http://www.htacg.org/html-tidy](http://www.htacg.org/html-tidy).

This is where resource paths can be an issue. Thus it's important to follow the
advice given on [Jekyll's](http://jekyllrb.com/docs/github-pages/#project-page-url-structure)
site. This will ensure that resources such as stylesheets and images are served
from the appropriate directory.

In summary use the `site.baseurl` variable as described in the linked document,
and when performing local previewing start Jekyll's server with:

~~~
jekyll serve --baseurl ''
~~~

or

~~~
bundle exec jekyll serve --baseurl ''
~~~

Specifying the `baseurl` on the command line will override the base URL set in
`_config.yml`.
"
114,ucg8j/wage_inflation_calculator,R,"# wage_inflation_calculator
A [website](https://ucg8j.shinyapps.io/wage_inflation_calculator/) to view the effect of inflation on wages in Australia. Built using R and shiny.

![](./appScreenshot.png)

## Consumer Price Index (CPI)
The Consumer Price Index was sourced from the [RBA](http://www.rba.gov.au/inflation/measures-cpi.html). The projected CPI was sourced from the [Treasury's Economic Outlook.](http://www.treasury.gov.au/PublicationsAndMedia/Publications/2016/PEFO-2016/HTML/Economic-outlook)

Since Treasury published CPI in the format of '1 1/2' instead of a machine readable '1.5' I ended up 
manually adding the projected figures to the rates table.
"
115,audrey-webb/inflation-unemployment-analysis,R,"# README

### Objective
This project focuses on the following two research questions: 

1) Does Google Trends data accurately reflects the unemployment and inflation rates in the world? 

2) Is the Phillips Curve accurate about the inverse relationship between inflation and unemployment? 

### Method 
At first the data focused on the top four countries that google search ""unemployment"" the most. These countries are the United States, Canada, South Africa, and Ireland. Due to the lack of data on Ireland's inflation, the sixth country that google searches ""unemployment"" the most was chosen--New Zealand. Similarily Nigeria, the fifth highest country, was not analyzed due to insufficient data. Now, the data used for analysis are the four countries--United States, Canada, South Africa, and New Zealand. Data is limitted to years 2006 to 2013 as they contain the most data.

### File Organization 
Information is organized through the creation of code, data, images, rawdata, report, and resources subdirectories of the Project directory. Inside of the data and rawdata subdirectories, we created two new subdirectories titled ""Google"" and ""World Bank"". Inside of each, there are two separate folders titled ""Inflation"" and ""Unemployment"". This kept the data organized as it was cleaned and analyzed. For example, the raw data concerning the United States Google Trends on inflation would go into the rawdata subdirectory, then the ""Google"" folder, and then the ""Inflation"" folder.

We give license for our code to be shared.
"
116,glassdooreconomicresearch/Inflation-WageGrowth,Python,"# Are Wages Keeping Up With Inflation?

*The following code was written to*
1. Pull the BLS' Consumer Price Index data
2. Pull Glassdoor Local Pay Reports data
3. Merge and clean both datasets together to use for analysis
"
117,sonanmemon/High-Frequency-Inflation-Forecasting,TeX,
118,joaoarteiro/inflation-analysis-with-r,R,
119,mercuryandmercury/inflation,Python,
120,joshuamcurtis/inflation,Jupyter Notebook,
121,nastine/inflation,Python,"Построение таблицы
=======

Вам необходимо оценить динамику инфляции в РФ и подготовить сравнительную таблицу. У вас есть данные по инфляции в csv-файле, необходимо реализовать приложение, которое выводит размер инфляции по годам и месяцам в процентах и отображает общую инфляцию за год.

Вам необходимо реализовать чтение csv-файла `inflation_russia.csv` во view `inflation_view` в файле `apps/views.py` и вывести данные из этого файла в таблице.

Построение шаблона реализуйте в файле `app/templates/inflation.html`.

Таблица должна состоять из столбцов: ""Год"", перечисление месяцев, ""Всего"". Суммарно 14 столбцов.

Таблица с суммарной величиной должна быть закрашена в серый цвет.

Если инфляция за месяц была отрицательной (дефляция), то ячейка должна быть закрашена в зеленый. Если значение инфляции превысило 1%, то в красный. Должна быть реализована визуальная градация красного: от 1% до 2%, от 2% до 5%, от 5% и более (3 оттенка красного, визуально они должны быть различимы).

Если данных за месяц нет, то нужно выводить прочерк.

## Примеры таблицы:

#### Пример 1
![Пример 1](./example1.png)

#### Пример 2
![Пример 2](./example2.png)

## Советы

- как работать с csv в Python: https://docs.python.org/3.6/library/csv.html


## Документация по проекту

Для запуска проекта необходимо:

Установить зависимости:

```bash
pip install -r requirements.txt
```

Выполнить команду:

```bash
python manage.py runserver
```
"
122,avilarenatac/inflation,R,"### Brazilian Inflation data

This repository contains code for a Shiny app that imports and plots inflation data from Brazil.

#### Content
- `README.md`: this file, summarizes the contents of the folder
- `/inflation_br`: shiny app with data visualizations and interactive options


### inflation_br

Shiny app structure:
- `input/read_data.R`: imports series from the APIs of the IBGE and the Brazilian Central Bank
- `load.R`: builds the functions used in the app
- `app.R`: contains the UI and server for the app
"
123,rlatofha/Inflation,Jupyter Notebook,"# Inflation
Bigdata Project
"
124,Alkistis/Inflation,Jupyter Notebook,"# Inflation

Fisher Matrix codes for cosmological and inflationary parameters (scalar spectral index and its runnings).

To run these Jupyter notebooks you need to have CAMB and the CAMB python package installed. In order to install the CAMB python package on your computer follow the instructions in http://camb.readthedocs.io/en/latest/

Feel free to use and modify these codes for your own forecasts. If you do, please cite astro-ph/1612.05138 as well as the CAMB paper (astro-ph/9911177).

"
125,MafiaMelon/inflation,,"# inflation
knowing the price increase and decrease over the years

Inflation, the price increase of goods and services throughout the years.
How to calculate? 

Base year price ___ * Base year # ___ = Base your expenditure(BYE) ___ 

Current year price ___ * Current year # ___ = Current year expenditure(CYE) ___

Current year expenditure(CYE) - Base year expenditure(BYE) = Difference 

Difference/BYE * 100 = Inflation %
"
126,Aysan97/Inflation,,# Inflation
127,adilet000809/Inflation,Kotlin,
128,Vasilis295/inflation,Jupyter Notebook,"# inflation
Regression of cpi on profit margins and oil prices
Data from FRED for the US economy. As inflation is always and even more now a hot topic for economists, we investigate the relationship of profit margins and oil prices with inflation.
Results show a good fit fot the linear regression and this is in a way what we expected.
In next projects we will examine things even more deeply.
"
129,AAKatsko/Inflation,,
130,aerler101-1/InflationData,Python,"# InflationData
 Predict USA Inflation based on Deep learning models.
 This an example of a DNN study on the change of inflation in the United States. This was a collaborative effort. My primary role was in feature selction and reduction.
"
131,francisbreidenbach/InflationCalc,Java,"# InflationCalc
## iOS
[![Build status](https://build.appcenter.ms/v0.1/apps/89bbb96a-27de-4954-87de-5916375e6bc7/branches/dev/badge)](https://appcenter.ms)
## Android
[![Build status](https://build.appcenter.ms/v0.1/apps/f04eb5e0-9f57-4a5b-816d-24f63a08ffde/branches/dev/badge)](https://appcenter.ms)
"
132,neojournalist/InflationProject,Python,
133,hyokzzang/InflationStudy,Python,
134,P1xelfehler/InflationCalc,Java,
135,richi404/InflationPredict,MATLAB,"# InflationPredict

Budowa modelu predykcyjnego dla wskaźnika inflacji 

Proszę zbudować model predykcyjny służący do określenia stopy inflacji (miesięcznej): 

https://stat.gov.pl/obszary-tematyczne/ceny-handel/wskazniki-cen/wskazniki-cen-towarow-i-uslug-konsumpcyjnych-pot-inflacja-/miesieczne-wskazniki-cen-towarow-i-uslug-konsumpcyjnych-od-1982-roku/  

Do modelu można wykorzystać dowolne wskaźniki dostępne na stronie Urzędu Statystycznego – z założeniem, że możemy wykorzystywać wartości wskaźników z poprzednich miesięcy (nie z miesiąca dla którego wyznaczamy wartość wskaźnika).   

Model można zbudować z użyciem sieci neuronowych/logiki rozmytej.  
"
136,teemulatti/inflation,JavaScript,"# Inflation Javascript Library

This javascript library enables to write web components in their own files with HTML+CSS+JS and ""inflate"" them into web page (or inside other components) one/multiple times.

![alt text](Example_Image.png?raw=true ""Example"")

License
-------

Copyright (c) 2016-2018 CUPLA SOFTWARE Teemu Lätti teemu.latti@cupla.net

You are free to use this javascript library for commercial and non-commercial use
"
137,sf19pb1-hardeep-leyl/inflation,Python,
138,hafizheraldi/inflation,R,"# inflation
Inflation forecasting using SARIMA
"
139,venance-riblier/Inflation,R,"# Inflation

This application proposes an inflation tracker across several OECD countries. The data are from the [OECD, \""Main Economic Indicators - complete database\""](https://doi.org/10.1787/data-00052-en) and are updated based on the [OECD API](https://data.oecd.org/api/).

The application is hosted on https://www.shinyapps.io/ and can be accessed from this [link](https://venance-riblier.shinyapps.io/Inflation/). It also can be launched directly from **R**, by using the command ``shiny::runGitHub(""Inflation"", ""venance-riblier"", ref = ""main"")``.

"
140,latentflip/Inflation,JavaScript,
141,malev/inflation,Ruby,
142,Robo-Brain/inflation,JavaScript,
143,jy2915/Inflation,,
144,gyasis/Inflation,HTML,
145,lawli3t/inflation,HTML,
146,mattschagas/inflation,HTML,# inflation
147,Axect/inflation,HTML,
148,jacolind/inflation,R,"# about 

all data comes from world bank. downlaoded 2018-10-12. 

# gdp 

http://databank.worldbank.org/data/reports.aspx?source=2&series=NY.GDP.MKTP.CD#

# gdp per capita 

# R package 

https://cran.r-project.org/web/packages/WDI/WDI.pdf

syntax 

```
WDI(country = ""all"", indicator = ""NY.GNS.ICTR.GN.ZS"", 
    start = 2005, end = 2011, extra = FALSE, cache = NULL)
```

example 

```
> WDIsearch(string='gdp per capita', field='name')
      indicator             
 [1,] ""GDPPCKD""             
 [2,] ""GDPPCKN""             
 [3,] ""NV.AGR.PCAP.KD.ZG""   
 [4,] ""NY.GDP.PCAP.CD""      
 [5,] ""NY.GDP.PCAP.KD""      
 [6,] ""NY.GDP.PCAP.KD.ZG""   
 [7,] ""NY.GDP.PCAP.KN""      
 [8,] ""NY.GDP.PCAP.PP.CD""   
 [9,] ""NY.GDP.PCAP.PP.KD""   
[10,] ""NY.GDP.PCAP.PP.KD.ZG""
[11,] ""SE.XPD.PRIM.PC.ZS""   
[12,] ""SE.XPD.SECO.PC.ZS""   
[13,] ""SE.XPD.TERT.PC.ZS""   
      name                                                                 
 [1,] ""GDP per Capita, constant US$, millions""                             
 [2,] ""Real GDP per Capita (real local currency units, various base years)""
 [3,] ""Real agricultural GDP per capita growth rate (%)""                   
 [4,] ""GDP per capita (current US$)""                                       
 [5,] ""GDP per capita (constant 2000 US$)""                                 
 [6,] ""GDP per capita growth (annual %)""                                   
 [7,] ""GDP per capita (constant LCU)""                                      
 [8,] ""GDP per capita, PPP (current international $)""                      
 [9,] ""GDP per capita, PPP (constant 2005 international $)""                
[10,] ""GDP per capita, PPP annual growth (%)""                              
[11,] ""Expenditure per student, primary (% of GDP per capita)""             
[12,] ""Expenditure per student, secondary (% of GDP per capita)""           
[13,] ""Expenditure per student, tertiary (% of GDP per capita)"" 
```"
149,azieg/Inflation,Jupyter Notebook,"# Inflation in the early universe
This program is a simple 1-dimensional representation of the inflaton field at very early-times. In particular, it shows how the field value, scale factor, energy density, and pressure evolve with time.
"
150,donfuge/inflation,Jupyter Notebook,
151,taivop/inflation,Jupyter Notebook,"# Treemap of inflation in Estonia

This repo contains the code for generating an inflation treemap, for the blog post I published [here](https://taivo.ai/estonia-inflation-2022).

* `make_inflation_plots.ipynb` does all the data processing and visualisation.
* `data/` directory contains the tables -- check the notebook for links to original data sources.

The code here has a [permissive license](LICENSE.md) but I would appreciate a link to [taivo.ai](https://taivo.ai) or an [email](mailto:taivo@pungas.ee) if you do build on it.
"
152,Defimatt/InflationDest,C#,"﻿# InflationDest - easy Stellar voting for Windows

Stellar InflationDest is a quick and dirty tool that allows you to view the `InflationDest` of any account, and to set the `InflationDest` of accounts you own.

By doing this, you change the account your Stellars vote for to receive inflation (see https://www.stellar.org/about/mandate/#Stellar_creation for details).

Getting an `InflationDest` only requires an address. However, setting an `InflationDest` requires an address and a secret key. Unfortunately, there is not much I can do to convince you that this program doesn't do anything nasty with your secret key. However, I have:

* Created this program in .NET so that it can be reflected or decompiled using something like JetBrains dotPeek to see what the code is doing
* Shared the source here on GitHub so you can build it from source if you don't trust the precompiled binaries.

If you have an a username (e.g. Duffles) but don't have the long address, you can lookup the address. However, the federation server that supplies this information was running intermittently at the time of writing, so be patient with it. If I have time, I will extend this to include other features, such as creating new accounts without using the web client and sending Stellar. Have fun!

### Attributions:

* ModernUI: https://mui.codeplex.com/
* Json.NET: http://json.codeplex.com/
* Rocket by the Noun Project: http://www.thexamlproject.com/#/artwork/89

### Instructions:

Should be fairly simple to work out, but there's a quick YouTube explanation here: https://www.youtube.com/watch?v=OPptZZjVcTk

This app requires the .NET Framework. If you have a recent version of Windows with Windows Update enabled, you should have it already. If not, you can get it at http://www.microsoft.com/en-us/download/details.aspx?id=30653

### Tips:

Tips gratefully received!
* Stellar: gDUNatU6tFPgkgW58U5uNf41ArMDCPD6XV
* Bitcoin: 1PAYMATT1UMKDPuHfqvwTmJuEtuYt7BspQ

### Where should I point my InflationDest?

See the following for ideas:
* https://stellartalk.org/topic/74-stellar-creation-and-voting/
* https://stellartalk.org/topic/385-join-str-mining-pool/
"
153,avikalprakash/InflationIPL,Java,
154,InflationRPG/InflationRPG,HTML,"InflationRPG
"
155,mrosm20/InflationCalc,Objective-C,"# InflationCalc
"
156,atreyarawat123/InflationVisualizations,Jupyter Notebook,"# Inflation Visualizations

In this repository data visualizations showing the trends in [consumer price index (CPI)](https://fred.stlouisfed.org/series/CPIAUCSL) and [personal consumption expenditures (PCE)](https://fred.stlouisfed.org/series/PCE) are created using [pandas](https://pandas.pydata.org/), [matplotlib](https://matplotlib.org/), and [seaborn](https://seaborn.pydata.org/). 

## Outline

```bash
├── code
│   ├── InflationVisualizations.ipynb
│   ├── PCE Data practice monthly.ipynb
│   ├── PCEdatapracticeannual.ipynb
├── data
│   ├── PCE.csv
│   ├── inflation.csv
├── README.md
```
"
157,DeLaboreMercurio/InflationaryReport,Python,
158,Tinchoo21/InflationCalculator,JavaScript,# InflationCalculator
159,InnovationGod/inflation,Python,
160,brakdag/inflation,JavaScript,"# inflation
 country's inflation simulator

This simulator be predict inflation with a list parameters country.
"
161,erikdean/inflation,HTML,"# inflation
Work on pandemic inflation, &amp;c. for paper.
"
162,stat-hub/Inflation,,
163,Dougisnotavailable/inflation,Python,
164,mokhin-denis/InflationCalc,FreeBasic,"# InflationCalc #
Расчет инфляции за период в виде функции VBA для использования в формулах Microsoft Excel.

# Использование #
1. Добавьте файл [InflationCalc.bas](InflationCalc.bas) в свою книгу Microsoft Excel.
2. Включите использование макросов VBA
3. В нужную ячейку добавьте функцию `=ИнфляцияЗаПериод(""01.01.2017"";СЕГОДНЯ())`. По данной формуле будет посчитана инфляция за период с 1 января 2017 года до текущей даты

# Синтаксис #
ИнфляцияЗаПериод(ДатаНачала; ДатаОкончания)

## Аргументы ##
* __ДатаНачала__ . Обязательный аргумент. Указывается дата начала расчетного периода.
* __ДатаОкончания__ . Обязательный аргумент. Указывается дата окончания расчетного периода.

Даты начала и конца периода допустимо указывать в виде строки, например `""01.01.2017""`, либо ссылки на ячейку, например `B2`. Аргумент __ДатаОкончания__ также может содержать функцию [`СЕГОДНЯ`](https://support.office.com/ru-ru/article/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F-%D0%A1%D0%95%D0%93%D0%9E%D0%94%D0%9D%D0%AF-5eb3078d-a82c-4736-8930-2f51a028fdd9).

# Обработка исключений #
В текущей версии аргументы никак не проверяются на допустимость ввода. Пожалуйста, будьте внимательны, когда вводите:
* аргумент, не являющийся датой
* дату окончания раньше даты начала
* дату окончания дальше текущего года
* дату начала раньше `1 января 1998 года`

# Доработка #
Модуль планируется дорабатывать по мере выхода данных об инфляции и при обнаружении критических ошибок.

# Лицензия #
Copyright &copy; 2018 Denis Mokhin по лицензии [MIT](LICENSE)."
165,LBJ-Wade/InflationSimulator,Mathematica,"# Inflation Simulator
Code for simulating inflation, including multiple field Lagrangians with non-canonical kinetic energy.

## Overview

To demonstrate some functionality of the package, let's consider a two-field potential with a saddle point:

![image](https://user-images.githubusercontent.com/1479325/57750434-df54bf80-76a7-11e9-8264-22665d35739e.png)

![image](https://user-images.githubusercontent.com/1479325/57750380-aa486d00-76a7-11e9-8727-5adcf86461c4.png)

We can obtain equations of motion for this potential by using `InflationEquationsOfMotion`:

![image](https://user-images.githubusercontent.com/1479325/57750454-f5fb1680-76a7-11e9-8a08-db3cfe1586ec.png)

Here `n[t]` stands for the number of e-foldings. We can use these equations to produce an evolution of the fields and the number of e-foldings over time, starting for example with initial conditions `a[0] = 5`, `a'[0] = 0`, `b[0] = 0.2`, `b'[0] = 0` using `InflationEvolution`:

![image](https://user-images.githubusercontent.com/1479325/57750487-1c20b680-76a8-11e9-9785-ee340e8699d9.png)

We get `InterpolatingFunction`s and some extra information such as the total number of e-foldings. If we plot evolution of the fields over time, we can see that the fields reach the saddle point, and ""slow-roll"" through it for some time:

![image](https://user-images.githubusercontent.com/1479325/57750573-65710600-76a8-11e9-87a1-acc81d7a706b.png)

Let's plot that against the potential to see the trajectory of the fields:

![image](https://user-images.githubusercontent.com/1479325/57750671-bd0f7180-76a8-11e9-862d-89dbe81a79d5.png)

We can check if this particular model is consistent with experimental constraints. One way to do that is to evaluate the ratio of tensor-to-scalar power spectra, and the scalar spectral index, assuming horizon exit for the scale we see today occured 60 e-foldings before the end of inflation:

![image](https://user-images.githubusercontent.com/1479325/57750755-18416400-76a9-11e9-9c36-c78f1730d4d0.png)

Let's check if that's in experimental range:

![image](https://user-images.githubusercontent.com/1479325/57750866-8128dc00-76a9-11e9-8de5-5aae2cba24bf.png)

What if we change the initial value of `b`? Let's plot the scalar spectral index against it:

![image](https://user-images.githubusercontent.com/1479325/57751141-60ad5180-76aa-11e9-8570-93f2f6b6213e.png)

It appears we can get experimentally allowed values near `b[0] = 0.05`. Let's try it:

![image](https://user-images.githubusercontent.com/1479325/57751226-a407c000-76aa-11e9-888a-a75e3d443c44.png)

It is consistent! So, we have found an inflation model (albeit with a non-physical potential) that is consistent with experimental constraints on scalar spectral index and tensor-to-scalar ratio.

## Build

1. Open the project in Wolfram Workbench using File -> Open Projects from File System..., and selecting root repository directory.
2. Open Window -> Show View -> Application Tools.
3. Select `InflationSimulator` as a project.
4. Click Build to build documentation.
5. Click Deploy Application, and select a directory to put a temporary deployed package.
6. Make sure all files selected, click Next. Make sure documentation is selected, click Finish. A new directory `InflationSimulator` will be created in a directory specified.
7. Open Mathematica, and evaluate ```PacletManager`PackPaclet[""path_to_newly_created_InflationSimulator_directory""]```. The output will be the path to the compiled paclet.

## Install

Evaluate ```PacletManager`PacletInstall[""path_to_paclet""]```, where `path_to_paclet` is the path to the `.paclet` file, which can either be downloaded from releases page, or build using the steps above.
"
166,Duttabhi/Inflation-Prediction-with-Fuzzy-Logic,Jupyter Notebook,"# Hybrid combination of Fuzzy Logic and LSTM.

Inflation Prediction of Agricultural Products Using Fuzzy Inference System.

**Dataset: Wholesale price for agricultural commodities ([WPI](https://eaindustry.nic.in/)).**

***Objective**: Devise time series prediction techinques which would work for small data set.*

*Research Paper published at [11ICCCNT](https://11icccnt.com/) is included in the repository.*

*An Android Application named **PREDICTR** is also under development.*

**Abstract**
Predictions based on Sequential Data such as timeseries
data of agricultural product prices play a crucial role in
agriculture-based business. Determination of inflation in prices
help farmers and associated businesses to take corrective measures
for higher returns. However, unavailability of enough collective
and accurate data for Indian Markets challenges accuracy.
This paper captures the advantage of NN (Neural Networks) and
FZ (Fuzzy Systems) for predictions based on time series analysis
with limited data. NN learn by adjusting the weights between
connecting neurons. This helps in pattern recognition of similar
data points. Recent developments in DL (Deep Learning) such
as the RNN (Recurrent Neural Network) variant, LSTM (Long
Short Term Memory) dominates the trade market predictions.
LSTM solves the gradient descent problem of traditional NN and
remembers temporal patterns. FZ, on the other hand, helps in
making inference about human cognition through membership
functions. Learning capabilities of NN and Fuzzy rules form the
novel Neuro-Fuzzy system termed as FLSTM (Fuzzy-LSTM).
Further, the data set contains monthly wholesale prices published
by the Ministry of Commerce and Industry, Govt. of India for
essential agricultural commodities. The evaluation based on the
proposed work shows decent improvement than some standard
DL model for various entities when subject to limited records.

**Supporting images**

                                            Comparison of LSTM and Fuzzy Models for Onion data set.
                                              
<img src=""https://github.com/Duttabhi/Predictions-for-small-dataset/blob/master/comparison-lstm-fuzzy.jpg"" width=""700"">

                                                Results over Onion prices dataset.
                                                
<img src=""https://github.com/Duttabhi/Inflation-Prediction-with-Fuzzy-Logic/blob/master/OnionPredictions.png"" width=""700"">

                                Work Flow of the system(with working prototype of Android Application).

<img src=""https://github.com/Duttabhi/Predictions-for-small-dataset/blob/master/work%20flow.png"" width=""700"">

                   Android Application Sample Image(Generating prediction graph for Onion Data set).
<img src=""https://github.com/Duttabhi/Inflation-Prediction-with-Fuzzy-Logic/blob/master/potrait2.jpeg"" width=""500"">
"
167,FCAI00/inflation,Python,"# tic tac toe
"
168,Thue/inflation,HTML,"# inflation
Web page to show inflation for DKK
"
169,dwangdi22/Inflation,R,"# Inflation
Inflation Analysis
"
170,UtsabKafle/inflation,JavaScript,"# inflation
Personal finance tracer (web based)


What do we need in a simple finance tracker app?

    expenses:
        -tracks amount, date and reason for expense(text)
        - cateogorize the expenses.(food, investments, bills, etc)
    
    earnings:
        - tracks amount, date, reason(text)
        - cateogorize the earnings.(side hustles, investments, salary)
    
    investments:
        * when investing subtract the amount from the principle and add as gain when gaining the returns.
        - tracks company name, date, amount
        - summarize the profits, company and losses.
        

![Screenshot (185)](https://user-images.githubusercontent.com/84917432/181174902-098f0885-f7ca-4e35-bf8d-35779eacdba7.png)
![Screenshot (186)](https://user-images.githubusercontent.com/84917432/181174915-52ce7263-a277-448e-aaea-38e5df980ccb.png)

![Screenshot (188)](https://user-images.githubusercontent.com/84917432/181174867-422d9d1f-fcaa-4838-8d29-f0be2a2b54c1.png)
"
171,esthermead/inflationRate,Jupyter Notebook,# inflationRate
172,derek-l-thomas/InflationAdjuster,,
173,stevetointon/InflationCalc,Swift,"# InflationCalc

Created iOS application throught Xcode using Swift to calculate previous dollar amount in todays terms. 
Used formula to add inflation since year user inputed into interface to calculate dollar ammount in todays value. 
"
174,dimitriPocheron/InflationCalc,Java,
175,Mateja3m/inflationCalculator,CSS,"# inflationCalculator
App build using only html, css and plain javacript
"
176,AAKatsko/inflation2,C#,
177,electrostat/InflationCalculator,Swift,
178,inflationpartners/inflationsite3,CSS,
179,nzbaida/InflationModel,R,
180,yujung7768903/InflationStudy,Java,"# InflationStudy
> inflation 공부를 위한 쉬운 예제      
> 참고 : https://rina214.tistory.com/22    
> 참고 : https://zion830.tistory.com/16
> 참고 : https://www.crocus.co.kr/1584
> 위 블로그 예제를 따라해보며 공부함

### Inflation
xml 파일과 java 코드를 연결하는 과정을 인플레이션이라고 한다.      
xml은 레이아웃을 정의한 파일인데 정의하고 끝이 아니라, 자바 코드에서 setContentView()와 같은 메소드를 이용하여 xml 파일 내용을 객체화해줘야 참조할 수 있다.

### 부분 화면 - LayoutInflater
setContetnView() 메소드를 사용하면 화면 전체에 레이아웃이 띄워지기 때문에, 부분적으로 다른 xml내용을 추가하고 싶을 때는 LayoutInflater라는 클래스를 이용한다.         
이 클래스는 xml에 정의된 resource를 View 객체로 반환해준다.

### 동작 화면
<img width=""474"" alt=""inflater study 동작 화면"" src=""https://user-images.githubusercontent.com/68562176/117848435-45d43e80-b2be-11eb-93e2-5cce290c7d9d.png"">

### 주요 코드
**main_item.xml**을 activity_main.xml의 **content**라는 아이디를 가진 LinearLayout에 **추가**
```
inflaterBtn = (Button) findViewById(R.id.button);
content = (LinearLayout) findViewById(R.id.content);

inflaterBtn.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
        LayoutInflater layoutInflater = (LayoutInflater) getSystemService(getApplicationContext().LAYOUT_INFLATER_SERVICE);
        layoutInflater.inflate(R.layout.main_item, content, true);
    }
});
```
"
181,Albert-Lepree/InflationScraper,Python,
182,libbytheoharis/inflationApp,JavaScript,
183,Tapiwap/InflationAnalysis,Jupyter Notebook,"										INFLATION-GDP DATASET
										
DESCRIPTION

This is an analysis of the trends in the GDP inflations of 4 countries; Botswana, Zimbabwe, South Africa and Namibia.

The analysis is performed in python using a library called Pandas.

"
184,LayMui/InflationCalc,Java,"# Instructions
1. npx react-native init InflationCalc (refer to https://reactnative.dev/)
2. cd InflationCalc
3. cd ios
4. pod install
5. In xcode, open InflationCalc.xcworkspace and build to make sure it can build successfully.

6. npm install appcenter appcenter-analytics appcenter-crashes --save-exact

6a. cd ios and run pod install --repo-update to install cocoapods dependencies

7. Open the InflationCalc.xcworkspace in xcode
8. Create a new file AppCenter-Config.plist 
    Right click to Create file Go to Resource section and select PropertyList
    Add the content
    <dict>
    <key>AppSecret</App>
    <string><Copy and paste from AppCenter Copy Secret of the app></Copy></string>
  </dict>

  9. https://appcenter.ms/orgs/LayMuiQA_testing/apps/InflationCalc
  Go to AppDelegate.m
  Add 
    #import <AppCenterReactNativeShared/AppCenterReactNativeShared.h>
    #import <AppCenterReactNative.h>
    #import <AppCenterReactNativeAnalytics.h>
    #import <AppCenterReactNativeCrashes.h>

    Add these lines to the didFinishLaunchingWithOptions method before the 
    return YES;

    [AppCenterReactNative register];
    [AppCenterReactNativeAnalytics registerWithInitiallyEnabled:true];
    [AppCenterReactNativeCrashes registerWithAutomaticProcessing];


```
gem uninstall cocoapods
gem uninstall cocoapods-core
gem uninstall cocoapods-downloader
gem install cocoapods
```


# Steps: 
```
sudo xcodebuild -license
rvm reinstall 2.6.6
sudo gem install cocoapods
pod --version
```

On android
```
go to main
create a folder called assets
and under assets, create a file called appcenter-config.json
with the content
{
    ""app_secret"" : ""xxxx""
}
Navigate to App center and copy the app secret for android app
Go to res folder
Go to values folder
and open strings.xml
add the following:
<string name=""appCenterCrashes_whenToSendCrashes""
            moduleConfig=""true""
            translatable=""false"">ALWAYS_SEND</string>
<string name=""appCenterAnalytics_whenToEnableAnalytics""
    moduleConfig=""true""
    translatable=""false"">ALWAYS_SEND</string>
```
  "
185,DinoStrate/InflationGame,CSS,# InflationGame
186,n1b0rh00d/InflationCalculator,JavaScript,
187,kayraince/inflationCalculator,Python,
188,ForthrightOwl/InflationDashboard,Python,"# InflationDashboard

The project contains a data folder and 2 python files.
Main.py file is an inflation analysis dashboard while data_generator.py updates the inflation data in the data folder from the bls API.
Main.py should work as is, data_generator.py will require an API key which you can obtain for free from: https://data.bls.gov/registrationEngine/

In the data folder data files are updated from the data_generator.py with the exception of the relative importance file. It has to be updated manually,
however new data is only released every December.
"
189,hslil25/InflationAdjuster,Java,
190,katye333/InflationCalculator,Java,"# InflationCalculator

## CI/CD Experiments 
"
191,MihaelaO6/InflationCalculator,CSS,"# InflationCalculator

https://mihaelao6.github.io/InflationCalculator/
"
192,grakseasy/InflationCalculator,HTML,"# InflationCalculator, built with Javascript

The calculator takes an inflation rate, the amount of money and a period of time and calculates how much the given amount of money will be worth in the given time period with the provided rate. 
---------------------------------
![calculator](https://user-images.githubusercontent.com/48414851/181841315-288634f5-116d-4f79-a6e0-997c17c9c2d2.PNG)
"
193,marco2012/InflationCalc,Swift,"# **Inflation Calculator**

Permette di calcolare il potere di acquisto di dollaro, sterlina britannica e lira italiana nel corso dei secoli.

I tassi di inflazione storici sono presi da varie fonti e permettono di risalire al valore del dollaro a partire dal 1774, della sterlina a partire dal 1751 e della lira italiana a partire dal 1861.

Ad esempio, un hamburger da McDonald's in dollari del 1956 costava $0,15 , che corrispondono a €1,39 in valuta corrente.

<p align=""center"">
  <img src=""img/1.jpeg"" width=""250"" />
  <img src=""img/2.PNG"" width=""250"" /> 
  <img src=""img/3.PNG"" width=""250"" />
</p>

"
194,deyanmihaylov/InflationModels,Python,"# InflationModels
"
195,EconMike/InflationCode,R,"# InflationCode
This link was made so that others would be able to learn how to reproduce the plot for measuring inflation using different economic indicators while determining if 
recent concerns of inflation are valid. 
Thank you for coming! 
"
196,NevenaDarijevic/InflationCalculator,,# InflationCalculator
197,Asuki/InflationCalculatior,Java,
198,vasarm/InflationPy,Jupyter Notebook,"
# InflationPy


InflationPy is a package which uses inflation formulation in scalar–tensor theory to make calculations.

Theory contains three free functions $A(\phi)$, $B(\phi)$ and $V(\phi)$ which are used in action

$S = \int d^4x \sqrt{-g} [ \frac{M_p^2}{2} A(\phi)R  -\frac{1}{2}B(\phi)g^{\mu \nu} \nabla_{\mu} \phi \nabla_{\nu} \phi -  V(\phi) ]$



Action can be formulated by invariant quantities as (in Einstein frame)

$S = \int d^4x \sqrt{-g} [ \frac{M_p^2}{2} R  -\frac{1}{2}g^{\mu \nu} \nabla_{\mu} I_\phi \nabla_{\nu} I_\phi -  I_V(I_\phi) ]$



Problems what currently can be solved:

1. Find model predictions for observables ($n_s$ - scalar spectral index, 'r' tensor-to-scalar ratio)
2. Given two functions from (A, B, V) and also invariant potential then find third function.
3. Einstein and Jordan frame N-fold difference
4. Comapre model defined with A, B, V functions and model defined withinvariant potential.


## Installation

### Install using pip
Install the InflationPy package:
```
pip install inflationpy
```
"
199,bklifek/inflationhr95,,"# inflationhr95
what teams are tackling inflation
"
200,PedroBDBaptista/InflationDSystem,Mathematica,
201,revmitcz/inflation,JavaScript,"inflation
=========

This is a simple lookup service to determine the inflation-adjusted value of money at a given point in time.  It's online at [in2013dollars.com](http://www.in2013dollars.com).

This fork is in use at [intodaysdollars.com](http://www.intodaysdollars.com).
"
202,titilas/inflation,,"# inflation
R Code to download Colombia CPI from DANE, process data, calculate main CPI indicators, and make some plots.
"
203,richftw/inflation,,
204,emgun/Inflation,Jupyter Notebook,"# Inflation
Numerical analysis of the slow roll approximation of inflation
"
205,economics-databases/Inflation,,
206,jwalsh160/Inflation,,"# Inflation
exploration of CPI data
"
207,Kevin-Pember/InflationCompair,JavaScript,"# InflationCompair
A javascipt thing (not really a web app) that compairs ETFs that say that they are secured against inflation

Uses yahoo fiance data and Nasdaq data link

"
208,sasamarjanovic295/InflationCalculator,CSS,
209,toofarm/InflationCalculator,Svelte,"# 💰 Inflation Calculator

A small app that allows users to calculate inflation over time. Bootstrapped with Svelte and Vite

## Development

To run the app in development mode, issue the following commands:

```bash
npm i
npm run dev
```
## Technical considerations

**Why `global.d.ts` instead of `compilerOptions.types` inside `jsconfig.json` or `tsconfig.json`?**

Setting `compilerOptions.types` shuts out all other types not explicitly listed in the configuration. Using triple-slash references keeps the default TypeScript setting of accepting type information from the entire workspace, while also adding `svelte` and `vite/client` type information.

**Why include `.vscode/extensions.json`?**

Other templates indirectly recommend extensions via the README, but this file allows VS Code to prompt the user to install the recommended extension upon opening the project.

**Why is HMR not preserving my local component state?**

HMR state preservation comes with a number of gotchas! It has been disabled by default in both `svelte-hmr` and `@sveltejs/vite-plugin-svelte` due to its often surprising behavior. You can read the details [here](https://github.com/rixo/svelte-hmr#svelte-hmr).

If you have state that's important to retain within a component, consider creating an external store which would not be replaced by HMR.

```js
// store.js
// An extremely simple external store
import { writable } from 'svelte/store'
export default writable(0)
```
"
210,jlopp/bitcoinflation,PHP,"# bitcoinflation
A Collection of Unique Bitcoin Price Charts
"
211,gigal0l/InflationRate,Swift,
212,MrVideo/InflationCalculator,Python,"# Inflation Calculator

### English

This calculator takes inflation in account to convert the value of Euro to the old Italian Lira and viceversa.

Inflation data provided by [ISTAT](http://seriestoriche.istat.it/fileadmin/documenti/Tavola_21.6.xls) and formatted into `.csv` by me.

---
### Italian

Questo programma calcola il valore dell'Euro in Lire e viceversa tenendo conto dell'inflazione.

Dati sull'inflazione forniti dall'[ISTAT](http://seriestoriche.istat.it/fileadmin/documenti/Tavola_21.6.xls) e formattati in `.csv` da me."
213,katye333/InflationCalc,Java,"# InflationCalc
Learning about CI/CD via AppCenter

iOS: 
[![Build status](https://build.appcenter.ms/v0.1/apps/4176789b-21c1-4282-aa89-71ceb14f0087/branches/dev/badge)](https://appcenter.ms)

Android: 
[![Build status](https://build.appcenter.ms/v0.1/apps/7b84a7d0-8830-4881-884e-028ef50522e1/branches/dev/badge)](https://appcenter.ms)
"
214,johnpm-12/inflationdeflationerc20,JavaScript,
215,abdulla401/InflationCalc,,# InflationCalc
216,williams-enabulele/InflationCalc,Java,
217,tomsaunders98/InflationCalc,CSS,
218,adamoxford/InflationData,R,"# InflationData
This is an R script for manipulated data produced by the IMF in order to extract African countries from a larger  dataset.
"
219,ttvrdic/inflation,JavaScript,"--INFLATION DIAGRAM--

- still under heavy dev..
"
220,ratulesrar3/inflation,JavaScript,"# Inflation Index Exploration
Repository for d3-based visualization project 
"
221,florjaco/Inflation,R,"# Inflation
Monthly Inflation rates downloaded from IPConlinehttps://ipconlinebb.wordpress.com/) were used to fit an 
ARMA model and forecast inflation rates for the following 10 months.
"
222,hyanc/inflation,HTML,"![inflation](https://raw.githubusercontent.com/hyanc/inflation/master/preview.png)

Data source

https://www.bolasalju.com/artikel/inflasi-indonesia-10-tahun/

https://www.bi.go.id/id/statistik/indikator/target-inflasi.aspx

http://lontar.ui.ac.id/file?file=digital/133040-T%2027828-Identifikasi%20faktor-Pendahuluan.pdf
"
223,timmocharis/inflation,Java,
224,hugues-m/inflation,TypeScript,"# Inflation

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 1.0.0-beta.31.

## Development server
Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive/pipe/service/class/module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `-prod` flag for a production build.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).
Before running the tests make sure you are serving the app via `ng serve`.

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).
"
225,fatemehosseininsb/inflation,,
226,levyhot/Inflation,,"# Inflation

## TEST"
227,ashernoel/inflation,Jupyter Notebook,"# inflation
Using Google and Twitter to Inform CPI
"
228,nmecsys/inflationApp,R,"# inflationApp
Shiny app para análise da inflação
"
229,MichaelPRivera/InflationProject,HTML,# InflationProject
230,dcenteno99/InflationLimit,MATLAB,
231,mishadovhiy/inflationApp,Swift,
232,heythisispaul/inflationBot,,"# inflationBot
A RedditBot that will give you the value of money adjusted for inflation
"
233,SepehrBorji/InflationCalculator,Python,"# InflationCalculator
Using a (very) rough estimate approach, this program will calculate the inflation rate in Canada and convert to CAD of a certain year

![Inflation Rate Calculator Cover Image](https://github.com/BrosephB/InflationCalculator/blob/main/Social%20cover.png)
"
234,yudumpacin/InflationRates,Jupyter Notebook,"# InflationRates
WorldBank Inflation Rate Data Analysis
"
235,paholg/inflation,TeX,
236,pgooch/inflation,PHP,"# Inflation Class

A simple PHP function to either calculate inflation locally or to scrape the http://data.bls.gov/ inflation calculator for the adjustment.

### Requirements
This function requires cURL access if you wish to scrape the bls.gov calculator for your answer. 

Using the update script requires a BLS API key and a little extra setup, check inflation.update.php for details.

### Usage
After including the class call one of the following functions:

- `adjust($amount,$in_year,[$like_year],[$round_to])` will adjust the `$ammount` as if was in `$in_year` like it was `$like_year`. With this function you do not need to call the `$like_year`, if you lave it absent it will automatically fill it for the latest possible date (the last month of the last year of data). This function uses the internal CPI data table and therefore can do inflation down to the month. Various month formats should be usable, but it only supports month and year combinations (like 10/1999 or 1987-4). Passing the optional `$round_to` variable will adjust the number of places after the decimal. This will return the adjusted value of today and throw a notice if there was an error.

- `grabAdjustment($ammount,$in_year,[$like_year])` will adjust the `$ammount` as if was in `$in_year` like it was `$like_year`. Like with the above if you omit the `$like_year` it will pull for the current year. Since this one puuls from the CPI calculator is cannot do to-the-month adjustments. This will return the adjusted amount or an error message. This is a static function so it can be called directly, but it is also substantially slower because it has to cURL the bls.gov website for the information and for that reason is not recommended.

- `data_updated()` will return the last time the data was updated in a user readable format (ie December 2014).

Example useage can be found in examples.php. In addition a cli tool is included to get adjusted values from the command line. This is very basic and take 2 or 3 arguments; amount, original date, and an optional current date and outputs the adjusted. 

### About the data
The data used in internal calculations is gathered from the latest report from http://www.bls.gov/cpi/tables.htm in Table 24. It is stored in a multi-dimensional array in a `array($year => array($avg, $jan, $feb...),...` format. This class will most likely not be updated on a monthly basis as new information is added, and the data does not seem to be updated on a monthly basis, but adding new months of data is simple. If you do go ahead and add new data submit a pull request and I'll incorporate it into the main repository."
237,rbagd/inflation,R,"This small project uses mostly `shiny` and `lattice` packages for `R` to visualize Belgian inflation data as a modest web application. Previous version used `ggplot2` for plotting but `lattice` seems to be more responsive and thus more suitable for such web deployment. Data is imported (and so heavily dependent on its format) from an Excel/CSV file provided by Belgian SPF Economie.

[Project hosting](https://rytis.shinyapps.io/inflation) is kindly provided by RStudio.

* some explanatory notes on this work have also been posted [here](http://rbagd.eu/2014-05-09/visualizing-inflation-data-with-shiny.html)
"
238,dannhek/inflation,R,"# Medical Inflation in Context  
## Motivation
It is often claimed that The Patient Protection and Affordable Care Act (ACA) lowered medical inflation. For evidence of this, people will often point to the fact that medical inflation is at ""historic"" lows:   

| Year| Percent Medical Inflation|
|----:|-----------------:|
| 2013|          2.01%|
| 2014|          2.95%|
| 2015|          2.58%|
| 2016|          4.07%|
| 2017|          1.77%|
| 2018|          2.01%|  

Compared to the early-mid 1990s, these are, indeed, low numbers. However, it is disingenuous to claim that this is the whole story. This simple repository attempts to add context to this simplistic story. Most importantly, inflation as a whole is at historic lows, therefore medical inflation being low is neither surprising nor obviously the result of the ACA.    

## Analysis  
For this analysis, I didn't do any fancy regressions; my goal is merely to put the above numbers in context. Namely, the context of the last 60 years and in context of the core CPI as a whole. To do this, I use the Bureau of Labor Statistics data on medical inflation and core inflation from 1960 through 2018 to construct two graphs. The first shows the trend of these two measures of inflation over time. The second is the actual context. What we care about is not medical inflation _per se_. We care about medical inflation in the context of prices overall. Since the 1960s and before, medical inflation has generally been between 1.5 and 2.0 times core inflation. This overall trend __has not changed__ with the ACA.  
There are three notable exceptions to this:  
1. 1980: In the wake of massive, economy-wide inflation, medical inflation was lower than core inflation. See Graph 1 for details on that context.  
2. 2011: Immediately following the passage of the ACA (I measure inflation from January to January), we see a massive spike in medical inflation relative to core inflation, which is most likely due to core CPI falling dramatically and in the wake of the Great Recession and Medical inflation either being robust to broader economic downturns or increases in prices in response to the possibility of the ACA (probably the former).   
3. 2018: Medical inflation is lower than Core CPI. Like a good economist, I will tell you tomorrow why the predictions I made yesterday didn't come true today. Still, this is a curious data point that does corroborate the hypothesis that the ACA set in motion a trend that is, ever so slowly, curbing costs. Nevertheless, many things have happened since 2010, so to say that this ""good"" data point from 2018 is directly attributable to the 2010 ACA is just naive.  

## Using this code
If you would like to use these images or fork this repo, please, go right ahead. I just ask that you cite me.  

__Suggested Citation__: Hekman, D. J. (2019). _Medical Inflation In Context_. (github repository) https://github.com/dannhek/inflation.git (SHA: \[Commit SHA you used\]). \[date you acessed this\].

##### Using Keyring to account for your password  
If you want to fork this repo, read this.   
The BLS API has limits on how much data you can pull per day ([see website](https://www.bls.gov/developers/api_faqs.htm)). You can substantially increase that limit by registering with them and getting a user key. User keys are free, but they are uniquely identifiable, so I don't recommend hard-coding them. Use `keyring` instead:  
```r
library(keyring)
key_set('blsAPI')
# Enter your key into prompt
# BLS documentation uses 995f4e779f204473aa565256e8afe73e as an example key, so I will too
```  
This will allow you to replace this example
```r
#Example from BLS API Website:
payload <- list(
'seriesid'=c('LAUCN040010000000005','LAUCN040010000000006'),
    'startyear'=2010,
    'endyear'=2012,
    'registrationKey'='995f4e779f204473aa565256e8afe73e')
```  
with this example:  
```r
library(keyring)
#Example from BLS API Website:
payload <- list(
'seriesid'=c('LAUCN040010000000005','LAUCN040010000000006'),
    'startyear'=2010,
    'endyear'=2012,
    'registrationKey'=get_key('blsAPI'))
```"
239,maalokweng/inflation,,
240,AlexanderIbrahim1/Inflation,Julia,"# Inflation

## Homework 4 for PHYS 776

A collection of functions that use `Convex.jl` to check the compatibility of probability distributions with different inflations of the triangle causal model.

A probability distribution of the triangle causal model can be studied using linear programming by creating an ""inflation"" of the model. By integrating different variables in the model, the probability distributions of the inflated model can be written as linear combinations of marginal distributions of the original model. A matrix *M* of *0*'s and *1*'s keeps track of which terms in the linear system are present, and a vector *b* gives the probabilities in terms of the original distribution from the triangle causal model. The goal is to find a vector *v* that satisfies the matrix equation with *M* to give *b*. The elements of *v* represent probabilities, and thus must be non-negative. The problem of finding *v* can be expressed as the following optimization problem (taken from [1]).

![Alt text](./images/optim1.svg)

If the probability distribution applied to an inflation of a causal model is infeasible, that means the original causal model is also infeasible.

## Instructions

The linear equations are set up using strings of *x*'s and *y*'s to represent which terms in a set of equations are integrated and which are evaluated, respectively. For example, with the Cut inflation, we have the equation

P<sub>*A<sub>2</sub>,B<sub>1</sub>*</sub>(*a<sub>2</sub>, b<sub>1</sub>*) = &Sigma;<sub>*c*</sub> P<sub>*ABC*</sub>(*a,b,c*)  .

On the right-hand side, the parameter *c* is integrated over, while the parameters *a* and *b* are evaluated. Thus this set of equations is represented using ""abc"" => ""yyx"". The same is done for the other linear sets of equations.

The *M* matrix is constructed from the list of these strings alone. Most of the matrix is *0*'s, and the locations of the *1*'s can be found from binary combinations of the associated strings. For example, ""00x"" corresponds to the first row in the *M* matrix, and replacing the ""x"" with ""0"" and ""1"" gives ""000"" and ""001"", indicating that the *1<sup>st</sup>* and *2<sup>nd</sup>* terms in the first row are *1*'s. Similarly, the *b* vector can be constructed from the same strings, along with the probability distribution function.

## Example

```Julia
# the probability matrix is set up as
# P_{A2,B1} = sum_{C1}P_{A2,B1,C1}   --> 'yyx'  (3rd term is integrated)
# P_{A2,C1} = sum_{B1}P_{A2,B1,C1}   --> 'yxy'  (2nd term is integrated)
# P_{B1,C1} = sum_{A2}P_{A2,B1,C1}   --> 'xyy'  (1st term is integrated)
infl_strings = [""yyx"", ""yxy"", ""xyy""]

# creating the M-matrix and b-array to be used in the Convex.jl optimization
M = get_M_matrix(infl_strings)
b = get_b_array(infl_strings, pfunc1, cut)

# the variables that get optimized by Convex.jl
v = get_v_array_Variable(infl_strings)

# set up the objective and constraints
objective   = 0
constraints = [v >= 0, M*v == b]

# create the problem and solve
problem = Convex.maximize(objective, constraints)
solve!(problem, GLPK.Optimizer, verbose = false)

# return the results
if problem.status == Convex.MathOptInterface.INFEASIBLE
	println(""Solution is infeasible."")
else
	println(""Solution is feasible."")
	println(""objective = $(problem.optval)"")
	println(""v = $(v.value)"")
end
```

## Problem 1

This problem can be run from `src/problem1.jl`, and checks the feasibility of equation (1) in [1] applied to the Cut inflation for the triangle model. As expected, the distribution and inflation are incompatible.

## Problem 2

This problem can be run from `src/problem2.jl`, and checks the feasibility of equation (16) in [1] applied to the Cut inflation for the triangle model. Different values of *t* between *0* and *1* are used, and by gradually improving the resolution of *t*, it was found that, up to six decimals, distributions using values of *t* between *0.000000* and *0.625000* (or 5/8) are compatible with the Cut inflation.

## Problem 3

This problem can be run from `src/problem3.jl`, and checks the feasibility of equation (17) in [1] applied to the Cut inflation for the triangle model. As expected, the distribution and inflation are compatible. However, the distribution is not compatible with the original triangle causal model [2].

As mentioned in [1], if the linear program is infeasible, it proves that the original system is infeasible. This does not mean that, if the linear program is feasible, that the original system is feasible. As we will see in problem 4, the distribution in equation (17) applied to the Spiral inflation of the triangle model is infeasible.

## Problem 4

I chose to solve the second question. This problem can be run from `src/problem4.jl`, and checks the feasibility of equation (17) in [1] applied to the Spiral inflation for the triangle model. As expected, the distribution and inflation are incompatible.

## References
- [1] https://github.com/PerimeterInstitute/Computational-Physics-Course-Winter-2020/blob/master/class-2020-03-11/Step2_CausalStructures.pdf
- [2] https://github.com/PerimeterInstitute/Computational-Physics-Course-Winter-2020/blob/master/class-2020-03-11/CausalInferencePaper.pdf
"
241,frankij11/inflation,R,# inflation
242,alva922/Inflation,,"# Inflation
Inflation-Resistant Stocks to Buy
AAPL Inflation Resistance Example
Download 3 historical datasets - stock price and monthly/annual CPI 
Compute the monthly/annual stock performance (%) and CPI rate (%) 
Apply linear regression to the stock vs CPI performance cross-plot
Check the slope or gradient of the linear trend - positive, negative or zero.
Read more:
https://wp.me/pdMwZd-xC
"
243,EconMike/InflationProducerPrice,,"# InflationProducerPrice
Line plot showing the 12 month percent change trend in the producer price indexes within the final demand category
"
244,dmastylo/Inflation,Ruby,"# Inflation

This simple gem makes it easy to calculate how much different amounts of money
would be worth in certain years. Years from 1800 - 2012 are supported.

## Installation

Add this line to your application's Gemfile:

    gem 'inflation'

And then execute:

    $ bundle

Or install it yourself as:

    $ gem install inflation

## Usage

```ruby
require 'inflation'

# Return the value (rounded to 2 decimal points)
1.from(1800).to(2012)

# Or, if you like more English sounding method chaining...
1.from_1800.to_2012

# Even better, you can use from_now and to_now instead of the year
1.from_now.to_2010
1.from_1898.to_now

# Return true if the year is supported.
1840.year?
=> true

1784.year?
=> false
```

## Contributing

1. Fork it
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create new Pull Request
"
245,simplizm-company/inflation,JavaScript,"# eclipse
jQuery slider plug-in 입니다.

demo : https://simplizm-company.github.io/eclipse/
"
246,SofianeBo/Inflation,Mathematica,"# Inflation

This code calculates the predictions of cosmic inflation for single field inflatons. The code includes the two non-standard cases of the presence of quantum corrections to the potential and of non-minimal coupling of the inflaton to gravity.

This code was used for the cosmo calculation of these papers:
* Inflation and majoron dark matter in the seesaw mechanism. Published in Phys.Rev. D90 (2014) no.5, 055023. e-Print: arXiv:1404.3198
* Axion inflation, proton decay, and leptogenesis in SU(5)xU(1)PQ. Published in Phys.Rev. D97 (2018) no.7, 075012. -Print: arXiv:1712.06526
"
247,cbrunet93/inflation,Jupyter Notebook,
248,AsherDvirDjerassi/inflation,R,"# inflation
This repo houses R scripts and csvs used to decompose inflation and visualize that decomposition. 

Inflation is measured using the Bureau of Economic Analysis's (BEA) measure, Personal Consumption Expenditure (PCE).

The contribution of inflation to overall trends is weighted using Table 2.4.5U. Personal Consumption Expenditures by Type of Product.

## PCE

PCE is the share of GDP that is associated with consumption in an expenditure based definition of GDP - i.e., Y = C + I + G + X - M. This share of GDP has seen a relatively monotonic rise over the last half century. The difference between PCE as a share of GDP in the mid-1970s and today raises questions about its ability to be used for purposes of comparison between the two periods. However, the same concerns could reasonably be raised for CPI. PCE does not include expenditure related to the purchase of residential real estate; such purchases are in the category Gross private domestic investment. 


<img src=""figures/fredgraph.png"" width=""600"">

## PCE product type catergories

PCE is decomposed into product type catergories. The broad product types catergories are durable good, non-durable goods, and services. Each of these product type catergories can be further decomposed. 

<img src=""figures/pce_cat_q1_2022.png"" width=""500"">

## Preferred product type catergory decomposition

The BEA decomposes PCE into relatively granular subcatergories; this content is housed in [Table 2.4.5U. Personal Consumption Expenditures by Type of Product](https://apps.bea.gov/iTable/iTable.cfm?reqid=19&step=3&isuri=1&1921=underlying&1903=2017#reqid=19&step=3&isuri=1&1921=underlying&1903=2017). 

Our preferred product type catergory decomposition for the purposes of making sense of contemporary inflation focuses on the following subcatergories: 
  Imputed rental of owner-occupied nonfarm housing (services)
  Rental of tenant-occupied nonfarm housing (services)
  New motor vehicles (durable goods) 
  Net purchases of used motor vehicles (durable goods)
  Transportation services (services)
  Electricity and gas (services) 
  Gasoline and other energy goods (non-durable goods)
  Health care (services)
  
 <img src=""figures/pce_cat_of_interest.png"" width=""600"">
 
 ## PCE price indexes
 
 PCE price indexes for each PCE catergory and subcatergory are housed in [Table 2.4.4U. Price Indexes for Personal Consumption Expenditures by Type of Product](https://apps.bea.gov/iTable/iTable.cfm?ReqID=19&step=2#reqid=19&step=2&isuri=1&1921=underlying)

 <img src=""figures/price_change.png"" width=""600"">
 
 ## Housing component of inflation
 
 1) Forces specific to rental markets: a) renters having more cash on hand due to UI, stimulus, and rental assistance programs, b) more churn in the rental market allowing for prices to increase (think of more people breaking leases or not renewing) - prices become less sticky, c) people fanning out from high rent cities to lower rent places and holding different reservation prices d) all in the context of pre-covid tendencies for greater concentration in rental markets. 

2) Forces specific to real-estate markets: a) lower interest rates due to fed policy and, possibly, other covid relevant forces that pushed down interest rates, b) increased demand for houses due to covid (eg moving to the suburbs or deciding to invest now), c) forces specific to “demographics” - millennials at the age where they begin to invest, d) robust job market due to massive stimulus leading to increased demand for housing, e) all within the context of pre-covid real-estate asset price inflation tendencies (which I’ll layout in the next text)

Forces specific to real-estate markets have influence on rental markets for the simple reason that they are dealing in the same product. If the net present discounted value of rents are not equivalent to the sale price of the same unit, there is an opportunity cost to keep the unit/house as a rental rather than sell it. Therefore, there is a tendency for rental prices to increase as real-estate prices. 

*pre-covid forces related to asset price inflation in real-estate markets: Step 1) Income inequality increases; Step 2) The rich save/invest a greater share of their income than lower incomes people, and in turn invest in assets (including real-estate); Step 3) Unlike financial assets, the supply of real estate is relatively inelastic (e.g., there is only so much land), therefore with more money cashing after the relatively same amount of stock, prices are pushed upward; Step 4) As prices of these assets increase, the owners of real estate assets have more wealth, and via more wealth they see more capital income (e.g., via ground rents or through realized capital gains from the sale of their real estate); Step 5) With more capital income from real estate (which is concentrated at the top of the distribution), a greater share of national income is re-invested in real estate; Step 6) These processes loop and reinforce themselves, further pushing up real estate asset prices. 

 ## References
 
[Brookings](https://www.brookings.edu/blog/up-front/2022/05/18/how-does-the-consumer-price-index-account-for-the-cost-of-housing/)
 
[New York Fed](https://libertystreeteconomics.newyorkfed.org/2022/04/inflation-persistence-how-much-is-there-and-where-is-it-coming-from/)

[St.Louis Fed](stlouisfed.org/on-the-economy/2022/mar/breaking-down-contributors-high-inflation)

Bauer, Andrew, Nicholas Haltom, and William Peterman. ""Decomposing Inflation."" Federal Reserve Bank of Atlanta Economic Review (2004): 39-51. 

Stock, James H., and Mark W. Watson. ""Core inflation and trend inflation."" Review of Economics and Statistics 98.4 (2016): 770-784.
"
249,paulatmg/inflation,JavaScript,
250,zoe454/TVPVAR,MATLAB,
251,ledlaputa72/Android_InflationStudy,Java,
252,Mustimain/InflationRateMachineLearning,Python,
253,rasult22/InflationStoreVueJS,JavaScript,"# InflationStoreVueJS
Online Store created with Vuejs, VueX, VueRouter and FireBase. 

Demo: https://inflationstore-1b560.web.app/

#Try by yourself
1. Clone or download this repository
2. Start:
npm run dev // developing mode
npm run build // production mode
"
254,GulzarAhmedButt/InflationAnalysisUsingPython,Jupyter Notebook,
255,terminal-labs/inflation,Python,"## License

MIT (See LICENSE file).

## Commands

black --line-length 150 .

flake8 --max-line-length=150 .

radon cc .
"
256,dillonchr/inflation,JavaScript,"![](inflation.gif)
# Inflation
This calculates the value of a certain amount of money against a certain year. I'm coming up short on how to generically describe what this module does so I'll just spit it out.

This module tells you how much a certain dollar amount in a certain year is worth today. It uses the US Department of Labor's calculator to get the number. There's actually a lot more accuracy that could be added to this but I'm sticking with just years.

## Install
`npm i @dillonchr/inflation`

## Usage
There are 3 arguments required.

1. `year` - four digit year on or after 1913
1. `amount` - number that will be turned into a float if it isn't already
1. `callback` - with standard (err, result) signature

If the year is less than 1913 you'll get a smart alec response. If the year is the same as this year it'll just respond with your raw amount input. Smart alec response if you ask for future year too. Sorry. Open to PRs :beers:
"
257,mahdanahmad/inflation,JavaScript,
258,Dashtikh/inflation,Java,# inflation
259,jhcwalsh/Inflation,R,
260,jaronritter01/InflationRatePrediction,Jupyter Notebook,
261,ciyer/inflation,Jupyter Notebook,"# Inflation

An exploration of inflation.

| Article                                        | Notebook                           |
| ---------------------------------------------- | ---------------------------------- |
| The Quantity Theory of Money Insanity (Part 1) | [Part1.ipynb](qtm/QTM-Part1.ipynb) |
| The Quantity Theory of Money Insanity (Part 2) | [Part2.ipynb](qtm/QTM-Part2.ipynb) |
| The Quantity Theory of Money Insanity (Part 3) | [Part3.ipynb](qtm/QTM-Part3.ipynb) |
"
262,anna-willmann/Inflation,,
263,P4tt4te/inflation,JavaScript,
264,jjarrin96/inflation,Python,# inflation
265,rlouf/inflation,Python,
266,trevortombe/inflation,R,"# Random Inflation Graphs

This repo contains several regularly updated calculations -- such as the recently terminated aggregate of services excluding shelter services -- and potentially informative visualizations to better understand Canada's recently high rates of inflation.

![](Plots/CoreInflation.png)

![](Plots/EnergyShelterEffect.png)

![](Plots/MainDecomposition.png)

![](Plots/ByProduct.png)

![](Plots/ChangeFeb2020.png)

![](Plots/ProductShare3Plus.png)

![](Plots/ServicesExShelter.png)

![](Plots/PersonalInflation.png)

![](Plots/BoCPath.png)

![](Plots/Expectations.png)

---

![](Plots/gas_tax_ab.png)

![](Plots/Bitcoin.png)
"
267,ghgr/InflationRealTime,HTML,"InflationRealTime
=================

Inflation real time calculator in pure Javascript (no external dependencies or artwork)

You don't need a web server to view it. Just open the index.html file in your web browser.


You can watch a working version <a href=""https://ghgr.github.io/InflationRealTime/"">here</a>
"
268,marco2012/InflationCalcFlutter,Dart,"# Inflation Calculator

Historical inflation calculator, supports US Dollar, British Pound and Italian Lira. 

<div>
<a href='https://play.google.com/store/apps/details?id=inflationcalc2.t00r.me.inflation_calc2'><img alt='Get it on Google Play' src='resources/google_play.png' height='48px'/></a>
</div>

App written with [Flutter](https://flutter.dev).

<p align=""center"">
  <img src=""img/1.jpeg"" width=""250"" />
  <img src=""img/2.jpeg"" width=""250"" /> 
</p>
"
269,Siko91/inflationDataScraper,JavaScript,"
A simple web page scraper that parses information from https://www.inflation.eu/

The results are outputed in the ""results.json"" file."
270,timxiao1203/inflationBondCurve,,"# Inflation linked Bond Curve Introduction

Inflation indexed bonds, also called inflation linked bonds or real return bonds, are bonds where the principal is indexed to inflation or deflation on a daily basis in terms of a reference index, such as Consumer Price Index (CPI). The primary purpose of these bonds is the transfer of inflation risk.

An inflation indexed bond is designed to hedge the inflation risk of the bond. Inflation bonds are an important vehicle for investors hose liabilities indexed to changes in inflation or wages. They have favorable performance and lower volatility relative to other risk assets. It is favorable to retirement planning and pension funds given its inflation protection. Inflation indexed bonds are less liquid than regular bonds.

Inflation linked bonds are mainly issued by government. There is also a small portion of inflation-linked bonds are issued by commercial financial institutions, that are usually treated as government-issued inflation-linked bonds.

Breakeven inflation rates can be found by comparing the zero-yields on inflation-linked and nominal bonds with the same maturity. However, the breakeven yields found this may be affected by the liquidity premium embedded in the bond.


Inflation Linked Bond Curve Data Sample

Inflation linked bond curve is the term structures of the most liquidy inflation bond prices at different maturities. An inflation bond curve same data is shown below:

Currency	Instrument	ValuationDate	Tenor	Price	Yield
GBP	IR.Bond.GBP.GB00B85SF..	2020-11-27	5Y	110.5865	-0.029
GBP	IR.Bond.GBP.GB00B3Y1J..	2020-11-27	10Y	128.673	-0.02901
GBP	IR.Bond.GBP.GB00B46CG..	2020-11-27	15Y	155.7985	-0.02705
GBP	IR.Bond.GBP.GB00B3LZB…	2020-11-27	20Y	176.4815	-0.02449
GBP	IR.Bond.GBP.GB00BZ13D…	2020-11-27	30Y	192.1495	-0.02253
GBP	IR.Bond.GBP.GB00BDX8C…	2020-11-27	50Y	295.1915	-0.02199


References:

https://finpricing.com/lib/EqRangeAccrual.html

https://bitbucket.org/cmrm11/inflationbondcurve/downloads/IrInflationBondCurve-10.pdf

"
271,HackerIndustrial-web3/real-yields-InflationBonds,Solidity,"# real-yields-InflationBonds
Hackathon project utilizing truflation chainlink  oracle for creating digital bonds which pay a real yield adjusted for inflation
"
272,mpfarrho/tvp-qr,R,"Time-varying parameter quantile regression (TVP-QR) model with time-varying scale parameter, proposed in ""Modeling tail risks of inflation using unobserved component quantile regressions,"" Journal of Economic Dynamics and Control. 
"
273,EconMike/InflationReportApril,R,"# InflationReportApril
The Economic Monitor: Inflation report.  The code for the chart is here.  
"
274,Efe-C-3/InflationRateAnalytics,Jupyter Notebook,"# Passion Project: Record high inflation rate in history

While the pandemic environment keeps covering the news headline with new variants of Covid-19, the record high inflation rates of the last three decades made it to the news and got the attention of politicians as well as some consumers. 

Simply, inflation is a general increase in prices of goods and services sold in a year, such as food, electronics, transportation and housing. Such an economic indicator has a direct effect on people’s life on a daily basis.  It means, with inflation, people end up paying more for the same products year over year. 

In my passion project, the goal is to project price changes in different product categories and different business sectors in the last 10 years while looking for a relation in price changes of raw and final products and to see if there is a specific product category that may drive such rates up and that is significantly higher than others.

For this project, I will download a dataset from OECD (Organisation for Economic Co-operation and Development) website, use Python and SQL languages, Pandas and statistics framework, Spark and AWS data pipeline technologies, VS Code visualization tool and Heroku web platform to present analytics publicly. 

Below is a sample blueprint of the resentation of analytics on a website.
![image1](https://github.com/Efe-C-3/InflationRateAnalytics/blob/main/static/New%20Wireframe%201.png)
![image2](https://github.com/Efe-C-3/InflationRateAnalytics/blob/main/static/New%20Wireframe%201%20copy.png)
![image3](https://github.com/Efe-C-3/InflationRateAnalytics/blob/main/static/New%20Wireframe%201%20copy%202.png)

"
275,hubert-mis/R-szeregi,R,
276,UrosNikolic95/InflationMiniExperiment,MATLAB,"# InflationMiniExperiment

Octave script

This experiment was suposed to answer to the question: 
""What would happen if we calculate price over and over again?""

Some observations have been made in this experiment.
1)If efficiancy coeficiant is larger than profit coeficiant, we have deflation.
The eficiancy coeficiant is the ratio  betwen what we produse and what we consume.
If we produce 1.2 times more than we consume then eficiancy coeficiant is 1.2.
For the sake of simplicity simulation uses same eficiancy coeficiant for all resurces.
The profit coeficiant is the ration between seling price and production price.
If the selling price is 1.1 times larger then production price, then profit coeficiant is 1.1.
2)If eficiancy coefficiant is equal to profit coeficiant then prices stay the same.
3)If eficiancy coeficiant is smaler then profit coeficiant, we have inflation, which grows exponentaly, hyperinflation.

4)If eficiancy coeficiant is larger than profit coeficiant, then det(diag(production/profit_coeficiant)-consumption)>0
5)If eficiancy coefficiant is equal to profit coeficiant, then det(diag(production/profit_coeficiant)-consumption)=0
6)If eficiancy coeficiant is smaler then profit coeficiant, then then det(diag(production/profit_coeficiant)-consumption)<0

7)After many iterations, profit_coeficiant/eficiency_coeficiant = (curent price)/(previous price)

The experiment has several problems:
1)It uses idealistic asumptions.
2)We cant take in consideration every factor that exists.
3)We can only use simplified model for experiment.

"
277,pjreij98/InflationGroceryApp,TypeScript,"# InflationGroceryApp
App for checking the price of grocery items on a certain day in the past vs today.
"
278,AdamVicko/JavaScript-InflationCalculator,JavaScript,
279,ckyle6300/InflationFreeUSD,Vue,"# InflationFreeUSD

## Build Setup

```bash
# install dependencies
$ npm install

# serve with hot reload at localhost:3000
$ npm run dev

# build for production and launch server
$ npm run build
$ npm run start

# generate static project
$ npm run generate
```

For detailed explanation on how things work, check out the [documentation](https://nuxtjs.org).

## Special Directories

You can create the following extra directories, some of which have special behaviors. Only `pages` is required; you can delete them if you don't want to use their functionality.

### `assets`

The assets directory contains your uncompiled assets such as Stylus or Sass files, images, or fonts.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/docs/2.x/directory-structure/assets).

### `components`

The components directory contains your Vue.js components. Components make up the different parts of your page and can be reused and imported into your pages, layouts and even other components.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/docs/2.x/directory-structure/components).

### `layouts`

Layouts are a great help when you want to change the look and feel of your Nuxt app, whether you want to include a sidebar or have distinct layouts for mobile and desktop.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/docs/2.x/directory-structure/layouts).

### `pages`

This directory contains your application views and routes. Nuxt will read all the `*.vue` files inside this directory and setup Vue Router automatically.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/docs/2.x/get-started/routing).

### `plugins`

The plugins directory contains JavaScript plugins that you want to run before instantiating the root Vue.js Application. This is the place to add Vue plugins and to inject functions or constants. Every time you need to use `Vue.use()`, you should create a file in `plugins/` and add its path to plugins in `nuxt.config.js`.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/docs/2.x/directory-structure/plugins).

### `static`

This directory contains your static files. Each file inside this directory is mapped to `/`.

Example: `/static/robots.txt` is mapped as `/robots.txt`.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/docs/2.x/directory-structure/static).

### `store`

This directory contains your Vuex store files. Creating a file in this directory automatically activates Vuex.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/docs/2.x/directory-structure/store).
"
280,DIE-BG/InflationFunctions.jl,Julia,"# InflationFunctions

[![Stable](https://img.shields.io/badge/docs-stable-blue.svg)](https://DIE-BG.github.io/InflationFunctions.jl/stable)
[![Dev](https://img.shields.io/badge/docs-dev-blue.svg)](https://DIE-BG.github.io/InflationFunctions.jl/dev)
[![Build Status](https://github.com/DIE-BG/InflationFunctions.jl/actions/workflows/CI.yml/badge.svg?branch=main)](https://github.com/DIE-BG/InflationFunctions.jl/actions/workflows/CI.yml?query=branch%3Amain)

Paquete de Julia con medidas de ritmo inflacionario interanual (funciones de inflación). "
281,ycc1107/InflationLinkedBond,C#,"The theory part:
Pricing inflation linked bond is similar like pricing regular bond with extra inflation adjustment. The formulas for pricing inflation linked bond are as follow:
Bond Price=〖RefCPI〗_maturityDay/〖RefCPI〗_issuedDay ×PV(Par Value)+∑▒〖[PV((coupon rate)/100×day/year)×Par Value)〗×RefCPI/〖RefCPI〗_issuedDay   ]
〖RefCPI〗_j=〖CPI〗_j+(t-1)/D×(〖CPI〗_(j+1)-〖CPI〗_j)
〖Index Ratio〗_j=〖RefCPI〗_j/〖RefCPI〗_(issuedDay  ) 

For each coupon payment and principal payment, the total amount should multiple index ratio which base on CPI on payment day and CPI on issue day. Beside the adjustment of index ratio, the inflation index bond is same as regular bond.  
The code part:
The inputs should include: 
	Settlement days
	National 
	Pricing date
	Issue date
	Maturity date
	Next payment date
	Coupon rate
	CPI growth rate
	Payment frequency 
	Zero coupon bond yield curve
	CPI historical data 
Code flow:
	Construct zero coupon bond yield curve or use existing one
	Calculate refCPI for each payment day
	Calculate CPI adjusted present value of accrued interest 
	Calculate CPI adjusted sum of present value of coupon payments without accrued interest
	Calculate CPI adjusted present value of principal
	Add 4 and 5 to calculate clean price
	Output clean price and accrued interest

The basic theory is following the paper “pricing methodology for inflation linked bond and inflation linked buy/sell-backs” and other reference are “calculation examples for inflation-linked bonds”, “calculation convention for inflation linked bond” 


In the quantlib, it uses bootstrap to forecast the cpi index.
"
282,lynema-dev/InflationSwapRiskLadders,Python,"# inflationswappricing
Pricing module for zero coupon inflation swaps in Python

A zero coupon inflation swap has one leg tied to a fixed rate and the other to a seasonally adjusted inflation series.  A net payment is made between an investor and a counterparty at maturity with not intermediate payments.  

This is a simple model which demonstrates the parts required and uses linear interpolation for computing discount factors and inflation curve projections and combining these to derivatve a present value and a set of risk ladders with respect to the inflation and discount curve.  

No responsibility is taken for the accuracy of this model and is for demonstration purposes only.


![](Figure_5.png)
"
283,pizzanomnommer/Inflation_Simulator,HTML,
284,hendrik49/ews-inflation,JavaScript,"# ews-inflation
EWS Inflation

How to deploy The Early Warning System Inflation

1. Installing NodeJS 
   https://nodejs.org/en/download/
2. Installing PM2 
   npm install pm2@latest -g
3. Installing GIT and cloning project ews-landingpage. 
   git clone https://github.com/hendrik49/ews-landingpage
4. cd to directory ews-landing page execute 
   pm2 start npm --name=inflation -- start
5. Check the web is running by execute
   pm2 status
6. Access the web on http://IP:33333
"
285,emma-jinger/InflationAndSP500,,"# Inflation and S&P 500 Index
## Introduction
This project showcases my attempt to follow the steps of the data analysis process: **ask, prepare, process, analyze, share**, and **act** for my own analysis. 
It aims to educate myself and any stock market novices in investing in funds that mimic S&P 500 index.
## Datasets Used
- S&P 500 index historical monthly data from https://www.investing.com/indices/us-spx-500-historical-data
- Consumer Price Index (CPI) from [U.S. Bureau of Labor Statistics](https://data.bls.gov/cgi-bin/surveymost?cu) 
## Ask 
#### Identify the business task (Two Questions to answer): 
- Is there any correlation between inflation and the S&P 500 index? 
- What does a 10-year return on S&P 500 index fund investment look like?
#### Shareholders 
Beginner investors who seek to invest in funds that mimic S&P 500 Index such as Vanguard 500 ETF (VOO) for a long term.
#### Metrics
Ten year return in investing in S&P 500 index.
## Prepare 
### [S&P 500 index dataset](https://github.com/emma-jinger/InflationAndSP500/blob/main/RawSP500HistoricalData.csv) 
- It was retrieved on May 9, 2022.
- It contains monthly S&P 500 index data between Jan 1990 and May 2022.
- It is used to calcualte 10-year returns investing in funds that mimic S&P 500 index. 
- Disclaimer: Thre returns calculated from this project are only used for references, since dividends, investment management fee and such are not considered during the calculation.
### [CPI dataset](https://github.com/emma-jinger/InflationAndSP500/blob/main/RawCPIData.xlsx) 
- It was retrieved on May 9, 2022. 
- It contains monthly CPI-U (Consumer Price Index for All Urban Consumers) less food and energy data between Jan 1990 and Mar 2022.
- It can be used to [calculate annual core inflation rates](https://www.usinflationcalculator.com/inflation/inflation-vs-consumer-price-index-cpi-how-they-are-different/). 
- The [core inflation rate](https://www.thebalance.com/core-inflation-rate-3305918) excludes food and energy prices because they vary too much from month to month. This exclusion makes the core rate more accurate in measuring underlying inflation trends. 
- Disclaimer: The inflation rates calculated in this project might have some discrepencies with that done by the Federal Reserve.    
## Process
This step is done in Google Sheet. 
### Rationale for using Google Sheet
I chose to process the datasets in Google Sheet because the datasets are fairly small, with 389 records in S&P 500 dataset and 33 records in CPI dataset. Besides, using spreadsheet functions and menu tools to do the initial cleaning like removing duplicate data, checking for incorrectly entered data, and formatting data for consistency is very straightforward.
### What did I do to process the S&P 500 dataset?
1. Checked that there was no duplicate data. 
2. Formatted the column that contains month and year data to the DATE data type.
3. Checked there was no missing month or year.
4. Checked the min and max of each column to make sure there was no incorrectly entered data. 
5. Formatted numbers like 4,123.34 to 4123.34, and percent like -0.21% to -0.21.
6. Added Id column for later use (primary key in PostgreSQL).
7. Sorted date column from old to new. 
### What did I do to process the CPI-U data? 
1. Deleted the description part of the dataset.
2. Checked that there was no duplicate data.
3. Checked that there was no missing year. 
### The cleaned datasets after this step
- [Cleaned S&P 500 data](https://github.com/emma-jinger/InflationAndSP500/blob/main/CleanedSP500HistoricalData.csv)
- [Cleaned CPI data](https://github.com/emma-jinger/InflationAndSP500/blob/main/CleanedCPIData.csv)
## Analyze
This step is done in PostgreSQL. 
### Rationale for anaylzing the data using PostgreSQL. 
I chose to use a SQL database because of its fast and powerful functionality. Simply write down all I want to do with the data in a query, I will get the transformed data in merely several seconds. The queries also enables traceability of my analysis. 
### What did I do to analyze the cleaned data? 
- **[S&P 500 and Inflation Query](https://github.com/emma-jinger/InflationAndSP500/blob/main/SP500AndInflation_query.sql)** 
  1. Calculated the annual inflation rate
  2. Transformed CPI table to resemble the organization of the cleaned S&P 500 table
  3. Created a new table [SP500AndInflation](https://github.com/emma-jinger/InflationAndSP500/blob/main/SP500AndInflation052522.csv) by joining with the S&P 500 table
- **[S&P 500 10 Year Return and Inflation-adjusted Return Query](https://github.com/emma-jinger/InflationAndSP500/blob/main/SP500Return_query.sql)** 
  - Created a new table [SP500TenYearReturn&Adjusted](https://github.com/emma-jinger/InflationAndSP500/blob/main/SP500TenYearReturn%26Adjusted052422.csv) that contains 10 year returns and adjusted 10 year returns on S&P 500 
## Share
The visualizations were created using [Tableau Public](https://public.tableau.com/app/profile/emma.li2382/viz/SP500VsInflation_052422/InflationVsSP500) and the slides were created in Gooogle Slides. 

An accompanying slides are [here](https://www.thebalance.com/best-time-to-invest-in-index-funds-2466412) to share my analysis. 
### A scatter plot 
The following plot is used to show any correlation between inflation rate and S&P 500 index. 
![scatterplot](https://github.com/emma-jinger/InflationAndSP500/blob/main/InflationVsSP500_052022.png)
By examining the above plot, we see no obvious correlation between the inflation rate and S&P 500 index. This is further confirmed by looking at the [correlation coefficient](https://www.investopedia.com/terms/c/correlationcoefficient.asp) ([see how -0.04 is calculated](https://github.com/emma-jinger/InflationAndSP500/blob/main/Correlation%20Coefficient%20.png)). Values of correlation coefficient near 0 indicate a very weak linear relationship.
### Two stacked bar charts  
*The following chart is used to compare the 10 year rolling returns if one invests $10K in S&P 500 index starting from different months and years. The cutoff month and year is May 2012. This is because May 2012 is the latest starting investment date for which we are able to calculate the 10-year return based on historical S&P 500 index data.*  
![10-year return](https://github.com/emma-jinger/InflationAndSP500/blob/main/SP500TenYearReturn.png) 
- With $10K investment in S&P 500 index, the highest 10-year rolling return is $37,051, whereas the lowest is -$4,064.
- The possibility of increasing your money within 10 years is 89.59%. 
#### What would a [inflation-adjusted](https://www.investopedia.com/terms/i/inflation_adjusted_return.asp#:~:text=The%20inflation%2Dadjusted%20return%20is,removing%20the%20effects%20of%20inflation.) 10 year rolling return look like? 
> Removing the effects of inflation from the return of an investment allows the investor to see the **true earning potential** of the security without external economic forces. 

*The cutoff month and year is Mar 2012. This is because Mar 2012 lastest date for which we are able to calculate the inflation-adjusted 10-year return (CPI index for Mar 2022 is the latest data we have).*
![10-year adjusted return](https://github.com/emma-jinger/InflationAndSP500/blob/main/SP500AdjustedTenYearReturn.png) 
- The highest adjusted 10-year rolling return is adjusted to $27,778, whereas the lowest is adjusted to -$3,292. 
- The possibility of increasing your money within 10 years is still 89.59%.
## Act
### Conclusion
- Inflation rate cannot be used as a reference for one to decide when to invest in funds that mimic S&P 500 index, as no obvious correlation between them is found. 
- The likelihood of one growing their money by investing in funds that mimic S&P 500 index is quite high (89.59%). It could be considered as a fairly safe investment option.  
- Further analysis can be done to see if there is a better strategy on investing in funds that mimic S&P 500 index. Questions like ""Would a longer term like 15 or 20 years make it safer?"" or ""Does strategy like [Dollar-Cost Averaging](https://www.investopedia.com/terms/d/dollarcostaveraging.asp#:~:text=Dollar%2Dcost%20averaging%20(DCA)%20is%20an%20investment%20strategy%20in,price%20and%20at%20regular%20intervals.) make it safer?"" are worth exploring.  



"
286,hgeorge21/JSC370-inflationAnalysis,R,"# JSC370 Final Project -- Analysis on Inflation

This project is about examining inflation and how to predict future inflation.

All the data used are extracted from OECD, check details in website. The economic indicator data are all in the folder `data`. All the CSVs were downloaded manually (sorry...) and cleaned by running the file `./resource/datacleaning.R`.

Simply running `index.Rmd` and `./resource/report.Rmd` will generate the `index.html` for the site and `report.pdf` for the PDF report.

The video for presentation is linked at https://play.library.utoronto.ca/watch/0a5152988527a00e34ced96dae177da9

The website is hosted on https://hgeorge21.github.io/JSC370-inflationAnalysis/

Have fun and hope you learn something :)
"
287,shawn8777/Inflation,C#,"# Inflation
"
288,moriahcosta/Inflation,HTML,"# Inflation
Graph and quiz explaining inflation in the UK
"
289,cran/Inflation,R,
290,georgelee144/inflation,Jupyter Notebook,
291,kcnnn/inflation,CSS,"inflation
"
292,maescobar132/inflation,Jupyter Notebook,# inflation
293,siwey/Inflation,HTML,# Inflation
294,mediafin/inflation,HTML,"
This is a public repository by the data team of the Belgian newspaper [De Tijd](https://www.tijd.be). Using the featured scripts and data we try to take a deep dive in the Belgian inflation figures. The current version is a work in progress. The main purpose of this repo is to make our research available for review. 

If you are a researcher willing to provide feedback please contact us directly.

## Step 1

We were able to reproduce the officially published inflation figure (see the script from line 20 to 108). In this code we unchain and aggregate the indices. 


## Step 2
In line 113 till 177 we lwe load and clean the historical hbs data from 2012 until 2020. 


## Step 3
From line 182 until 207 we include and exclude certain product groups as provided in the methodology of NBB

In order to calculate an inflation figure by income group we understand the need to filter out the HBS data for products that aren’t used to calculate the CPI. We are aware of the fact that some corrections made to the official inflation calculations of StatBel can’t be reproduced as they would need to make use of microdata. Yet NBB defines a selection of products and categories that should be either included or excluded in order to approach the officially published inflation figures as closely as possible.

The list of INCLUDED coicop-levels (including all child elements) is listed below.


| COICOP  | desc                                                                     |
|---------|--------------------------------------------------------------------------|
| CP01    | VOEDING EN NIET- ALCOHOLISCHE DRANKEN                                    |
| CP02    | ALCOHOLISCHE DRANKEN, TABAK                                              |
| CP03    | KLEDING EN SCHOENEN                                                      |
| CP041   | Reële huur                                                               |
| CP043   | Onderhoud en herstelling woning                                          |
| CP044   | Leidingwater, afvalophaling, andere kosten verbonoden aan de huisvesting |
| CP0451  | Elektriciteit                                                            |
| CP0452  | Gas                                                                      |
| CP0453  | Huisbrandolie                                                            |
| CP0454  | Vaste brandstoffen                                                       |
| CP05    | MEUBELEN, HUISHOUDTOESTELLEN EN ONDERHOUDSPRODUCTEN                      |
| CP06    | GEZONDHEID                                                               |
| CP071   | Aankoop van voertuigen                                                   |
| CP0721  | Banden, vervangstukken en onderdelen voor persoonlijk vervoer            |
| CP07221 | diesel                                                                   |
| CP07222 | benzine                                                                  |
| CP07223 | andere brandstoffen                                                      |
| CP07224 | smeermiddelen                                                            |
| CP0723  | Herstelling en onderhoud van voertuigen                                  |
| CP0724  | Overige uitgaven voor persoonlijk vervoer                                |
| CP073   | Diensten vervoer                                                         |
| CP08    | COMMUNICATIE                                                             |
| CP09    | CULTUUR EN VRIJE TIJD                                                    |
| CP10    | OPLEIDING                                                                |
| CP11    | RESTAURANT EN HORECA                                                     |
| CP12    | PERSOONLIJKE VERZORGING EN DIENSTEN                                      |

Additionally, we exclude the following products (and their child elements)

| COICOP | desc               |
|--------|--------------------|
|     23 | drugs              |
|    122 | prostitution       |
|   1251 | life insurance     |
| 12530B | hospital insurance |
| 12530C | health insurance   |

Further information about additional corrections that can be made using publicly available data would be very welcome.

* Do we need to rescale the filtered HBS data (based on categories above) per mille before additional price updates?

* How do we calculate the price updates correctly? 

We currently load all publicly available HBS data from 2012 on. We update the weights using the following formula (applied on coicop level 3)

I.E: Updated weight in 2021 = HBS weight in 2018 * (index in December 2020 / mean index in 2018). 

* A further breakdown to coicop4 causes more category names and codes that change over time. Can an accurate price update be done by sticking to coicop level 3?

* Can we calculate the inflation on coicop level 1 as the weighted average of the deeper coicop levels?

## Step 4: 

From line 218 to 245 we rebuild the hbs-weights after we filtered specific product codes

## Step 5: Price Update

Starting from line 260 we pdate the weights according the the methology provided by statbel. 




-------

## Credits

HBS and CPI data is property of StatBel, the Belgian Office of Statistics. The methodology used the reproduce the inflation is based on earlier reports by NBB (National Bank of Belgium)

Inflation calculations De Tijd © 2021 by De Tijd is licensed under Attribution-NonCommercial-ShareAlike 4.0 International

This license requires that reusers give credit to the creator. It allows reusers to distribute, remix, adapt, and build upon the material in any medium or format, for noncommercial purposes only. If others modify or adapt the material, they must license the modified material under identical terms.
"
295,jangheeseung/android_inflation,Java,"참고:안드로이드 프로그래밍(생능출판), https://www.android.com

Inflater (xml->setcontentview()->findviewbyid())
Void setcontentview();
1. 리소스 아이디를 받거나
2. inflat 한다->LinearLayout을 리턴->V=Xml객체 생성 

setContentView(v)하나는 v를 받거나->xml에 파일에 있는 내용을 읽어서 그걸 new로 생성해서 매단다 (hierarchy 만들어서 최상위에 매단다.) 
레이아웃 XML파일을 View객체로 만들기 위해서는 LayoutInflater를 이용한다.
간략하게 코드로 작성하면 이렇게 쓸 수 있다.

LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
View view = inflater.inflate(R.layout.my_layout, parent, false);
LayoutInflate.

객체를 생성->new를 이용해서 객체를 생성하는게 더 쉽다. 
하지만 protected로 막혀 있기 때문에 할 수 없다. ->그래서 다른 방법을 제공해 준다.

그 방법은 Activity.getLayoutInflater() 또는 Context.getSystemService(Class)  를 사용해서 inflate()해주는 방법이다.
LayoutInflater inflater =getLayoutInflater();
LayoutInflater inflater = getSystemService(class);
->인자를 class나 서비스를 명시해 줘야한다.
LayoutInflater inflater = getSystemService (Context.LAYOUT_INFLATER_SERVICE);
->서비스명시
LayoutInflater inflater =LayoutUnflater.from(this);
 
이렇게 3가지 방법이 있다.

그 방법도 아니라면 객체를 만들고 직접 함수를 호출하는 방법도 있는대
Inflater.inflate (int resourceID, ViewGroup root);
 
이렇게 쓸 수 있다. 
ResourceID와 View 그룹의 root를 받아와서 
xml이 LinearLayout에 textView와 button을 매단 상태이다. 

View v는 v=inflate(int resID,ViewGroup root)이다.
여기서 만약 v를 최상위로 쓰고 싶으면 root에 null을 넣어 주면 되고,
만약 나만의 hierarchy가 있거나 중간에 넣고 싶다면, root에 넣으면 된다. 

LinearLayout
    ㅣ      \    
TextView    button
    ㅣ 
Hierarchy

View.inflate(this. int resID,ViewGroup root)->간단한 코딩을 할 때는 이것만 쓴다. 
View에 기본적인 inflate 함수가 들어가 있어서 가능하다. 

그렇다면 과연 Inflation을 쓰는 경우는 과연 언제 일까?

Inflation을 쓰는경우
전체 ui가 아니라 컴포넌트 단위로 전개하고 싶을 때
만약 내가 버튼을 예쁘게 한 개를 만들었을 때 이 버튼을 프로젝트마다 넣고 싶다 그러면?
1.	xml에 복사해서 넣기 ,
2.	button따로 수동으로 전개 하기(inflation 버튼xml에)
 여기서 내가 넣고 싶은 버튼은 my_button xml이다
LayoutInflater inflater
 = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
Button btButton=(Button) inflater.inflate(R.layout.my_button,null);
llManager.addView(btMyButton);
	
	Button btButton=(Button)View.inflate(this,R.layout.my_button,null);
위에 코드들 대신에 이렇게 한 줄로 줄여서 쓸 수 있다.
그렇다면 지금부터 전체적인 코드를 보면서 정리를 해보겠다.

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
//        setContentView(R.layout.activity_main);
//
//        Button btOk=findViewById(R.id.button); xml을 인자로 받는 경우
//        btOk.setText(""Yes"");

        TextView tvHello =new TextView(this); //width 속성을 주어야 한다.
        tvHello.setText(""Hello android in code"");

     //   Button btOk=new Button(this);//직접 매다는 경우
       //   btOk.setText(""Ok in code"");

  //      LayoutInflater inflater = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);//width랑 height가 필요 x  나의 속성이 아니라 무시한다
   //     Button btMyButton=(Button) inflater.inflate(R.layout.my_buuton4,null);//xml에 먹지 않더라고 wrap_parent를 지우면 안된다.

Button btMyButton= (Button)View.inflate(this,R.layout.my_button,null);//위에 두줄 대신 이 한줄로도 쓸수있다.

        LinearLayout llManager =new LinearLayout(this);

        llManager.setOrientation(LinearLayout.VERTICAL);		

 	LinearLayout.LayoutParams llParams=new LinearLayout.LayoutParams (LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);

        llManager.addView(tvHello ,llParams);
    //    llManager.addView(btOk, llParams);
         llManager.addView(btMyButton);
        setContentView(llManager,llParams);//매달자(llPrams를 쓰면height랑 width 속성이 적용된다.)
    }
}


"
296,nw11/Inflate.jl,Julia,"# Inflate: Pure Julia implementation of decompression of zlib and gzip
Author: Gunnar Farneback
See https://gist.github.com/GunnarFarneback/8254567
Slight change to handle concatenated gzips
[![Build Status](https://travis-ci.org/nw11/Inflate.jl.svg?branch=master)](https://travis-ci.org/nw11/Inflate.jl)
"
297,kensor/Tent-app,CSS,"Tent-app
========

Inflation Guide

This is a field guide for deploying, repairing, and repacking inflatable shelters for use in the field.
"
298,Behodler/weidai,TypeScript,"# WeiDai: A stablecoin that only grows in value
## backed by MakerDAO's Dai ERC20 stablecoin
- WeiDai is issued and redeemed at an exchange rate determined by the reserve(DAI)/totalSupply(WEIDAI)
- In addition to being a regular ERC20 token, WeiDai can be burnt. Whenever it is, the denominator of the exchange equation (above) declines, pushing up the price of WeiDai. This is the chief mechanism through which WeiDai gains value relative to Dai. Consider the following illustrative example:
Suppose there are 100 WeiDai in circulation and 100 Dai in reserve. The exchange rate is 1. Nimrod owns 30 and Sarah owns 70. Nimrod decides to burn 20 for no reason because he's a little crazy. The exchange rate is now 100/80 = 1.25. Previously, Sarah could exchange her WeiDai for 70 Dai. Now she can exchange them for 87.5 Dai (=70*1.25). Her WeiDai has grown in value because Nimrod burnt some of his.
- When WeiDai is redeemed for Dai, a percentage is burnt, implying that regular redemption gradually pushes up the price for those still holding.
- The price cannot be pushed down through dumping since the token is 100% collateralized by DAI. Only DAI price instability can introduce instability into WeiDai
- WeiDai is produced by mining _PATIENCE_ : In order to produce WeiDai, holders of Dai must send their Dai to a special contract known as the Patience Regulation Engine. Their new WeiDai is immediately produced at the current exchange rate but is held in reserve. The owner is advised to wait a certain number of blocks before claiming their new WeiDai. If they claim their holding prematurely, they incur a penalty tax which starts at 100% and declines linearly until the waiting period is over. The proceeds from this *impatience tax* are burnt, pushing up the redeem price of the remaining WeiDai in the system. The impatience duration is akin to a mining difficulty and adjusts dynamically according to how easy or hard users find it to wait out the duration.
- There is no need for external oracles or centralized control of any kind. Everything happens in smart contracts on the Ethereum blockchain. Price feeds are *outsourced* to the Dai ecosystem. This means that WeiDai is only as reliable as Dai. There is a developer donation address to fund ongoing development. To assist in making donations easier, a portion of the amount reserved for burning can be allocated as a donation to the developer donation address instead of being burnt.

## Vision
By creating a token that cannot fall relative to the US dollar but which will necessarily grow, it is hoped that WeiDai will provide a risk-free, inflation beating method of saving that allows HODLers to free themselves of having to research financial or crypto markets. 

In time, it is hoped that marginalized, underbanked and unbanked communities around the world will be able to safely insulate themselves from inflation both in the short, medium and long term. By creating a new era of **thriftcoins** which rewards saving disproportionately, the cultural damage caused by central banking credit expansion which has given rise to an ambient norm of consumerism will be gradually reversed and replaced by a thrifty culture of self-reliance and monetary frugality. In turn, communities will be able to self capitalize, enabling both charity and business finance to naturally decentralize.

## Future Development
The ethos of WeiDai will be to encourage burning. As such, WeiDai allows holders to grant 3rd parties the right to burn their tokens, similar to the ERC20 **approve** function. This will allow for the development of dapps that make purchases through WeiDai burns or partial burns. An example could be a governance game that utilizes the concept of Harberger taxes which are paid by burning WeiDai. Such additions to the ecosystem will complement the base layer of burn incentives created by the Patience Regulation Engine contract.

## Why the name?
Since I wish to make it clear that this token extends the original Dai token, I thought it would be appropriate to use the same naming convention. Dai, loosely translated, is the Chinese word for lend/borrow. Originally I thought I'd name the token Updai since the name is catchy and the intention is clear. However, charged with a desire to linguistically acknowledge Dai, I fumbled around on Google Translate for a Chinese word that means something like ""insulate"" or ""protect"" because I wish to make it clear that the two chief properties are that it beats inflation and is stable relative to the US Dollar. Eventually I stumbled on Wei which means guard/protect. I couldn't resist! Wei Dai is one of the spiritual fathers of Bitcoin (and one of the potential Satoshi Nakamoto candidates). In summary, the final name choice acknowledges both MakerDao and Wei Dai while simultaneously communicating the values of a **thriftcoin**. 

## Will WeiDai take over the world?
Bitcoin demonstrated that even the best economic theories are humbled by the chaotic winds of reality. While Austrian theory pointed to Bitcoin being an intelligent way to construct a new currency and Gresham's Law would predict holding to dominate spending, the wildness of Bitcoin's early life as well as the sociopolitical perturbations were beyond anyone's ability to predict. I have my own ideas of how WeiDai will impact the world but I have no doubt reality will be far different from my initial hopes and guesses. Like Bitcoin, it must always be borne in mind that WeiDai is *an experimental digital currency* and that no one can predict or promise what it will do. Also bear in mind that a total collapse of Dai would kill WeiDai instantly.
"
299,Tarik1407/Inflation-,JavaScript,"""# js-kurs-kalkulator-inflacije"" 
"
300,Owenrags/Upload_inflation,HTML,"# Upload_inflation
upload inflation
"
301,econchick/Inflatr,JavaScript,"/*******************************
 *   README.txt                *
 *                             *
 *  inflatR.com                *
 ******************************/

Author/Creater: Erin Lynn Root
userid: erin.lynn.root
email: erin.lynn.root@gmail.com

application name: inflatR: Inflation, Personalized.
application URL: http://inflatr.com

application last updated: 12/8/2011

README file last updated: 12/8/2011

File contains:

__init__.py (x3)
__init__.pyc (x3)
demographics_and_expenses (document/database file for SQLite3)
forms.py
formulas.py
formulas.pyc
manage.py
README.txt
settins.py
urls.py
urls.pyc
admin.py
admin.pyc
forms.py
forms.pyc
models.py
models.pyc
urls.py
urls.pyc
views.py
views.pyc
area_names.py
area_names.pyc
items.py
items.pyc
parser.py
scrubbeddata.txt
d3.js
d3.layout.js
stylesheet.css
home.html
design.html
detail.html
documentation.html
results.html
wizard.html
calculations.html
inflatR_demo.mov"
302,shehio/FED-Interest-Rate,Jupyter Notebook,"# FED-Interest-Rate
Prediction of the FED interest rate using features like unemployment and inflation.
"
303,pjreij98/InflationGroceryAppNotWorking,,"# InflationGroceryApp
App for checking the price of grocery items on a certain day in the past vs today.
"
304,joshuahoffmanr91/Inflation-,Shell,
305,bloopton/InflationEconomics-Research-ColumbiaU,Shell,"# EconResColumbia

Mercado Libre API scraping.
"
306,kristoiv/CppByteArray,C++,"CppByteArray
============

A simple ByteArray implementation in c++ that includes deflation/inflation using zlib (compression).
"
307,dkhaz/bingo,Fortran,"# BINGO: BI-spectra and Non-Gaussianity Operator

The BI-spectra and Non-Gaussianity Operator or, simply, BINGO, is a 
FORTRAN 90 code that numerically evaluates the scalar bi-spectrum and 
the non-Gaussianity parameter fNL in single field inflationary models 
involving the canonical scalar field. 

The code is based on the Maldacena formalism to evaluate the bi-spectrum. 
The code can evaluate all the contributions to the scalar bi-spectrum and 
the non-Gaussianity parameter fNL for an arbitrary triangular configuration 
of the wavenumbers. We should add that, since the perturbations are anyway 
required to be evolved in order to arrive at the bi-spectrum, the code 
can compute the power spectrum too.
 
The methods and the numerical procedures adopted by the code are described in 
detail in the following work: D. K. Hazra, L. Sriramkumar and J. Martin, 
BINGO: A code for the efficient computation of the scalar bi-spectrum, 
JCAP 1305, 026 (2013)]. The results for the arbitrary triangular configurations
of wavenumbers can be found in V. Sreenath, D. K. Hazra and L. Sriramkumar, On 
the scalar consistency relation away from slow roll, In preparation.


## Downloading and installing


1. clone or download bingo-2.0.tar.gz into your home folder and extract it.

2. Open the Makefile

   There are 2 make options (Intel FORTRAN compiler and gfortran (with mpi support). 
   Note that the code has mostly been tested with intel FORTRAN compilers. Though, for other 
   compilers it should work as well). 

3. Choose the correct make option (comment out the inappropriate ones) 
   and save the Makefile.

4. There are six models in the makefile. Choose one model and comment 
   out all the others.
   
   The models available are: 

   a. Quadratic potential with a step (qp-stp)
   b. Small field model with a step (smf-stp)
   c. Axion monodromy model (amm)
   d. Punctuated inflation (pi)
   e. Starobinsky model (Sm)
   f. The power law case (plaw)


5. From a terminal, execute

```
make clean
```

   This will clean the unwanted files (if any) for a fresh install.
  
6. Then compile with 

  ```
  make all
  ```

7. Then run with 

```
make run
```

   The data files will be stored in plots directory. DO NOT DELETE the plots 
   directory.
```   
make prun 
```
   
   runs in 2 nodes. To increase the number of nodes, change the number of 
   nodes in the Makefile.
   
   Only for 2D and 3D plots running in different nodes are allowed. For equilateral 
   and squeezed limits compile with ifort or gfortran instead of mpif90.
   
8. Produce plots with 

```
make figs
```

   You must have GNUPLOT installed to produce them.

9. The following five figure files will be created
 
   a. The behavior of \phi(The field)
      Filename:    phi.eps
   b. The behavior of d\phi/dN (The derivative of the field)
      Filename:    dphi_dn.eps
   c. The behavior of \epsilon (The first slow roll parameter)
      Filename:    epsilon.eps
   d. The scalar power spectrum as a function of the wavenumber
      Filename:    powerspectra.eps  
   e. The f_nl parameter as a function of the wavenumber
      Filename:  f_nl.eps
      This file will contain the f_nl corresponding to a 
      particular term in bi-spectrumb or the total f_nl, 
      which has been selected in fnlparams.ini. This will 
      plot f_nl(k) and holds only for equilateral and squeezed
      configurations. For arbitrary case please refer to 
      point 11, 12 and 14. 

      (For example, if Term=47 in fnlparams.ini is specified the 
      models folder, f_nl.eps will contain f_nl due to the 4th 
      term + f_nl due to the 7th term). TERM = 0 calculates total
      bispectrum from all the terms.
      
      Note that for mpif90 compilation the during the runs 
      the background quantities will not be written in the text files. 
      You can use ifort to compile to generate these files.

10. To run with user specified potential

     a. Create a directory with name my_model in models folder. Copy
        the files from any pre-installed model folder to the my_model 
        folder.
    
     b. In potential.f90 type type your potential which is a function of 
        param_1, param_2, param_3, param_4. You should mention POTENTIAL_USED,
        POTENTIALPRIME and V_PHI_PHI.

        POTENTIAL_USED = The potential [V(\phi)]
        POTENTIALPRIME = d V(\phi)/d \phi [The first  
        derivative with respect to the field)
        V_PHI_PHI= d^2 V(\phi)/d \phi^2 [The second 
        derivative with respect to the field]
    
        In case the potential depends on more than four parameters, you will
        need to define the parameters in the potential.f90 directory. You 
        should change the fnlparams.ini file according to your model.
    
     c. Make the following change in the Makefile. Write, Model = my_model 
        and comment out the other ones.
    
     d. Follow the steps 5,6,7,8.
  
11.  The default code generates f_nl in the triangular region enclosed by 
      0.5 < k2/k1 < 1, and 0 < k3/k1 < 1. However k3/k1 does take a value 
      ~10^(-2) instead of 0. log10(k1) can be fixed in the fnlparams.ini. 

12.  To generate 2D bispectrum shape. 
      
     We have provided 2 plot scripts to plot the 2D bispectrum shapes. 
     Note that for running into several nodes several F_NL files will be 
     generated. In the plots folder $cat *.txt > F_nl_2d.txt shall join 
     them in a single file. $gnuplot > load ""2dplot.p"" shall generate 
     F_nl_2d.eps file in the plots folder. In gnuplot we do not use 
     interpolation while plotting. A python script is also provided 
     that interpolates F_NL in between points and generate the plot file 
     with the same name in plots folder. To use that use $python plot2D.py.
     
      
      
13.  The code also generates squeezed limit results if specified in the ini file.      
     The squeezed mode is the largest scale mode and is calculated within the code.
  
14.  To generate 3D color plots. 

     Instead of $make all, use 
     ```
     make bingo3d.  
     ```
          
     Change num_k=60 in the corresponding fnlparams.ini file. This will evaluate 
     in 60 * 60 * 60 = 2160000 configurations.
     
     However,
     
     a. Remember to use more nodes since this might take long time to complete. num_k should 
     be integer multiple of the number of nodes.
     
     b. There will be degeneracies in k1, k2, k3 plane. The code is not optimized to 
     reduce this degeneracies since the python plotscript needs the file in a specified format. 
     
     c. For k1, k2,k3 that does not satisfy the triangular configurations, only in this 
     particular case the code replaces them by 0. This is necessary for the plotting purpose.
     
     d. $make gather followed by ./gatherall.out will compile a program to join the 
     files into F_nl_3d.txt. We also provide a python code for plotting. 
     $python plot3D.py shall generate the 3D color plot. Note that you 
     need to have mayavi2 installed in your system. For qp-stp we provide the python plot.
     It plots isosurface for some contour values provided in the script. For other models 
     you need to change the contour values depending on bispectrum shape. In the gather.f90 
     program, the number of files generated (or the number of nodes used) should be provided 
     in total_chains (default set to 60) and the number of lines per file should be provided
     in total_lines.
    
Note that the information about the model and model parameters can be found in the fnlparams.ini files. 


### Vesion history and changelogs :

--------------------------------------------------------------------------------

Vesion 2.0: October 2014 

Bispectrum in arbitrary triangular configurations of wavenumbers can be calculated.

Bispectrum in squeezed configurations to verify the consistency relation away from slow-roll.

Python scripts to plot 2D density plot and 3D contour plots of bispectrum.

Added mpif90 option to run BINGO in multiple nodes.

Term = 0 calculates the total f_nl from all terms in the bispectrum.

--------------------------------------------------------------------------------


Vesion 1.0: February 2013 

The first release of BINGO. Calculation of the bispectrum in the equilateral 
triangular configurations of wavenumbers. 

Calculation of power spectrum.  

--------------------------------------------------------------------------------


In due course, we expect to make a more complete version of the code available.
The code is expected to contain the following features:

1. Tensor bispectrum.

2. NAG library shall be included for improved performance.

3. Interpolation shall be implemented for speeding up the code. 

4. After the Planck 2014 release, we plan to provide an add-on of BINGO for CAMB 
which can directly be used for parameter estimation.

Please write to me (at dhirajhazra@gmail.com) in case you identify a bug in the code 
or if you need any assistance with the code.



for more information, visit https://sites.google.com/site/codecosmo/bingo

This version is: Version 2.0: October 2014
"
308,amman08/Venezuela-Crisis,,"# Venezuela-Crisis
Venezuela  Crisis  and how it leads Inflation to Hyper-Inflation
"
309,crimsoncantab/inflationrpg,Python,"inflationrpg
============

Various scripts for Inflation RPG mobile game
"
310,alissontenorio/inflationmoney,Python,"# inflationmoney
This app takes a money value and year and returns the current money value considering inflation.

E.g:

Considering R$ 30 in 1996 how much that amount would value today?
In 2020 it would value R$ 128.26
"
311,nima-karami/inflationometer,JavaScript,"# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
"
312,alexbmontiel/inflation-expectations,Jupyter Notebook,"### Do Inflation Expectations Cause Inflation?
Examining the evidence (or lack thereof)
"
313,Only1abu/inflationproject,Python,"# inflationproject. 
### Store and analyze large amounts stock data with Python and MySQL (ETL practice)
## Goals in this project.
1. Use what I learned in my Python and SQL courses, while also implementing Python's Pandas, Numpy, and various other libraries.
2. Gain web scraping experience with Python
3. Store large amounts of data in a SQL database.
4. Build familiarity with Python's stock and analysis features with yfinance and ta (technical analyis) libraries.
5. Build a project relevant to our current political and global climate (Inflation is rampant)!

## Major Steps 
### 1. Database Setup.
#### Needed to import the following libraries (sqlalchemy, pymysql)
##### **VIP* When using sqlalchemy's create_engine() function, you can use a different version of SQL. The user root, host, and directory will also differ. 
```
    import sqlalchemy
    import pymysql
    
    pymysql.install_as_MySQLdb()...
    
    def etfToSchema(etf):
    engine= sqlalchemy.create_engine('mysql://root:Tdan2118!@127.0.0.1:3306/')
    engine.execute(sqlalchemy.schema.CreateSchema(etf))
   
``` 

### 2. Webscraping.
#### I scraped ETF data from ycharts. It's imperative to import python's requests library as you will face challenges when using pandas' read_html function without it.
#### [XSD ETF](https://ycharts.com/companies/XSD/holdings)
#### [XLE ETF](https://ycharts.com/companies/XLE/holdings)
#### [XLF ETF](https://ycharts.com/companies/XLF/holdings)



### 3. Importing Stock Data from Yfinance to SQL Database.
#### I chose to March 13th, 2020 as the beginning date because that was the lowest point of the major indices after the Covid shock drop. 
#### Data can also be skewed if extended to March 2022 due to Russian-Ukrainian war and shocking effect on markets.
##### More SQL Database implementation in main python file with the GetTables() and GetPrices() Methods 
```
for etf in etfs:
    engine = sqlalchemy.create_engine('mysql://root:Tdan2118!@127.0.0.1:3306/' + etf)
    for ticker in mapper[etf]:
        df= yf.download(ticker, start='2020-03-13')
        df= df.reset_index()
         # You must have reset_index in order to avoid date being the index of the dataframe
         # since that's how Yahoo FInance will return the data frame
        df.to_sql(ticker, engine)
 ```
 
### 4. Choosing your techinical indicators to assess stock data with.
#### (I chose MACD because I use it heavily when trading stocks and options)

 ```
    def MACDindicator(priceFrame):
    priceFrame['MACD_value']= ta.trend.macd_diff(priceFrame.Close)
    priceFrame['MACD decision']= np.where((priceFrame.MACD_value > 0) & (priceFrame.MACD_value > priceFrame.MACD_value.shift(1)),True, False)


    def applyMACD(etf):
    prices=getPrices(etf)
    for frame in prices:
        MACDindicator(frame)
    return prices
  ```
"
314,nickk124/inflationaryfields,TeX,"inflationaryfields
==================
Final project for ASTR 504/704: Cosmology, on the presence of an additional scalar field during the cosmological inflationary epoch. [I can't seem to find the final version of the .tex file, unfortunately :( ].

Abstract
========
Following the observations of inflationary perturbations in recent years, a number of models for single-field inflation have been all but ruled out. However, if we move from single-field theory to considering the presence of an additional ""spectator"" *curvaton* field during inflation besides the inflaton, a number of inflaton potentials are made viable; this is because with the introduction of an additional field, observed perturbations can be decoupled from the inflaton. I will also consider the presence of a *modulus* spectator field, which generates nonuniform spatial modulations in the decay of the inflaton during reheating. Both of these spectator fields can also modify the observed perturbation power spectrum, which in turn can modify observerables such as the spectral index, tensor-to-scalar ratio, and the non-Gaussianity in observed fluctuations.
"
315,jondekerh/Inflationizer,Python,"# Inflationizer
Inflationizer was designed for Tweedy and Popp Hardware to automate the process of checking prices for markup according to True Value's catalog.

Previously one would have to do all price checks by hand, referencing prices listed on True Value's website. Because an API is not available for the website CSV documents containing catalog data have to be downloaded manually using Epicor Eagle Browser. An inventory CSV is also obtained from our local system. This program then loads the CSV documents, strips them of irrelevant data, combines them, and compares the values to return a new CSV document. A macro in Eagle Browser can then be used to read the files created by this program, update prices in the system accordingly, and even load a set of new labels to be printed.

This program saves hours upon hours of tedius work and ensures prices can easily be kept current.

Cheers!

NOTE: This program requires Python 3.6.3 installed locally in order to run. If Python isn't installed on your system you can get it [here](https://www.python.org/downloads/release/python-363/). Once it's installed you'll also need to use pip to install required libraries. When testing on my computer just running `pip install pandas` seemed to install all required libraries. 

## How To Use It
1. Make sure you've downloaded the **COMPLETE** CSVs for each catalog department, along with the **COMPLETE** CSV for local inventory. This script will not work unless **ALL** the available data is present in each CSV.
2. Run Inflationizer.bat.
3. When the first prompt appears to select the catalog files, use either SHIFT or CTRL click to select all relevant catalog CSVs at the same time.
4. When the second prompt appears to select the inventory file, simply select the inventory CSV.
5. Allow up to a minute or two for the program to run depending on your system. Ignore any warnings that appear in the console.
6. When the program has finished it will create three different CSV files in the same folder that Inflationizer.bat is located in. These files are:
* **new-prices.csv:** This file contains all items that need adjustment, organized by retail department and then grouped by fineline code.
* **new-prices-bulk.csv:** This file contains any items where we may have purchased a package and sold its contents individually, thus leading to massive differences in our price and the catalog price. These should be looked over and adjusted by hand as there is no reliable way to do it automatically. 
* **new-prices-by-priority.csv** This file is the same as new-prices.csv but it has been organized so that the items on top are the ones which are most frequently sold, and thus take priority for adjustment.
7. After the CSV files have been created they can be used in an Eagle Browser macro to update all items in either file, or segments can be extracted by department and put into smaller files which can update only the selected departments. 
"
316,crrmacarse/inflationcalculator,Visual Basic,
317,alexisakov/mmipireplica,Jupyter Notebook,"# mmipireplica
inflation model check up
"
318,dnyabogaO/inflation_cpi_model,Jupyter Notebook,"# inflation_cpi_model
inflation cpi model 
"
319,ufukreis/Inflation-Calculator-Application-C-Language,C,"# Inflation Calculator Application C Language
 Inflation Calculator Application 
"
320,rjbs/class-dbi-hasvariant,,"README for Class-DBI-Relationship-HasVariant

This distribution provides a new relationship type for Class::DBI, which
functions as has_a with different classes for different rows.
"
321,Refinitiv-API-Samples/Article.EikonAPI.Python.InflationVsDCAFund,Jupyter Notebook,"# Inflation Versus DCA Investing in a Fund

This Jupyter Notebook accompanies the article titled [""Inflation versus Dollar Cost Averaging on Pension Fund""](https://developers.refinitiv.com/en/article-catalog/article/inflation-versus-dollar-cost-averaging-pension-fund-refinitiv) on Refinitiv Developer Portal.

**Pre-requisites:** 

**Refinitiv Eikon** or **Refinitiv Workspace** with access to [Eikon Data APIs](https://developers.refinitiv.com/eikon-data-apis)

**Required Python Packages:** eikon, pandas, numpy, matplotlib 
"
322,Dawenster/inflationatr,Ruby,"== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.
"
323,1998vss/inflationcalc,HTML,"This was my first HTML|CSS|JavaScript project, and was supposed to be a debit calculator that would use the IBGE API to show debits corrections, but it was abandoned. 
I hope to return to it one day.
"
324,LucasBelpaire/inflationcalculator,Python,"# inflationcalculator
A little python script I have made to adjust prices for inflation. I needed this for my 'Investigate a Dataset' project in my Udacity 'Data Analyst' Nanodegree.

API: www.statbureau.org

V2 of this script is much better as it uses downloaded data and is much faster.


"
325,inflationandmarkets/inflationandmarkets,HTML,"### Hi there 👋

<!--
**inflationandmarkets/inflationandmarkets** is a ✨ _special_ ✨ repository because its `README.md` (this file) appears on your GitHub profile.

Here are some ideas to get you started:

- 🔭 I’m currently working on ...
- 🌱 I’m currently learning ...
- 👯 I’m looking to collaborate on ...
- 🤔 I’m looking for help with ...
- 💬 Ask me about ...
- 📫 How to reach me: ...
- 😄 Pronouns: ...
- ⚡ Fun fact: ...
-->
"
326,sjohns21/investigating_fandango_ratings,Jupyter Notebook,
327,cleancoindev/fair-inflation-v2,,"# A more sustainable economic model for DFO-based Startups to maintain value and funds operations

AleToschi.eth | Vasapower.eth | CD

White Paper: https://docs.google.com/document/d/1-foU-XTlXS0WgH97IOVC1i-O_WsKeqc-FVL5x9RR7WY/edit?usp=sharing

## Document Purpose:

This document is an update of “A sustainable economic model for DFO-based Startups to maintain value and funds operations” https://drive.google.com/file/d/1_QZr5CjNsQKGxoJ5WkI9iPJGs4PdKWol/ We successfully renamed this mechanism “Fair Inflation V1” (FI V1). During the experimentation of the Fair Inflation V1, the DFOhub Team Researched and Developed a better and more resilient version of the “Fair Inflation V1” called “Fair Inflation V2” (FI V2).



## Fair Inflation V1 - White Paper

### FI V1 - Abstract:

Voting Tokens of Decentralized Flexible Organizations are real programmable equities of a protocol because the funds locked into a DFO wallet are actually funds in the hand of token holders. DFO funds can be transferred or used only by voting, this opens new and very interesting correlations between Private Equity and Tokens.

The core experiment of this paper is to explore how adding new on-chain valuable assets into a DFO wallet can sustain the price of its voting tokens. 

In a traditional company, if new assets are added to the Company funds (without any increase of debts) the evaluation of its equities is backed by the value of these assets. This is because equities holders have the power to manage these assets.

This basic rule can be applied to Decentralized Flexible Organizations because if funds are added to a DFO wallet, Token Holders are the only ruler of these funds.
This is a basic design decision of The DFO core protocol, because thanks to its Smart contracts, nobody can make actions outside of a public proposal voted by token holders.

### FI V1 - The experiment:


 Thanks to the Uniswap math design:


x * y = k.  **


**Explained by Decrypt.co
In the equation, x and y represent the quantity of ETH and ERC20 tokens available in a liquidity pool and k is a constant value. This equation uses the balance between the ETH and ERC20 tokens–and supply and demand–to determine the price of a particular token. Whenever someone buys Poop Token with ETH, the supply of Poop Token decreases while the supply of ETH increases–the price of Poop Token goes up. As a result, the price of tokens on Uniswap can only change if trades occur. Essentially what Uniswap is doing it balancing out the value of tokens, and the swapping of them based on how much people want to buy and sell them.


A Flexible Organization can sustain its operation by a fixed Circulated Supply inflation using the uniswap protocol, by adding new values into the DFO Wallet:

### FI V1 - Example:


A DFO named “Flexible” with a Voting Token named “FLX”

FLX Total Supply = 1.000.000 FLX
Flexible DFO Wallet = 800.000 FLX (80%)
FLX Circulating Supply = 200.000 FLX (20%)

With a Smart Contract based proposal, Flexible Token holders decide to step by step inflate the circulating supply for a total of 5% during a period of a year and a half by selling a fixed number of FLX once a week (~ 50.400 Ethereum Blocks @ 12 sec for a block for 80 times)

In this case, the Flexible DFO will sell in total 50.000 FLX on the Uniswap protocol at the ratio of 625 FLX every 50.400 Blocks, increasing the circulating supply by the 0,0625%


(In this experiment technically the FLX backed value is already settled by the 800.000 FLX into the Flexible DFO Wallet, but because the FLX is at the same time the Voting Token, we don’t count its value in this equation.)

Every FLX Inflation event will add new ETH to the Flexible DFO wallet, adding new backed assets.

For example, after the first selling event the new status of the Flexible DFO Wallet will be:


799375 FLX +  Z ETH ***


***(Z is equal to an amount of ETH depending on the ratio of ETH/FLX into the Uniswap Pool)

Now Z ETH is the minimum backed value of the Flexible DFO Wallet and consequently the FLX Market cap because FLX Token Holders are the only people who can manage these funds, like Equity Holders in a Company.

Every Selling Event the Uniswap Pool reaches very little inflation but at the same time this selling benefits every FLX Holders.

If the DFO Voting Token Holders will use every week an amount < of the 100% of the Z ETH funds reached, the project can pay operations and at the same time accumulate backed value to benefit every token holder.

### FI V1 - The DFOhub Experiment:

We want to do this experiment for three fundamental reasons:

Empiric data about the correlation from Programmable Equities (DFO based Voting Tokens) to Regular Equities that can open an infinite number of questions and business opportunities for the dapps of tomorrow (DFO based)
R&D and introduce these standardized Smart Contracts as optional basic functions for every DFO via voting
Sustain our operations and at the same time to build a minimum backed valorization for BUIDL holders.

The Economics behind BUIDL is based on the Business Model of the General Purpose Protocol DFO. Every time someone creates  a new Decentralized Flexible Organization, a % of the new DFO’s new Voting Tokens is added to the DFOhub Wallet. The DFOhub Wallet is managed only by voting from the BUIDL holders, making assets into the DFOhub wallet the backed value of BUIDL.

### FI V1 - DFOhub Experiment in numbers:

BUIDL Total Supply = 42.000.000 BUIDL
DFOhub DFO Wallet = 11.500.000 BUIDL (27.3%)
DFOhub Team Operations Wallet = 11.500.000 BUIDL (27.3%)
BUIDL Circulating Supply = 2.200.000 BUIDL (5.2%)

With a Smart Contract based proposal, DFOhub will step by step inflate the circulating supply of BUIDL for a total of 0.8% during a period of a year and a half by selling a fixed number of BUIDL once every two weeks (~ 100.800 Ethereum Blocks @ 12 sec for a block for 40 times)

At the same time, the DFOhub Team Operations Wallet will step by step inflate the circulating supply of BUIDL for a total of 0.8% during a period of a year and a half by selling a fixed number of BUIDL once every two weeks (~ 100.800 Ethereum Blocks @ 12 sec for a block for 40 times)

These two Smart Contracts will inflate the circulation supply of a total of 1.6% (672.000 BUIDL) in a year and a half. The funds will be inflated into 3 different Uniswap Pools:

25% Uniswap V1 ETH/BUIDL | 0.4% (168.000 BUIDL)
25% Uniswap V2 ETH/BUIDL | 0.4% (168.000 BUIDL)
50% Uniswap V2 USDC/BUIDL | 0.8% Inflation (336.000 BUIDL)

During every Selling Event, the Circulating supply of BUIDL will increase by 0.02% (8.400 BUIDL) and will be split into:

25% Uniswap V1 ETH/BUIDL | 0.005% (2.100 BUIDL)
25% Uniswap V2 ETH/BUIDL | 0.005% (2.100 BUIDL)
50% Uniswap V2 USDC/BUIDL | 0.01% Inflation (4.200 BUIDL)

## FI V1 - Conclusion:

Every Two weeks these funds will create values for BUIDL holders in two different ways:

From the DFOhub Wallet: Z ETH and Z USDC will be automatically added to the DFOhub wallet as a backed value for BUIDL holders.
From the DFOhub Team Operations Wallet, these funds will be used to accelerate the R&D into new DFOhub Functionalities, Marketing, and Community Rewards. These Operations will benefit all of the BUIDL holders accelerating the advancement of the protocol and its usage, so more DFO's Voting Tokens into the DFOhub Wallet as a backed value for BUIDL holders.

All of the functionalities related to this R&D will become available for every DFO as Optional Basic Functionalities, to accelerate the exploration of Programmable Equities R&D.

# Fair Inflation V2 - White Paper Update:

## FI V2 - Abstract:

The “Fair Inflation V1” experiment was a success during the first month both in terms of equity between funds for operations and backed funds for BUIDL holders.

You can check the three FI events here:

https://etherscan.io/tx/0x68ef31cc8cff2929295fbd0b84187eb70b59bd1f8efb069f1bd9ed06fe817a15 (DFOhub)
https://etherscan.io/tx/0xe31d9eab9527e2a0299b80efc86ee013a0915825aac103246eccfaeddb95d822 (Operation Funds)
https://etherscan.io/tx/0xfdc2ab2be2ac2d46f37e520217f6b1ce10c4203ab5d56c512d743878d93f6872 (DFOhub)
https://etherscan.io/tx/0xdbf65b725d1d37750f67f6a1801c3cd38121fe676a414576d8ef5c5a19079f46 (Operation Funds)

The “Fair Inflation V1” experiment highlighted three unaddressed points of failure:

Slippage: The Uniswap Slippage is selling 8.400 BUIDL at an untoward price. This can be a problem for DFO-based Startups with less liquidity than BUIDL
Dump: The 8400 BUIDL selling created a short dump in the market. This system can be attacked by speculators if they sell BUIDL just before the Fair Inflation event. This kind of attack can harm both BUIDL holders and the team.

## FI V2 - The Experiment:

The “Fair Inflation V2” experiment aims to solve both the Slippage and the Dump problems by transforming weekly inflation events into daily inflation events without changing the quantity of Inflated tokens during the year and a half experiment.

In the “Fair Inflation V1” Every Week the circulating supply of BUIDL is inflated by 8.400 BUIDL for a total of 672.000 BUIDL after 80 weekly events into 3 Uniswap Pools (25% in ETH/BUIDL V1, 25% in ETH/BUIDL V2 and 50% in USDC/BUIDL V2).

In the “Fair Inflation V2” the same amount of BUIDL will be inflated in the same amount of time, but splitted into more inflation events and used to reward liquidity providers to Uniswap pools.

## FI V2 - The DFOhub (BUIDL) Experiment:

DFOhub (https://etherscan.io/tokenHoldings?a=0x5D40c724ba3e7Ffa6a91db223368977C522BdACD) will step by step inflate the circulating supply of BUIDL for a total of 336.000 during a period of a year and a half splitted in 560 daily Inflation Events (6.300 Ethereum Blocks)

This Smart Contract will inflate the circulation supply of a total of 336.000 BUIDL in a year and a half. The funds will be both inflated into 3 different Uniswap Pools and lock them to reward liquidity pool providers :

- 30% Uniswap V2 ETH/BUIDL (100.800 BUIDL)

- 30% Uniswap V2 USDC/BUIDL (100.800 BUIDL)

- 10% Uniswap V2 ARTE/BUIDL (33.600 BUIDL)

- 30% Rewards for Liquidity Providers  (100.800 BUIDL)

During every Selling Event, the Circulating supply of BUIDL will increase by 600 BUIDL and will be split into:

- 30% Uniswap V2 ETH/BUIDL (180 BUIDL)

- 30% Uniswap V2 USDC/BUIDL (180 BUIDL)

- 10% Uniswap V2 ARTE/BUIDL (60 BUIDL)

- 30% Rewards for Liquidity Providers  (180 BUIDL)

At the same time, the DFOhub Team Operations Wallet (https://etherscan.io/tokenHoldings?a=0x25756f9C2cCeaCd787260b001F224159aB9fB97A) will step by step inflate the circulating supply of BUIDL for a total of 336.000 BUIDL during a period of a year and a half splitted in 560 daily Inflation Events (6.300 Ethereum Blocks)

This Smart Contract will inflate the circulation supply of a total of 336.000 BUIDL in a year and a half. The funds will be both inflated into 3 different Uniswap Pools:

- 50% Uniswap V2 ETH/BUIDL (168.000 BUIDL)

- 50% Uniswap V2 USDC/BUIDL (168.000 BUIDL)

During every Selling Event, the Circulating supply of BUIDL will increase by 600 BUIDL and will be split into:

- 50% Uniswap V2 ETH/BUIDL (300 BUIDL)

- 50% Uniswap V2 USDC/BUIDL (300 BUIDL)

These two Smart Contracts will inflate the circulation supply of a total of 672.000 BUIDL in a year and a half. 

The DFOhub FI and the Operation FI will occur at ~ 12 hours apart (3.150 Ethereum Blocks).

## FI V2 - The Liquidity Staking Reward Experiment:

Liquidity Providers will be rewarded by the fair inflation based on the duration of locked liquidity.
The total amount of BUIDL available every 24 hours is 180 and automatically are splitted to reward liquidity providers based on locked BUIDL stacked as a liquidity for BUIDL/ETH and BUIDL/USDC in Uniswap V2.
 
The Reward is based on 4 tier:
 
- 1 Month: 10% daily (18 BUIDL) for a total of 540 BUIDL every month splitted from holders that lock liquidity for a month. The ratio is 1:0.01 BUIDL for every BUIDL stacked. The total amount of BUIDL stackable is 54.000.

- 3 Months: 20% daily (36 BUIDL) for a total of 3.240 BUIDL every  three months splitted from holders that lock liquidity for three months. The ratio is 1:0.05 BUIDL for every BUIDL stacked. The total amount of BUIDL stackable is 60.480.

- 6 Months: 30% daily (54 BUIDL) for a total of 9.720 BUIDL every  six months splitted from holders that lock liquidity for six months. The ratio is 1:0.2 BUIDL for every BUIDL stacked. The total amount of BUIDL stackable is 48.600.

- 1 Year: 40% daily (72 BUIDL) for a total of 25.920 BUIDL every year splitted from holders that lock liquidity for one year. The ratio is 1:0.5 BUIDL for every BUIDL stacked. The total amount of BUIDL stackable is 51.840.

Examples:

- A BUIDL holder stake 5000 BUIDL for a month by adding to the Uniswap liquidity 5000 BUIDL and the equivalent of ETH in the BUIDL/ETH pool via the DFOhub Staking GUI. At the end of the month the holders will be able to withdraw its liquidity (at the current rate) + 50 BUIDL + the Uniswap trading fees earned.

- A BUIDL holder stake 5000 BUIDL for three months by adding to the Uniswap liquidity 5000 BUIDL and the equivalent of ETH in the BUIDL/ETH pool via the DFOhub Staking GUI. At the end of the selected period the holder will be able to withdraw its liquidity (at the current rate) + 250 BUIDL + the Uniswap trading fees earned.

- A BUIDL holder stake 5000 BUIDL for six months by adding to the Uniswap liquidity 5000 BUIDL and the equivalent of ETH in the BUIDL/ETH pool via the DFOhub Staking GUI. At the end of the selected period the holder will be able to withdraw its liquidity (at the current rate) + 1.000 BUIDL + the Uniswap trading fees earned.

- A BUIDL holder stake 5000 BUIDL for one year by adding to the Uniswap liquidity 5000 BUIDL and the equivalent of ETH in the BUIDL/ETH pool via the DFOhub Staking GUI. At the end of the selected period the holder will be able to withdraw its liquidity (at the current rate) + 2.500 BUIDL + the Uniswap trading fees earned.

During every Fair Inflation event, if the amount of FI token moved from the DFOhub wallet is more than the number of tokens used to reward stakers, the excess BUIDL will return to the DFOhub wallet.

## FI V2 - The ethart (ARTE) Experiment:

### Ethart Fair Inflation V1 
(https://github.com/b-u-i-d-l/ethArt):
A sustainable economic model for DFO-based startups to maintain value and fund operations | ethArt version
For the $ARTE experiment, we will inflate the circulating supply by 1.21% (121,000) of the total supply (10,000,000) over one year..

Inflation events will occur once a week (every 50,000 ETH Blocks) across two Uniswap pairs for a total of 2,200 $ARTE each time:

- Uniswap V2 $ETH/$ARTE (1,100 $ARTE Every Week) 0.01% Weekly Inflation
- Uniswap V2 $BUIDL/$ARTE (1,100 $ARTE Every Week) 0.01% Weekly Inflation

For a total of 2,200 $ARTE every week (0.02%)
### Ethart Fair Inflation V2:
From the DFOhub Team Operations Wallet (https://etherscan.io/tokenHoldings?a=0x25756f9C2cCeaCd787260b001F224159aB9fB97A) 

Inflation events will occur once a day (every 6,300 ETH Blocks) across two Uniswap pairs for a total of 314 $ARTE each time:

- Uniswap V2 $ETH/$ARTE (157 $ARTE Every Day)

- Uniswap V2 $BUIDL/$ARTE (157 $ARTE Every Day)

For a total of 314 $ARTE every day

All of the functionalities related to this R&D will become available for every DFO as Optional Basic Functionalities, to accelerate the exploration of Programmable Equities R&D.

"
328,clustersdata/Inflation-of-the-Parachute,,"# Inflation-of-the-Parachute
Inflation of the Parachute
A parachute is made from thin, lightweight fabric, support tapes and suspension lines. The lines are usually
gathered through cloth loops or metal connector links at the ends of several strong straps called risers. The risers
in turn are attached to the harness containing the load.
Deployment systems
Freefall deployed parachutes are pulled out of their containers by a smaller parachute called a pilot chute.
A way of deploying a parachute directly after leaving the aircraft is the static line. One end of the static line is
attached to the aircraft, and the other to the deployment system of the parachute container.
Types of parachutes
Round parachutes
An American paratrooper using an MC1-1C series 'round' parachute
Round parachutes, which are pure drag devices (i.e., they provide no lift like the ram-air types), are used in
military, emergency and cargo applications. These have large dome-shaped canopies made from a single layer
of cloth. Some skydivers call them ""jellyfish 'chutes"" because they look like dome-shaped jellyfish. Rounds are
rarely used by skydivers these days. The first round parachutes were simple, flat circulars, but suffered from
instability, so most modern round parachutes are some sort of conical or parabolic.
Some round parachutes are steerable, but not to the extent of the ram-air parachutes. An example of a steerable
round is provided in the picture of the paratrooper's canopy; it is not ripped or torn but has a ""T-U cut"". This
kind of cut allows air to escape from the back of the canopy, providing the parachute with limited forward
speed. This gives the jumpers the ability to steer the parachute and to face into the wind to slow down the
horizontal speed for the landing. 
Annular & pull down apex parachutes
A variation on the round parachute is the pull down apex parachute invented by a Frenchman named LeMoigne
-- referred to as a Para-Commander-type canopy in some circles, after the first model of the type. It is a round
parachute, but with suspension lines to the canopy apex that apply load there and pull the apex closer to the
load, distorting the round shape into a somewhat flattened or lenticular shape.
Often these designs have the fabric removed from the apex to open a hole through which air can exit, giving the
canopy an annular geometry. They also have decreased horizontal drag due to their flatter shape, and when
combined with rear-facing vents, can have considerable forward speed around 10 mph (15 km/h).
Ribbon and ring parachutes
Ribbon and ring parachutes have similarities to annular designs and they can be designed to open at speeds as
high as Mach 2 (two times the speed of sound). These have a ring-shaped canopy, often with a large hole in the
center to release the pressure. Sometimes the ring is broken into ribbons connected by ropes to leak air even
more. The large leaks lower the stress on the parachute so it does not burst when it opens.
Often a high speed parachute slows a load down and then pulls out a lower speed parachute. The mechanism to
sequence the parachutes is called a ""delayed release"" or ""pressure detent release"" depending on whether it
releases based on time, or the reduction in pressure as the load slows down.
Ram-air parachutes
Most modern parachutes are self-inflating ""ram-air"" airfoils known as a Para foil that provide control of speed
and direction similar to Para gliders. Para gliders have much greater lift and range, but parachutes are designed
to handle, spread and mitigate the stresses of deployment at terminal velocity. All ram-air Para foils have two
layers of fabric; top and bottom, connected by airfoil-shaped fabric ribs. The space between the two fabric
layers fills with high pressure air from vents that face forward on the leading edge of the airfoil. The fabric is
shaped and the parachute lines trimmed under load such that the ballooning fabric inflates into an airfoil shape.
A U.S. NAVY display jumper landing a 'square' ram-air parachute 
Reserves
Paratroopers and sports parachutists carry two parachutes. The primary parachute is called a main parachute, the
second, a reserve parachute. The jumper uses the reserve if the main parachute fails to operate correctly.
Reserve parachutes were introduced in World War II by the US Army paratroopers, and are now almost
universal. For human jumpers, only emergency bail-out rigs have a single parachute and these tend to be of
round design on older designs, while modern PEPs (i.e P124A/Aviator) contain large, docile ram-air parachutes.
Deployment
Reserve parachutes usually have a ripcord deployment system, but most modern main parachutes used by sports
parachutists use a form of hand deployed pilot chute. A ripcord system pulls a closing pin (sometimes multiple
pins) which releases a spring-loaded pilot chute and opens the container, the pilot chute is propelled into the air
stream by its spring then uses the force generated by passing air to extract a deployment bag containing the
parachute canopy, to which it is attached via a bridle. A hand deployed pilot chute, once thrown into the air
stream, pulls a closing pin on the pilot chute bridle to open the container, then the same force extracts the
deployment bag. There are variations on hand deployed pilot chutes but the system described is the more
common throw-out system. Only the hand deployed pilot chute may be collapsed automatically after
deployment by a kill line reducing the in-flight drag of the pilot chute on the main canopy. Reserves on the
other hand do not retain their pilot chutes after deployment. The reserve deployment bag and pilot chute are not
connected to the canopy in a reserve system, this is known as a free bag configuration and the components are
often lost during a reserve deployment. Occasionally a pilot chute does not generate enough force to either pull
the pin or extract the bag, causes may be that the pilot chute is caught in the turbulent wake of the jumper (the
""burble""), the closing loop holding the pin is too tight, or the pilot chute is generating insufficient force, this
effect is known as ""pilot chute hesitation"" and if it does not clear it can lead to a total malfunction requiring
reserve deployment.
Paratroopers' main parachutes are usually deployed by static lines which release the parachute yet retain the
deployment bag which contains the parachute without relying on a pilot chute for deployment. In this
configuration the deployment bag is known as a direct bag system and the deployment is rapid, consistent and
reliable. This kind of deployment is also used by student skydivers going through a static line progression, a
kind of student program.
Using the modeling process, build a mathematical model for the opening of the parachutes discussed
above. We are concerned with how the parachute inflates. Use your model to explain how the geometry
of the folding of the parachute affects the inflation and then discuss how we might affect the rate of
inflation of the parachute. 
"
329,shayaa/vifplot,R,"# Dynamic VIF Plot

This shiny app demonstrates the dynamic variance inflation factor described by Stine (1995) using the Duncan dataset of the prestige of 45 U.S. occupations in 1950 from the car package. We can dynamically examine the multicolliearity that exists between the occupation type, and the income, education and prestige levels.  

Let $P_{(-j)}$ indicate a projection matrix of of all the covariates in a linear model except $X_j$ we can state the estimated residuals in terms of a control parameter $\lambda$. That is, 
\[\hat{\epsilon}_j(\lambda)= (I- \lambda P_{(-j)})(X_j- \bar{X}_j)\] 

While 
$$
\begin{align}
\hat{\epsilon}_Y(\lambda) &= (I-\lambda P_{(-j)})(Y- \bar{Y})\\
 &= \hat{\epsilon} + (I -\lambda P_{(-j)}) \hat{\beta}_j(X_j- \bar{X}_j)\\
 &= \hat{\epsilon} + \hat{\beta}_j \hat{\epsilon}_j(\lambda)
 \end{align}
$$

Therefore, we can control lambda to determine the strength of the multicollinearity effect. As $\lambda$ tends to 0 we see the centered partial residual plot, and as $\lambda$ tends to 1 we see the partial regression plot to diagnose multicollinearity.
 


#### Citation

Stine, Robert A. ""Graphical interpretation of variance inflation factors."" _The
American Statistician_ 49.1 (1995): 53-56."
330,SachinHotkar/Variance-inflation-factor-VIF-,Jupyter Notebook,"# Variance-inflation-factor-VIF-
Variance inflation factor (VIF) A common function used for testing regression assumptions and specifically multicolinearity and unlike many statistical concepts,
The Variance Inflation Factor is a measure of colinearity among predictor variables within a multiple regression.
It is calculated by taking the the ratio of the variance of all a given model's betas divide by the variance of a single beta if it were fit alone.
"
331,pmuilu/econ_data,,"# econ_data
EU inflation data

Source: EuroStat
"
332,marinewater/inflation-austria,TypeScript,"[https://marinewater.github.io/inflation-austria/](https://marinewater.github.io/inflation-austria/)
"
333,jbowmer/RBAInflationForecasts,R,
334,elliott-wen/InfamousInflation-SwiftLaTex,TeX,"# InfamousInflation-SwiftLaTex
SwiftLaTeX Project Infamous Inflation
"
335,Inflation-Partners/inflation.github.io,,"## Welcome to GitHub Pages

You can use the [editor on GitHub](https://github.com/Inflation-Partners/inflation.github.io/edit/main/README.md) to maintain and preview the content for your website in Markdown files.

Whenever you commit to this repository, GitHub Pages will run [Jekyll](https://jekyllrb.com/) to rebuild the pages in your site, from the content in your Markdown files.

### Markdown

Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for

```markdown
Syntax highlighted code block

# Header 1 About
## Header 2
### Header 3

- Bulleted
- List

1. Numbered
2. List

**Bold** and _Italic_ and `Code` text

[Link](url) and ![Image](src)
```

For more details see [GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/).

### Jekyll Themes

Your Pages site will use the layout and styles from the Jekyll theme you have selected in your [repository settings](https://github.com/Inflation-Partners/inflation.github.io/settings). The name of this theme is saved in the Jekyll `_config.yml` configuration file.

### Support or Contact

Having trouble with Pages? Check out our [documentation](https://docs.github.com/categories/github-pages-basics/) or [contact support](https://github.com/contact) and we’ll help you sort it out.
"
336,RanjithRShetty/Variance-inflation-factor-VIF-,Jupyter Notebook,"# Variance-inflation-factor-VIF-
Variance inflation factor (VIF) 
"
337,ZgjimDida/inflation-in-kosovo,TypeScript,"# A

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 12.2.0.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.
"
338,raddy123/UKIP,HTML,
339,local-optimum/inflation_calculator,Dart,"# Simple Inflation Calculator

__""Inflation is taxation without legislation""__ - Miltion Friedman

**Cash is not a store of value.**
* The money supply is increasing at a historic rate.
* We are all becoming poorer as a result.
* Use this tool to visualise the impact of inflation on your purchasing power

------------

This is my first original Flutter app.
Made for Linux Desktop using the Ubuntu Yaru theme.
Available as a Snap.
Data from statbureau.org

------------

Currently it only supports USD, but later iterations will hope to add a country selector as well as flutter_charts visualisations


[![Get it from the Snap Store](https://snapcraft.io/static/images/badges/en/snap-store-black.svg)](https://snapcraft.io/inflation-calculator)
"
340,sandy-goli/time-series-analysis,Jupyter Notebook,"# time-series-analysis
US CPI Inflation rate
"
341,syyunn/inflhedge-suppchain,,"# inflhedge-suppchain
inflation hedge and supplychain
"
342,zahidaliayub/inflationcoin,C++,"InflationCoin - IFLT

InflationCoin is an X11 PoW/PoS coin. It is a coin that integrated with true random super bonus block features. It uses high PoS as a way of distributing fairly the coins to community.

- X11 hash algorithm, PoW/PoS mixed
- 5 transaction confirmations
- 70 minted block confirmations
- Total coins will be 10 billions
- The coin will be a pure PoS coin after 3 months of PoW mining.
- A 2.5% premine for bounties and to fund servers and dev expenses

PoW details:
- 60 sec PoW block target time
- difficulty retarget each block for PoW
- Payout will be 1,000 coins per block
- Every day there will be a random super block with 1000X normal payment (1,000,000 coins), it is true randomness and can't be taken advantage by big hashpowers
- PoW will be terminated after 90 days.

PoS details:
- 60 sec PoS block time
- diff retarget each block for PoS
- minimum hold for PoS: 24 hours
- maximum hold for PoS: 60 days
- Variable PoS annual payout rate:
	- 1st year: 800%
	- 2nd year: 80%
	- 3rd year: 8%
	- subsequent years: 4%

Ports:
connection:	11370
RPC:			11371
"
343,TidySigma/Unexpected_Inflation,R,"# Unexpected_Inflation
Charting Unexpected Inflation

# sources:
   My response to a post by Jonathan Regenstein  
   original github code: https://gist.github.com/jkr216/0c6463e99dc54f323ed4976392ce3c57  
   twitter post: https://twitter.com/jkregenstein/status/1467962068863275011?s=20  
"
344,liamnickell/inflation-calc,Swift,"# Inflation Calculator iOS App
An iOS inflation calculator app that works for multiple currencies and allows for basic inflation forecasting across all currencies.
"
345,DrStevenHess/R-Sources,R,"R-Sources
"
346,bdemeshev/inflation.project,R,
347,sdglhm/inflation-lk,JavaScript,"# inflation-lk
Inflation adjusted calculator
"
348,pgg1309/uk-inflation,,"# uk-inflation
UK CPI Inflation
"
349,adityamodi11/Inflation-Web-App,Python,"# Inflation-Web-App
Inflation Web App
"
350,jharwerth56/Inflation-Apparatus,Rich Text Format,
351,RGGH/finance,Python,"# finance
inflation and sh*t
"
352,seanbae/CatNap,Arduino,"CatNap
======================================================

HackMIT 2014

By Sean Bae, Jeff He, Andrew Liu, Craig Weiss

Using the realtime Firebase database, a back-end Python script, and an Arduino with two servomotors, CatNap introduces an completely automatized air mattress researvation system. The air mattress automatically inflates when the user sets the alarm, and then deflates at the end of the pre-specified time. CatNap also adds social element to your nap expereince by sending ""Yo"" to all of your friends at the end of your nap.
"
353,kopper/money,Scala,"# money
Inflation-adjusted Money
"
354,milan-mooibroek/npm-index-inflation-calculator,JavaScript,"# Index inflation calculator

The index-inflation-calculator package is a tool to calculate upcomming year values of given purchase year and amount.

## Installation

Use the package manager [npm](https://www.npmjs.com/get-npm) to install index-inflation-calculator package.

```bash
npm index-inflation-calculator -s
```

## Usage

```javascript
const indexInflationCalculator = require('index-inflation-calculator');
const previousYearsData = [
    {year: 2010, rates: [107.2, 106.5, 106.5, 106.2]},
    {year: 2013, rates: [101]},  
];
const indexCalculator = new indexInflationCalculator(previousYearsData);
const returnOnBoughtHouse = indexCalculator.calculate(250000, 2025);
console.dir(returnOnBoughtHouse, { depth: null });
```

You can add an array or single value to split quarter results or yearly results in the rates value, Years must be unique.

## Examples
```javascript
const indexInflationCalculator = require('index-inflation-calculator');
const previousYearsData = [
    {year: 2010, rates: [107.2, 106.5, 106.5, 106.2]},
    {year: 2013, rates: [101]},  
];
const indexCalculator = new indexInflationCalculator(previousYearsData);
const returnOnBoughtHouse = indexCalculator.calculate(250000, 2025);
console.dir(returnOnBoughtHouse, { depth: null });
//This log will be : 
// {
//     years: 4,
//     results: {
//       total: 290221.393284,
//       yearlyTotals: [
//         { year: 2021, total: 259500 },
//         { year: 2022, total: 269361 },
//         { year: 2023, total: 279596.718 },
//         { year: 2024, total: 290221.393284 }
//       ]
//     }
//   }
```

## License
[MIT](https://choosealicense.com/licenses/mit/)"
355,emoreno911/Inflotto,JavaScript,"# Inflotto

The Lottery of Inflation, a dApp to use the Truflation's inflation index and ChainlinkVRF. It's made with ReactJS and Moralis API working Polygon Testnet.

It's also using the Finity design system, implemented with Tailwind.

https://inflotto.netlify.app/
"
356,totallyviable/inflator,Swift,
357,Binary-Finery/UKInflationCalculator,Kotlin,
358,prawn15/ATIS,,"# ATIS
AUTONOMOUS TYRE INFLATION SYSTEM
"
359,zachwe/inflation-adjuster,JavaScript,"You have: a csv timeseries of unadjusted US dollars.

You want: a timeseries of inflation-adjusted US dollars.

There should be an easy way to give you what you want. (If you've got a fancy
subscription to Bloomberg or Factset or something, there probably is.)

This is that easy solution.
"
360,patrykrybaczek/resolve-inflation,JavaScript,"# **Resolve Inflation**
This application has a solution to the current situation in society.
When inflation is rising and while the rich get richer, the poor get poorer, and we get more divided than ever before.

All we do, or at least say, is; we strive for ""equality"".
But I say; all we do is dream.
It's time to start striving towards ""reality"".

So! Here's my solution to the problem.

## How to dev
Standing in the project directory you can: 
```
npm install
npm start
```

The project should now be served:
[`http://localhost:3000`](https://this_is_url/)


Real time reload when u make changes. <br>
You may also see any lint errors in the console.

###### This is a joke. 💩
"
361,joaquinlpereyra/cuotitas,HTML,
362,Tortolala/Inflatiometer,,"# Inflatiometer
Caracas' inflation monitoring app
"
363,akinjyde/Constitutive-modeling-of-extension-inflation-test-data,Python,"# murine-vagina
vaginal inflation extension modeling
## **About the code**:
This code was used in hyerelastic model fitting for published article: [Akintunde AR, Robison KM, Capone DJ, Desrosiers L, Knoepp LR, Miller KS. Effects of Elastase Digestion on the Murine Vaginal Wall Biaxial Mechanical Response. ASME. J Biomech Eng. 2018;141(2):021011-021011-11](http://biomechanical.asmedigitalcollection.asme.org/article.aspx?articleid=2716276)
The code fits the Holzapfel-Gasser-Ogden (HGO) hyperelastic model (i.e. neo-Hookean + 2 fiber family of Fung exponential) to the pressure-diameter experimental data.

## **Running the code**:
Easiest approach is to install [anaconda](https://www.anaconda.com/download/) software from Continuum Analytics. It has all the required python packages (numpy, scipy, matplotlib) and Spyder IDE.

## **Experimental Data**:
Inflation (pressure-diameter) - extension (force-length) test data are in the .mat files contained in the Data folder. There are eight each for control and elastase samples according to the published journal article.

## **Sample Outputs**:
Sample code outputs (plots and optimized parameter values) are in folder ""control1"".
"
364,jwilk/inflacja,Python,".. code:: console

   $ inflacja 4237 PLZ --from=1984 --to=2012
   398.38 PLN

.. vim:ft=rst ts=3 sts=3 sw=3 et
"
365,camillanore/Inflastudy,Jupyter Notebook,"# Evaluation of Inflation Predictions by the Norwegian Central Bank.

The objective of this project is to calculate and present the predicition
error in the CPI and CPI_JAE estimates.

## Repository structure

- *data*: The source dataset, and converted csv files.
- *tests*: Tests of functions, run with nosetest.
- *inflastudy*: A package with helper functions and objects to work with the 
predictions and datasets.
- *[inflastudy.ipynb](inflastudy.ipynb)*: The front-end of the repository. The iPython notebook 
will present the data and plots.

## Convert to csv

- File --> Options
	- change language to English (U.S)
	- Advanced: Use system separators; set decimal separator to dot
- Delete text and notes
- Delete unnecessary data, with �,�,�
- Save as csv (MS - DOS)"
366,DamianBednarczyk/master_s_degree,Jupyter Notebook,"# master_s_degree
Inflation of asset prices
"
367,daniel08/inflation_scraper,PHP,# weather_scraper
368,clpo13/inflation-calc,Ruby,"# Inflation Calculator

A simple Ruby command-line tool to find the difference in purchasing power of the US Dollar, as
well as the cumulative percent of inflation, between two years.

The included [cpi.yml](cpi.yml) file contains annual Consumer Price Indices from 1913 to 2016.

## Usage

```bash
ruby inflation_calc.rb
```

or

```bash
chmod +x inflation_calc.rb
./inflation_calc.rb
```

## Requirements

* Ruby 1.9.3 or later

## TODO

* [ ] Pull data directly from [BLS](https://www.bls.gov/cpi/)

## License

This code is free to use, modify, and distribute according to the terms of the MIT License,
the text of which is available in [LICENSE](LICENSE). I take no responsibility for time travel
related purchasing decisions made as a result of using this program.
"
369,typpo/Inflation-Calculator,Swift,
370,JosephBrunet/tension_inflation,Python,"# Tension-inflation graphical interface

---


1. [About The Project](#about-the-project)
	- [Project organisation](#project-organisation)
1. [Getting Started](#getting-started)
	- [Requirements](#requirements)
		- [Python packages required](#python-packages-required)
		- [Drivers required](#drivers-required)
	- [Installation and launching](#installation-and-launching)
1. [Software guide](#software-guide)
	- [Step 1 : Initialisation](#step-1--initialisation)
	- [Step 2 : Main window](#step-2--main-window)
1. [Contact](#-contact)



---


## About The Project

This graphical interface was developped to be used with the tension-inflation device based at Ecole des Mines de Saint-Etienne (France).

To start the app, run the script `entry_point_py`.


### Project organisation

The project organisation is the following one:

```
── GUI_main.py                       #Main script controlling the GUI
├── Arduino_script                   #Folder with the Arduino script uploaded on the card (written in C++)
├── modules
│   ├── mainwindow_modules
│   │   ├── Left_panel.py            # Left panel of the mainwindow
│   │   └── Right_panel.py           # Right panel of the mainwindow
│   ├── sensors_dialogs
│   │   ├── Arduino.py               # Script for the dialog with the Arduino
│   │   ├── MotorPI.py               # Script for the dialog with the Motor
│   │   ├── Pump_seringe.py          # Script for the dialog with the Pump
│   │   └── PumpWM.py                # Script for the dialog with the Watson Marlow pump (not useful)
│   ├── initialisation.py            # GUI of the step 1
│   └── mainwindow.py                # GUI of the step 2 composed in right and left panels
├── resources                       # Folder with the images
└── results                          # Folder containing the output from the software
```


---
## Getting Started:

The package is written in python and it is based on the PyQt framework.


### Requirements

#### Python packages required

* pyqt==5.9.2                 ==>  (https://anaconda.org/anaconda/pyqt)
* pyserial==3.5             ==>  (https://anaconda.org/anaconda/pyserial)
* pyqtgraph==0.11.0            ==>  (https://anaconda.org/anaconda/pyqtgraph)
* simple-pid==0.2.4           ==>  (https://anaconda.org/esrf-bcu/simple-pid)
* PIPython==2.5.0.1             ==>  (https://pypi.org/project/PIPython/)


#### Drivers required

* Driver PI C663 (install from the PI cd - http://update.pi-portal.ws/down.php?link=http://syst13.synserver.de/PIUpdateFinder/PI_C-990_CD1_V_1_0_0_6.zip&name=PI_C-990_CD1_V_1_0_0_6.zip&id=6  or https://drive.google.com/file/d/1h9WOYUCOherfxR1k2YsRopm3UeD3EEEO/view?usp=sharing)
	* Folder `linux` if linux os
	* `.exe` if Windows os


If you are on linux don't forget to add your user into dialout group for serial access with:
```
$ sudo usermod -a -G dialout YOUR_USERNAME
```
You can verify if the user is present in the dialout group by using the command:
```
$ groups
```



### Installation and launching

Three methods to run the app:

1. Two standelone files were created (one for Windows and one for Linux) to avoid installing all the dependencies and execute the application directly.

2. Write in terminal: `python sertup.py install` and run `entry_point.py`.

3. Install all dependencies and launch the script entry_point.py by typing `python entry_point.py`.

Just one of these methods is needed.

---

## Software guide


After launching the app (and if all the python packages and drivers were installed on the computer), the GUI steps will be:


### Step 1 : Initialisation


The initialisation will be launched (code in `initialisation.py`). The objectives of this step are to connected the Arduino, the Pump, and the Motor, and to let the motor find its position. This window will appear:

![Ini step](./tension_inflation/resources/Ini_step.png)



* The button `Pass the initialisation` is to pass to the step 2 directly.
* The result directory is where the output of the test will be printed
* The connection show if the different devices are connected or not (green = connected).
* The button `Start initialisation` is to let the motor find the bottom limit sensor in order to know its displacement position.



### Step 2 : Main window


After the initialisation step, the main window is launched (code in `mainwindow.py`). This window will appear:

![Main step](./tension_inflation/resources/Main_step.png)

The main window is divided into two panel: the `Left Panel` and the `Right Panel`.

The `Left Panel` is used to control the values of the different quantities in real time and to place the sample in the initial conditions before the beginning of the tension-inflation test.

Once the sample is place in the good conditions (in term of displacement and pressure), one can press the button `Positioning finished =>` to pass to the right panel

The `Right Panel`: use to launch the tension-inflation test.
* The `mode:Volume/Pressure` correspond to the control of the pump in pressure or in volume.
* The `mode:Displacement/Load` correspond to the control of the motor in displacement or in load.
* In `cycle Motor/Pump` you can enter the number of cycles you want before the motor or the pump stop to the final target (nothing enter = no cycles).
* In `Commands` you can enter the target displacement/pressure (nothing enter = no command). 

---



## Contact

Joseph Brunet - Mail: jo.brunet73@gmail.com

Project Link - https://github.com/JosephBrunet/tension_inflation.git

"
371,denisburnashev/inflation-table,Python,"# Построение таблицы

Вам необходимо оценить динамику инфляции в РФ и подготовить сравнительную таблицу. У вас есть данные по инфляции в csv-файле, необходимо реализовать приложение, которое выводит размер инфляции по годам и месяцам в процентах и отображает общую инфляцию за год.

Вам необходимо реализовать чтение csv-файла `inflation_russia.csv` во view `inflation_view` в файле `apps/views.py` и вывести данные из этого файла в таблице.

Построение шаблона реализуйте в файле `app/templates/inflation.html`.

Таблица должна состоять из столбцов: ""Год"", перечисление месяцев, ""Всего"". Суммарно 14 столбцов.

Таблица с суммарной величиной должна быть закрашена в серый цвет.

Если инфляция за месяц была отрицательной (дефляция), то ячейка должна быть закрашена в зеленый. Если значение инфляции превысило 1%, то в красный. Должна быть реализована визуальная градация красного: от 1% до 2%, от 2% до 5%, от 5% и более (3 оттенка красного, визуально они должны быть различимы).

Если данных за месяц нет, то нужно выводить прочерк.

## Пример таблицы:

![Пример](./example.png)

## Советы

- как работать с csv в Python: https://docs.python.org/3.6/library/csv.html

## Документация по проекту

Для запуска проекта необходимо:

Установить зависимости:

```bash
pip install -r requirements.txt
```

Выполнить команду:

```bash
python manage.py runserver
```
"
372,BarGanor/Imported_Inflation,Jupyter Notebook,
373,beetlejuice16/inflation-calculator,Jupyter Notebook,"# An Inflation Calculator for Germany

Trying to program a calculator that will:

1. Take the amount of money to be converted.
2. Take the reference and target years.
3. Show the amount of money in the target year.

## TO DO

- ~~Get price indexes for the past ~ 20 years~~
- ~~Clean price index data~~
- ~~Decide whether to export cleaned data or keep the cleaning algorithm in code.~~
- ~~Get years that want to be compared as well as the amount of money that should be converted.~~
- Mostly done just have to figure out how to make this into a simple runnable python script not a notebook."
374,FacePunch1337/Inflation-Callback,C#,
375,DaGenix/inflationstation.net,TypeScript,
376,andylow1704/Inflation_Forecasting,Jupyter Notebook,"# Inflation_Forecasting
Canada's inflation rate forecasting using Autoregression, Random Forest and Long Short Term Memory(LSTM). The data were taken from the following sources and split into Pre-covid period and Covid period. The models were trained using 407 macroeconomic variables. 1,6 and 12-step ahead forecast models were created for each model.  

# Data Sources:
- https://www.stevanovic.uqam.ca/DS_LCMD.html
- https://www150.statcan.gc.ca/t1/tbl1/en/tv.action?pid=1810000601

# Pre-Covid Results
 Model  | 1-step RMSE | 6-step RMSE | 12-step RMSE |   
| ------------- | ------------- | ------------- | ------------- | 
| AR(2)  | 0.00208 | 0.00534 | 0.007109 | 
| Random Forest | 0.000710 | 0.00489 | 0.00595 | 
| LSTM  | 0.00112 | 0.00522 | 0.00719 | 

# Covid Results
 Model  | 1-step RMSE | 6-step RMSE | 12-step RMSE |   
| ------------- | ------------- | ------------- | ------------- | 
| AR(2)  | 0.00346 | 0.0135 | 0.0195 | 
| Random Forest | 0.00141 | 0.0119 | 0.0207 | 
| LSTM  | 0.00206 | 0.0114 | 0.0198 | 

# AR(2) 1-step forecast
![](https://github.com/andylow1704/Inflation_Forecasting/blob/main/Images/AR2_1.PNG)

# AR(2) 6-step forecast
![](https://github.com/andylow1704/Inflation_Forecasting/blob/main/Images/AR2_6.PNG)

# AR(2) 12-step forecast
![](https://github.com/andylow1704/Inflation_Forecasting/blob/main/Images/AR2_12.PNG)

# Random Forest 1-step forecast
![](https://github.com/andylow1704/Inflation_Forecasting/blob/main/Images/RF_1.PNG)

# Random Forest 6-step forecast
![](https://github.com/andylow1704/Inflation_Forecasting/blob/main/Images/RF_6.PNG)

# Random Forest 12-step forecast
![](https://github.com/andylow1704/Inflation_Forecasting/blob/main/Images/RF_12.PNG)

# LSTM 1-step forecast
![](https://github.com/andylow1704/Inflation_Forecasting/blob/main/Images/LSTM_1.PNG)

# LSTM 6-step forecast
![](https://github.com/andylow1704/Inflation_Forecasting/blob/main/Images/LSTM_6.PNG)

# LSTM 12-step forecast
![](https://github.com/andylow1704/Inflation_Forecasting/blob/main/Images/LSTM_12.PNG)
"
377,NoahSato/Inflation.-Project,,"# Inflation.-Project
Visual Representations Based on Historical Income and Inflation Data
"
378,bogdantomicic/inflation_calculator,JavaScript,
379,nchukalovskiy/spark-inflation,Python,"# spark-inflation

Web scraping with Kafka-Spark Structured Streaming (w/Mllib) and monitoring with Streamlit front end
"
380,alexisarte/inflation-calculator,JavaScript,"# inflation-calculator
This Inflation Calculator measures the buying power of the dollar over time.

Project link: https://inflation-calculator.azurewebsites.net/
"
381,BCzyzewski/Inflation_Dashboard,,"# Inflation_Dashboard
"
382,fvillarreal27/Inflation_Forecast,Jupyter Notebook,"### **Inflation Forecast in a Dollarized Economy: The Case of Ecuador**

**Note: In process**

This project compares the use of traditional econometric methods, such as the vector autoregressive model (VAR), with machine learning models to forecast inflation in Ecuador. For this purpose, I use a database that contains macroeconomic and financial variables.
"
383,aml888/inflation-calculator,Ruby,
384,yzygithub/inflation-calculate,HTML,"#通胀计算 说明手册
![inflationUI](https://pan.baidu.com/s/1qY77gJi)
* years -- 输入要计算的年数
* inflation -- 输入通胀系数，比如：如果每年7%，就输入1.07。
* multiple -- 第n年的通胀倍数。假设years=x，inflation=y，则multiple=y<sup>x-1</sup> 。
* sum -- 从第一年到第n年，通胀倍数之和。




"
385,sarah-springer/AF_Inflation,,"# AF_Inflation
AF Simulation für die Inflation
"
386,ivan-cc-cc/Education-Inflation,R,
387,MaxKocheshkov/Dynamic_inflation,Python,
388,nbadino/gtrend-inflation,R,# gtrend-inflation
389,andreacutrera/Forecasting-Inflation,,"# Forecasting-Inflation
A project work for predictions of inflation of euro area. Creation of a predictive ARMA model for the time series of quarterly data of inflation.
Predictions are up to last quarter of 2020.
"
390,lvdonofrio14/Inflation-ML,Jupyter Notebook,"# Building a Resilient Portfolio
## Mala Sharma, Alexander Narvaez-Duckworth, Louis Donofrio, George Mihalopoulos, Matt Szoke

## Proposal / Hypothesis

We have used various machine learning models to study market trends from the early 2000s to 2021. We believe that a multifaceted machine learning approach would allow us to analyze various businesses, commodities, and macroeconomic metrics to discern the investments that may be most resilient to inflation and other periods of economic uncertainty such as during an ongoing global pandemic. We have also focused on company specific financial parameters and distinct outcomes as compared to large-cap closing prices.

### Inflation Forecasting With FRED Macro-Data and Commodity Pricing

Inflationary numbers (CPI, PPI) are on the rise and there is a great deal of debate as to the duration of this increase.  There are valid arguments linking it to supply chain interruptions, and others arguing it is tied more closely to fiscal policy.  In this research, we used several data sets from FRED going back to 2000.  Our feature set included, Commercial and Industrial Loans, Unemployment, Housing Starts, Personal Savings Rate, 10yr Treasury, and CPI.  The FRED data became our X (independent) data set, while CPI was our Y (dependent).  

An initial analysis of the data using a correlation matrix, revealed a strong relationship with C&I Loans, and a moderate relationship with Unemployment.  
![correlationFred](https://github.com/anduckworth/ml_inflation/blob/f16cfdc6979e265d982b107b6c43fcaba5e74041/Images/FREDdataCorrelation.png)

Our models were built with regression methods, so our data needed to be lagged and we also used log returns to reduce the scale in the data.

When examining the model performance, we paid close attention to results with our Test set.  Elastic Net, KNN, and GBR performed the best out of the 11 tested.  We also developed a LSTM which did not perform well.

![AlgoFred](https://github.com/anduckworth/ml_inflation/blob/fb7439556cb1804e8aa387fc0770aa5cd7b8871a/Images/FREDalgocomparison.png)

The second approach to our inflation forecasting method was to repeat the process using commodity pricing as our X data set.  We followed the same methodology and appear to have derived a more meaningful model as a result using GBR. 

![CommCorr](https://github.com/anduckworth/ml_inflation/blob/fb7439556cb1804e8aa387fc0770aa5cd7b8871a/Images/commodities_correlation.png)
Although the model seems to lag the actual numbers in areas and did not catch the 2020 drop, it moves in the correct directions and could be a viable tool for forecasts when tuned further. KEY: <br>
HG=F  is Copper <br>
SI=F  is Silver <br>
GC=F  is Gold <br>
LBS=F is Lumber <br>
CL=F  is Crude Oil <br>
KC=F  is Coffee <br>
ZC=F  is Corn <br>
ZW=F  is Wheat <br>
CPI   is Consumer Price Index <br>

![CommGBR](https://github.com/anduckworth/ml_inflation/blob/fb7439556cb1804e8aa387fc0770aa5cd7b8871a/Images/GBRwithCOMMODITY.png)

### Automated Stock Selection Using KMEANS

Before analyzing the market for inflation we needed to come up with a portfolio of stocks to test it on. We wanted a well diversified portfolio but analyzing hundreds of stocks could be very costly time wise. K-Means clustering took care of this problem by giving us a diversified and streamlined selection of stocks. Using unsupervised learning the model was able to divide stocks with similar characteristics into different groupings that we may not have been able to see on our own.   

![returns_volatility](https://user-images.githubusercontent.com/78940231/127224469-0990d302-cdf7-48cd-b327-08d091a1e616.png)

-We started out by pulling in all of the closing prices for the components of the S&P500. From there we created a data frame of the average returns and volatility.

![elbow_curve](https://user-images.githubusercontent.com/78940231/127224647-5f2b8b5b-04f0-4cee-b790-a817f781aff6.png)

-Before running the K-Means model we needed to figure out how many clusters we would want to seperate the data into. We used the elbow curve approach and it showed that 5 clusters was the optimal amount.

![clusters](https://user-images.githubusercontent.com/78940231/127224879-2d9b5586-cd0e-4bbc-9665-34d2f1518df1.png)

-We then ran our K-Means model and got our clustering results
-This graphs shows the 5 different clusters and the stars represent the centroid of each cluster. 

![sharpe_ratio](https://user-images.githubusercontent.com/78940231/127225092-b6291f21-10ef-47c7-bc40-70abb0163252.png)

-To ensure a well diversified portfolio we selected one stock from each cluster. We did this by calculating the Sharpe Ratio for each stock and then taking the stock with the highest ratio from each cluster.
-The Sharpe Ratio is a financial metric that measures the performance of a stock vs its risk. The higher the score the better

![sp500_vs_selected_stocks](https://user-images.githubusercontent.com/78940231/127225412-ad277632-e998-4da2-8d46-37ed674220ef.png)

-By doing this we landed upon 5 well diversified stocks from a dataset of hundreds 

### Machine Learning on Company Financials
## Home Depot Case Study Part I

We used [Polygon](https://polygon.io/stocks) as the primary source of company financial information. This was a useful API for testing because of its speed and easy access to information through Get requests. We pulled in all of the financial data for our respective companies to the notebook and created a dataframe from it with a datetime index. Then we set a return period for the amount of time we would lag the dataset in order to perform training and testing, and scaled/preprocessed the data using standard scaler. To visualize the data, we utilized a correlation matrix. To dial in on the data that we were using in our X variable we decided to utilize the selectKbest method from sklearn. This helped us narrow down the valuable columns to 10, using the selectkbest top 10 scores. After this, we set our X variable dataset to these 10 columns and proceeded with determing the best models to use for this data. The lowest errors for the testing data the Linear Regression, Elastic Net, and Lasso models from sklearn. We graphed these threee different models and the predicted was extremely similar to the actual for all three. 

![LinearRegression](financialStatements/images/seven.png)
![Elastic Net](financialStatements/images/eight.png)
![Lasso](financialStatements/images/nine.png)
![Correlation Matrix](ml_inflation/Images/Alex_Correlation_Matrix.png)

### Natural Language Processing for Financial Analysis
## Home Depot Case Study Part II

![Home Depot Closing Prices](https://github.com/anduckworth/ml_inflation/blob/main/Images/HD_plot_1_George.png)

![Home Depot Percent Change in Closing Prices](https://github.com/anduckworth/ml_inflation/blob/main/Images/HD_pct_change.png)

![Home Depot Sentiment Analysis from Quarterly Reports](https://github.com/anduckworth/ml_inflation/blob/main/Images/pos_neg_HD_sentiment.png)

### Findings 

We found that marketCapitalization,	sharePriceAdjustedClose, priceSales, priceToSalesRatio, enterpriseValueOverEBITDA, priceToEarningsRatio, priceEarnings, enterpriseValueOverEBIT, dividendYield, issuanceEquityShares were the pieces of a companies financial statement that contribute the most to predicting the enterprise value. This makes sense because the [Enterprise value includes in its calculation the market capitalization of a company, short-term and long-term debt as well as any cash on the company's balance sheet.](https://www.investopedia.com/terms/e/enterprisevalue.asp) Enterprise value is basically a more robust form of the market capitalization because if you were to completely takeover the company, the enterprise value tells you the debt you would have to pay off and the total amount of cash on hand that is able to pay that debt off and any other parts of the acquisition. To take this part of the project a step further, I beleive it would be useful to connect the beginning of the company financials to the KMEANS automated stock selection and perform the financial analysis based off of those companies. In addition to this we would also be able to tie the performance of these company's enterprise values to inflation to create an automated, machine learning generated, portfoloio selector to compete with an inflationary environment.

Google Slides and README editing by Mala Sharma. Everything in this project was a team effort. All work here is original and posted in July 2021.
"
391,argray17/inflation-calculator,Python,"# inflation-calculator
A tool for projecting future consumer price index expenditures using data from the U.S. Bureau of Labor Statistics

## dependencies

```bash
pip install pandas
pip install beautifulsoup4
pip install requests
```

## usage

```bash
./main.py
```
runs the script using default parameters (uses test-1.xlsx file)

```bash
./main.py your_file_name.xlsx
```
runs the script using the file name provided as a command line argument (file must be saved in the \files directory)

the file (template.xlsx) has been provided for the creation of new files with personal data for calculations

```bash
https://www.bls.gov/cpi/tables/supplemental-files/news-release-table2-202110.xlsx :: 0
https://www.bls.gov/cpi/tables/supplemental-files/news-release-table2-202109.xlsx :: 1
https://www.bls.gov/cpi/tables/supplemental-files/news-release-table2-202108.xlsx :: 2
...
select table:
```
the most recent files from U.S. B.L.S. website are pulled for selection by user (select using number to the right of url)

```bash
name file:
```
you are prompted to name the output file to be saved in the \files firectory with calculated projections

```bash
          category                    current annual      projected annual      current month     projected month
0         net income                  63179.00            67096.09              5264.92           5292.99
1         food at home                3935.00             4147.49               327.92            330.76
                                                          ...
                                                          ...
                                                          ...
20        other personal services     600.00              624.00000             50.00             50.166667
```
the results are printed to the console

## contributors

Austin Gray"
392,shiro8x8/project-inflation,,
393,RexDeux/Inflation-Dashboard,Ruby,"# README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...
"
394,fndpires/BRAZIL-Inflation,Jupyter Notebook,
395,SolvingInflation/SolvingInflation,,"- 👋 Hi, I’m @SolvingInflation
- 👀 I’m interested in Hiring Solidity and Blockchain Devs who want to solve a real global problem 
- 🌱 I’m currently learning Smart contracts 
- 💞️ I’m looking to collaborate on working together in 2022
- 📫 How to reach me when you want to be part of the team and the mission: jobs@thestandard.io 

<!---
SolvingInflation/SolvingInflation is a ✨ special ✨ repository because its `README.md` (this file) appears on your GitHub profile.
You can click the Preview link to take a look at your changes.
--->
"
396,Beyramayadi/inflation-calculator,HTML,
397,mnperic/forecasting-inflation,Jupyter Notebook,"# Forecasting Inflation
 Forecasting Australian inflation (CPI) figures using machine learning (fbProphet).
 
 ## Analysis
 ### Model
 
 <p align=""center"">
  <img src=""https://github.com/mnperic/forecasting-inflation/blob/main/Images/inflation_prediction_model.png"" alt=""inflation_prediction_model""/>
  </p>
  
 ### Forecast
 
 <p align=""center"">
  <img src=""https://github.com/mnperic/forecasting-inflation/blob/main/Images/inflation_forecast.png"" alt=""inflation_forecast""/>
  </p>
  
  ## References
  
  Australian Bureau of Statistics (ABS), 2022, <i>Consumer Price Index, Australia</i>, https://www.abs.gov.au/statistics/economy/price-indexes-and-inflation/consumer-price-index-australia
"
398,shoemaker/calc-inflation,JavaScript,"# calc-inflation
Node.js console app to bulk calculate inflation-adjusted values, with data from the [Bureau of Labor Statistics](http://www.bls.gov/developers/home.htm).

## Configuration
1. Rename 'sample-config.js' to 'config.js' or obtain the decryption key for the Makefile. 
2. **Register for a BLS API Key**. API requests to the Bureau of Labor Statistics require an API key. [Create an API account](http://data.bls.gov/registrationEngine/) with the BLS to obtain an API key. 
3. Paste your new API key into the `blsAPIKey` property in 'config.js'. 
4. Populate 'input.json' with the dates and values you wish to find the current inflation-adjusted values. 

## Use It 
    $> npm install
    $> npm start
The console app will request CPI data from the BLS, calculate the inflation-adjusted values found in 'input.json', then write a CSV file. 

## Tests
Using [Mocha](http://mochajs.org/) and [Expect](https://github.com/LearnBoost/expect.js) to test the BLS API. 
    
    $> npm test
"
399,Cheo21/inflation-calculator,HTML,
400,natrajvairavan5/Predicting-Inflation,Jupyter Notebook,
401,vn-quant/inflation-eu,,"# Inflation rate-eu
I use data from trading economics to visualize the inflation rate in some EU countries 

![inflation rate reduce](https://user-images.githubusercontent.com/83815398/177717678-ecc99560-0765-443b-90e5-107a8a18deb2.jpg)

Reference 
1. https://twitter.com/AntoniaPopes/status/1526844887060070402
2. https://tradingeconomics.com/country-list/inflation-rate?continent=europe
3. https://ec.europa.eu/eurostat/documents/2995521/14636256/2-31052022-AP-EN.pdf/3ba84e21-80e6-fc2f-6354-2b83b1ec5d35#:~:text=Euro%20area%20annual%20inflation%20is,office%20of%20the%20European%20Union.
"
402,OGADAMo/inflation-calculator,JavaScript,"""# js-kurs-kalkulator-inflacije"" 
"
403,N1ktt/SUSin-inflation,JavaScript,# SUSin-inflation
404,maritsandstad/CorpInflation,TeX,
405,rossngreenwood/eternal_inflation,MATLAB,# eternal_inflation
406,IoannisPapadakis/inflation-cpi,,"# inflation-cpi
Convert dollar amounts between years using BLS CPI figures
"
407,FouadAElNahal/LayoutInflation,Java,
408,jakepscott/Inflation-Analysis,R,
409,YizhouLouisLu/Inflation_computation,Julia,
410,bhaveshkumar80/Medical-Inflation,,"# Medical-Inflation
A notebook with the analysis of Medical categories  and subcategories CPI result over the years and Prediction of next 10 year results
"
411,jy2915/Inflation_202107,,
412,ruhl0029/inflation-markets,,"# Inflation, the Fed's dilemma, and the stock market
Files associated with my presentation at UW Now on February 15, 2022.
"
413,KieranStewart-Phillips/Upload_inflation,HTML,# Upload_inflation
414,InteligenciaEmpresarial/Inflation_tracker,Python,"# Inflation_tracker
 
"
415,natalierw/food-inflation,,"# Where's The Beef...<em>Price</em>?
An exploratory analysis of food price inflation during the COVID-19 pandemic. This analysis was the final project for a Master's level econometrics course, in which we were instructed to write a blog-post.
"
416,gafnts/Inflation-forecasting,TeX,"# Inflation-forecasting
Comparison between econometric and machine learning models for inflation rate forecasting.
"
417,dsofe/inflation-data,,
418,kgroble/grade-inflation,Jupyter Notebook,
419,CristiPriciu/Inflation-Calculator,C#,"# Inflation Calculator

A Visual Studio Desktop App made for training purposes.

If you know some SQL you might rebuild the database starting with inflationDB.sql

If not, just see the C# and know that its working.
"
420,ivan-cc-cc/Education-Inflation-,,
421,anduckworth/ml_inflation,Jupyter Notebook,"# Building a Resilient Portfolio
## Mala Sharma, Alexander Narvaez-Duckworth, Louis Donofrio, George Mihalopoulos, Matt Szoke

## Proposal / Hypothesis

We have used various machine learning models to study market trends from the early 2000s to 2021. We believe that a multifaceted machine learning approach would allow us to analyze various businesses, commodities, and macroeconomic metrics to discern the investments that may be most resilient to inflation and other periods of economic uncertainty such as during an ongoing global pandemic. We have also focused on company specific financial parameters and distinct outcomes as compared to large-cap closing prices.

### Matt: Inflation Forecasting With FRED Macro-Data and Commodity Pricing

Inflationary numbers (CPI, PPI) are on the rise and there is a great deal of debate as to the duration of this increase.  There are valid arguments linking it to supply chain interruptions, and others arguing it is tied more closely to fiscal policy.  In this research, we used several data sets from FRED going back to 2000.  Our feature set included, Commercial and Industrial Loans, Unemployment, Housing Starts, Personal Savings Rate, 10yr Treasury, and CPI.  The FRED data became our X (independent) data set, while CPI was our Y (dependent).  

An initial analysis of the data using a correlation matrix, revealed a strong relationship with C&I Loans, and a moderate relationship with Unemployment.  
![correlationFred](https://github.com/anduckworth/ml_inflation/blob/f16cfdc6979e265d982b107b6c43fcaba5e74041/Images/FREDdataCorrelation.png)

Our models were built with regression methods, so our data needed to be lagged and we also used log returns to reduce the scale in the data.

When examining the model performance, we paid close attention to results with our Test set.  Elastic Net, KNN, and GBR performed the best out of the 11 tested.  We also developed a LSTM which did not perform well.

![AlgoFred](https://github.com/anduckworth/ml_inflation/blob/fb7439556cb1804e8aa387fc0770aa5cd7b8871a/Images/FREDalgocomparison.png)

The second approach to our inflation forecasting method was to repeat the process using commodity pricing as our X data set.  We followed the same methodology and appear to have derived a more meaningful model as a result using GBR. 

![CommCorr](https://github.com/anduckworth/ml_inflation/blob/fb7439556cb1804e8aa387fc0770aa5cd7b8871a/Images/commodities_correlation.png)
Although the model seems to lag the actual numbers in areas and did not catch the 2020 drop, it moves in the correct directions and could be a viable tool for forecasts when tuned further. KEY: <br>
HG=F  is Copper <br>
SI=F  is Silver <br>
GC=F  is Gold <br>
LBS=F is Lumber <br>
CL=F  is Crude Oil <br>
KC=F  is Coffee <br>
ZC=F  is Corn <br>
ZW=F  is Wheat <br>
CPI   is Consumer Price Index <br>

![CommGBR](https://github.com/anduckworth/ml_inflation/blob/fb7439556cb1804e8aa387fc0770aa5cd7b8871a/Images/GBRwithCOMMODITY.png)

### Lou: Automated Stock Selection Using KMEANS

Before analyzing the market for inflation we needed to come up with a portfolio of stocks to test it on. We wanted a well diversified portfolio but analyzing hundreds of stocks could be very costly time wise. K-Means clustering took care of this problem by giving us a diversified and streamlined selection of stocks. Using unsupervised learning the model was able to divide stocks with similar characteristics into different groupings that we may not have been able to see on our own.   

![returns_volatility](https://user-images.githubusercontent.com/78940231/127224469-0990d302-cdf7-48cd-b327-08d091a1e616.png)

-We started out by pulling in all of the closing prices for the components of the S&P500. From there we created a data frame of the average returns and volatility.

![elbow_curve](https://user-images.githubusercontent.com/78940231/127224647-5f2b8b5b-04f0-4cee-b790-a817f781aff6.png)

-Before running the K-Means model we needed to figure out how many clusters we would want to seperate the data into. We used the elbow curve approach and it showed that 5 clusters was the optimal amount.

![clusters](https://user-images.githubusercontent.com/78940231/127224879-2d9b5586-cd0e-4bbc-9665-34d2f1518df1.png)

-We then ran our K-Means model and got our clustering results
-This graphs shows the 5 different clusters and the stars represent the centroid of each cluster. 

![sharpe_ratio](https://user-images.githubusercontent.com/78940231/127225092-b6291f21-10ef-47c7-bc40-70abb0163252.png)

-To ensure a well diversified portfolio we selected one stock from each cluster. We did this by calculating the Sharpe Ratio for each stock and then taking the stock with the highest ratio from each cluster.
-The Sharpe Ratio is a financial metric that measures the performance of a stock vs its risk. The higher the score the better

![sp500_vs_selected_stocks](https://user-images.githubusercontent.com/78940231/127225412-ad277632-e998-4da2-8d46-37ed674220ef.png)

-By doing this we landed upon 5 well diversified stocks from a dataset of hundreds 

### Alex: Machine Learning on Company Financials
## Home Depot Case Study Part I

We used [Polygon](https://polygon.io/stocks) as the primary source of company financial information. This was a useful API for testing because of its speed and easy access to information through Get requests. We pulled in all of the financial data for our respective companies to the notebook and created a dataframe from it with a datetime index. Then we set a return period for the amount of time we would lag the dataset in order to perform training and testing, and scaled/preprocessed the data using standard scaler. To visualize the data, we utilized a correlation matrix. To dial in on the data that we were using in our X variable we decided to utilize the selectKbest method from sklearn. This helped us narrow down the valuable columns to 10, using the selectkbest top 10 scores. After this, we set our X variable dataset to these 10 columns and proceeded with determing the best models to use for this data. The lowest errors for the testing data the Linear Regression, Elastic Net, and Lasso models from sklearn. We graphed these threee different models and the predicted was extremely similar to the actual for all three. 

![LinearRegression](financialStatements/images/seven.png)
![Elastic Net](financialStatements/images/eight.png)
![Lasso](financialStatements/images/nine.png)
![Correlation Matrix](ml_inflation/Images/Alex_Correlation_Matrix.png)

### George: Natural Language Processing for Financial Analysis
## Home Depot Case Study Part II

![Home Depot Closing Prices](https://github.com/anduckworth/ml_inflation/blob/main/Images/HD_plot_1_George.png)

![Home Depot Percent Change in Closing Prices](https://github.com/anduckworth/ml_inflation/blob/main/Images/HD_pct_change.png)

![Home Depot Sentiment Analysis from Quarterly Reports](https://github.com/anduckworth/ml_inflation/blob/main/Images/pos_neg_HD_sentiment.png)

### Findings 

We found that marketCapitalization,	sharePriceAdjustedClose, priceSales, priceToSalesRatio, enterpriseValueOverEBITDA, priceToEarningsRatio, priceEarnings, enterpriseValueOverEBIT, dividendYield, issuanceEquityShares were the pieces of a companies financial statement that contribute the most to predicting the enterprise value. This makes sense because the [Enterprise value includes in its calculation the market capitalization of a company, short-term and long-term debt as well as any cash on the company's balance sheet.](https://www.investopedia.com/terms/e/enterprisevalue.asp) Enterprise value is basically a more robust form of the market capitalization because if you were to completely takeover the company, the enterprise value tells you the debt you would have to pay off and the total amount of cash on hand that is able to pay that debt off and any other parts of the acquisition. To take this part of the project a step further, I beleive it would be useful to connect the beginning of the company financials to the KMEANS automated stock selection and perform the financial analysis based off of those companies. In addition to this we would also be able to tie the performance of these company's enterprise values to inflation to create an automated, machine learning generated, portfoloio selector to compete with an inflationary environment.

Google Slides and README editing by Mala Sharma. Everything in this project was a team effort. All work here is original and posted in July 2021.
"
422,SedimentaryRockStar/Inflation_Prediction,Python,"A Canada Inflation Prediction project carried out by deploying LSTM. 

# To Deploy more, Please visit: https://inflationpred1.herokuapp.com/
   
"
423,zyxd/inflation-api,,"# inflation-api
![inflation-api build](https://github.com/jltimm/inflation-api/workflows/inflation-api%20build/badge.svg?branch=master)"
424,aditya4274/Inflation-forecast,R,"# USA Inflation-forecast

What we are currently working on? :nerd_face:
- We are currently working on forecasting the inflation in consumer prices for USA by studying data from the past 61 years. The data that we are using to forecast is collected and curated by The World Bank organization. We can find the link to the data at https://data.worldbank.org/indicator/FP.CPI.TOTL.ZG
- This is important to understand the monetary policies. Since monetary policy transmission is associated with significant lags, central banks aiming to achieve price stability need to be forward-looking in their decisions as well – which underscores the importance of inflation forecasting.
-  We will consider historical yearly data for USA from 1960 upto 1920 and basis this we will forecast the inflation for 2021.
- To measure the accuracy of the forecast, we'll be using the Root Mean Square error method which shows the average of the squared difference between the original and predicted values in the data set.
- The forecast will have a point specific outcome.
- Team members: github.com/anushkau and github.com/Yashshah0223
"
425,eakande/gdp_inflation,Python,
426,pccostapt/european-inflation,Jupyter Notebook,"# Project 2: Reflection of Inflation on European Wage - Tableau Visualization

---

**Link for the Tableau Viz:** <b><a href=""https://public.tableau.com/views/ReflectionofInflationonEuropeanWage/ReflectionofInflationonEuropeanWage?:language=pt-BR&:display_count=n&:origin=viz_share_link"" target=""_blank"">**here**</a></b>

**Link for the data cleaning code:** <b><a href=""https://github.com/pccostapt/european-inflation/blob/main/European_Inflation.ipynb"" target=""_blank"">**here**</a></b>

Consumer Price Index (CPI) measures changes over time in the general level of prices of goods and services that households acquire for the purpose of consumption. They were originally introduced in some countries to increase wages for workers in order to balance the increase of the living costs (given by the CPI). Currently is used widely by governments and central banks as a macroeconomic indicator of inflation.

In this Tableau Visualization, we take a look on how much the inflation really affects european citizens and how much is lost to it. There is a deep dive to understand which categories affect the most and whether or not the minimum wage increases in order to attenuate the efects of inflation.
"
427,djvex/inflation-sucks,,��#
428,ajraduenz/graphics-inflation,TypeScript,"- Brazilian Inflation 
- Compound interest chart
- Simulador de juros fácil, Juros Composto, Calculadora de juros composto"
429,garcialn/Inflation_Prediction,,"# Inflation_Prediction
Repo for Brazilian Inflation (IPCA) Prediction using Time Series.
"
430,kylemouly/Forecasting-Inflation,,
431,xhp4y8/admin_inflation,R,"# admin_inflation
Codes and data for administered inflation paper 
"
432,Junying123/test_inflation,,
433,LeifAndersenGH/Inflation-Visualization,Jupyter Notebook,
434,elmarmertens/trendInflation,Fortran,"# trendInflation

code for trend inflation model of Mertens (2016, REStat, http://dx.doi.org/10.1162/REST_a_00549) and Garnier, Mertens and Nelson (2015, IJCB, http://www.ijcb.org/journal/ijcb15q4a2.htm).

The model implemented here is the variant with SV in all inflation gaps.

The `master` branch works with US as well as EuroAre data. US data provided by FRED (for realized and trimmed inflation; use of surveys is pending). Euro area data as obtained from the ECB's SDW, including Euroarea SPF expectations.

Complete replication files for the paper are here: http://dx.doi.org/10.7910/DVN/MUF2HC

## TODO
- add SV(O)-(t) shocks
- CTA or equationfilter code for VAR?
- consider SV ratio process?
"
435,harunsaracevicc/Inflation-calculator,CSS,
436,VSStole/Inflation-Calculator,CSS,"# Inflation-Calculator<img width=""598"" alt=""calc picture"" src=""https://user-images.githubusercontent.com/96592956/170838296-6d4d310a-42be-4c45-975d-a8bd3735bd95.png"">
"
437,dadaset/reprovacao-inflation,,
438,EntropistA/inflation-visualization,Jupyter Notebook,
439,cpohkwan/food-inflation,Jupyter Notebook,"**From lunchflation woes to global inflation pains**

**URL**: https://cpohkwan.github.io/food-inflation/

**Introduction**

This is my second project as a student with the Lede Program.

My story was inspired by my lunch-flation woes. After paying more for the food that I buy and charging more for the food that I sell, I decided to compare the food inflation rate in Singapore - where I live - to the rest of Southeast Asia, and then the rest of the world.

**Choice of Data Sets**

The main data set used in this project is the latest Food Inflation data from Trading Economics. I find this more useful than the Consumer Price Index (CPI) data that are published by the World Bank and Economist Intelligence Unit (EIU), as the weightage for food items used in the calculation of CPI varies from country to country. I also looked up the Food Price Index data compiled by the Food and Agriculture Organization (FAO), but this data doesn't include a breakdown by country.

**Data Cleaning and Exploratory Analysis**

Not all entries in the Trading Economics food inflation data have the same reference period. The latest data for most countries were recorded in May or June 2022, but some countries such as Afghanistan, Syria and Myanmar have not published 2022 data yet. I decided to drop countries with no 2022 data from my analysis.

After looking at the mean and median food inflation rates in Southeast Asia, I merged the main data set with a EIU data set that shows how much agriculture accounts for a country's GDP. I didn't see an obvious inverse relationship between a country's agricultural output and its foof inflation rate.

I also looked at the global mean and median food inflation rates, and countries on both ends of the spectrum. I saw a big disparity between countries with hyperinflation and those that are still managing fine.

Next, I merged this data set with a World Bank classification of countries by their income groups, and looked at the mean and median of high income, middle income and low income countries.

**Data Visualisation**

The charts, heat map and tables in this story were plotted in Data Wrapper. I did not export these files using ai2html as I wanted to retain the interactive features on the charts / tables, which allow readers to hover over countries on the map and search for a country to find out where it stands in terms of food inflation rate.

**Contact me**

Got a feedback / question for me?
You can reach me at cpohkwan@gmail.com =)
"
440,HerrDiesel/pln-inflation,JavaScript,"# PLN inflation
[![pln-inflation](https://snyk.io/advisor/npm-package/pln-inflation/badge.svg)](https://snyk.io/advisor/npm-package/pln-inflation)

Convert prices in Polish złoty (ISO 4217 code 'PLN') from one year to another.


## Usage

```js
import inflation from 'pln-inflation';

const current = inflation({ year: 1995, amount: 10 });
console.log(`10 zł in 1995 was worth ${current} zł in 2021`);
```

## Documentation

There is a single function exported by the library that has one required and one optional argument. It returns the converted price.

### `inflation(from, [to])`

The required `from` argument and the optional `to` argument are similar objects.

#### `from`

- `amount` is the nominal price
- `year` is a year between 1995 and 2021

#### `to` (optional)

- `year` is a year between 1995 and 2021 and is 2021 (the last full year of data) by default

## Data source

All data comes from the [Statistics Poland (Polish: Główny Urząd Statystyczny)](https://stat.gov.pl/obszary-tematyczne/ceny-handel/wskazniki-cen/wskazniki-cen-towarow-i-uslug-konsumpcyjnych-pot-inflacja-/roczne-wskazniki-cen-towarow-i-uslug-konsumpcyjnych/) and is therefore limited to years between 1950 and 2021. However due to redenomination of Polish złoty in 1995 this package is currently limited to years between 1995 and 2021.

## Prior art and motivation

- I came across ['us-inflation' package](https://www.npmjs.com/package/us-inflation).
- I was inspired by the president of the National Bank of Poland and his statement that [""inflation does not affect the wealth of Polish citizens""](https://youtu.be/njqEBOntE9I) (I rephrased it a bit for the sake of clarity)."
441,NjaNja7/inflation-calculator,,# inflation-calculator
442,cptanalatriste/inflation-tracker,Java,"You have successfully created an Atlassian Plugin!

Here are the SDK commands you'll use immediately:

* atlas-run   -- installs this plugin into the product and starts it on localhost
* atlas-debug -- same as atlas-run, but allows a debugger to attach at port 5005
* atlas-cli   -- after atlas-run or atlas-debug, opens a Maven command line window:
                 - 'pi' reinstalls the plugin into the running product instance
* atlas-help  -- prints description for all commands in the SDK

Full documentation is always available at:

https://developer.atlassian.com/display/DOCS/Introduction+to+the+Atlassian+Plugin+SDK
"
443,cramaechi/inflation-calculator,C++,"# Inflation Calculator
A program that gauges the rate of inflation for the past year.

## Setup
1. Download and install [Git](https://git-scm.com/downloads), if you don't already have it.

2. Open terminal and run the git clone command:

   ```
   $ git clone https://github.com/cramaechi/inflation-calculator.git
   ```
    or [download as ZIP](https://github.com/cramaechi/inflation-calculator/archive/master.zip).

3. Go to the project folder:

   ```
   $ cd inflation-calculator
   ```

4. Compile:

   ```
   $ make
   ```
   
## Usage
Run:

```
$ ./inflation_calculator
```

Sample Output:
```
Enter the number of liters consumed by your car: 57                                                                                                                                                                                           
                                                                                                                                                                                                                                              
Enter the number of miles driven by your car: 23                                                                                                                                                                                              
                                                                                                                                                                                                                                              
Your car has delivered 1.53 miles per gallon.                                                                                                                                                                                                 
                                                                                                                                                                                                                                              
Start over? y                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                              
Enter the number of liters consumed by your car: 26                                                                                                                                                                                           
                                                                                                                                                                                                                                              
Enter the number of miles driven by your car: 15                                                                                                                                                                                              
                                                                                                                                                                                                                                              
Your car has delivered 2.18 miles per gallon.                                                                                                                                                                                                 
                                                                                                                                                                                                                                              
Start over? n
```
"
444,ahjames11/shinyInflation,R,
445,federalfundstracker/Inflation-Adjuster,,
446,Judas503/Inflation-code,Python,"Python codes that numerically compute inflaton trajectories for ultra slow-roll inflation to evaluate the power spectrum of curvature pertrubations by solving the Mukhanov-Sasaki equation.
"
447,tkmymini/reconfigure_inflation,Python,
448,jolyonb/starting-inflation,Python,
449,carrowkeel/inflation_model,JavaScript,"# Model of the ""inflation hypothesis"" of the handicap principle

This repository contains the simulation code for generating data from the paper published in Behavioural Ecology https://academic.oup.com/beheco/article-abstract/31/3/784/5812610.

The simulation code is written in ECMAScript which can be run using Node.js or in a browser window. The benefit of the latter solution is it allows visualisation in real-time.

## Requirements

To run the simulation with Node.js, you will need to install it on your computer (see https://nodejs.org/en/download/)

## Downloading code

Create a directory to store the code and either download the zip file from this repository via the Github interface, or clone the repository into the directory.

## Running simulation

The file contains the simulation step function and an example of how the step function can be used to generate data. Edit the options object to manipulate the simulation parameters. At the moment running the simulation file (inflation_model.js) will print the result of a single simulation.

```
node inflation_model.js
```

## License

This project is licensed under CC BY 4.0
"
450,sebidelamata/dollarInflation,Python,"# dollarInflation
Measure inflation following 2020 COVID-19 market crash


###################################
###################################
###################################
### Dollar Inflation Project ######
### September 18, 2020 ############
### Miguel Sebastian de la Mata ###
###################################
###################################
###################################


####################################
## Summary of project goals ########
####################################

# The purpose of this project is to look at the inflation to the dollar
# caused by COVID-19 related economic fallout, including stimulus and unemployment
# This was inspired by seeing the price of SLV (silver spot price etf) rise about 83%
# from the march COVID-19 crash of 2020 to July of that same year. Gold has followed a similar,
# but not as extreme pattern. Stock prices have also recovered and then gone on to
# reach all-time highs. This was spurred on by Powell saying last week that he wants to
# raise the inflation goal to 2.5% , and seeing him saying that he sees no signs of current inflation.
#
# To me, there seems to be some discrepancy between what the precious metals are saying,
# and what Powell says. To me there is no good reason silver should have doubled in price.
# I think there is inflation happening outside of what Powell sees, and there is no way
# this could have been evened out by job losses when we have the first stimulus, unless
# he is seeing severe repercussions for the lag in a second effective stimulus outside of
# what has been offered by recent executive orders. On top of this I fail to believe that the
# CPI could faithfully represent inflation recently due to supply chain issues,
# and specifically the case where restaurants shutting down has affected how people consume
# the basic items used in the CPI. This is just a gut instinct.
# I would like to use this first data science blog post to either prove myself right or wrong
"
451,plaguedoctor39/russia_inflation,Python,
452,minjukum/Eternal-Inflation,C++,"# eternal-inflation
The code generates two .txt files;
one includes (t,phi) and the other includes the total number of e-folds.
"
453,thanut303/inflation-token,,"# inflation-token
"
454,ariqd/CalcInflation,Java,
455,wwkkww/inflation-calc,Java,
456,glass9/inflation-calculator,HTML,# Inflation-Calculator
457,bobcatCA/stimulus_inflation,Python,"# stimulus_inflation
# Readme file
"
458,ginaaheeb/inflation-2021,HTML,# inflation-2021 
459,jelilat/inflation-dashboard,Jupyter Notebook,"# Decentralized Inflation Dashboard

The goal of this project is to build a censorship resistant inflation dashboard. Detailed information about the inspiration behind this project can be found [!here](https://1729.com/inflation). 

## What Do We Need to Build an Inflation Dashboard?

Building the inflation dashboard has so many mooving parts, but here are the things we need to do to build the dashboard. 

1. **Identify a large basket of goods**: A basket of goods refers to a fixed set of consumer products and services whose price is evaluated on a regular basis, often monthly or annually. This basket is used to track inflation in a specific market or country, so that if the price of the basket of goods increases by 2% in a year, inflation can thus be said to be 2%.

For this project, we'll be considering 10 of the products listed [!here](https://data.bls.gov/cgi-bin/surveymost?ap) by the US Bureau of Statistics. 

2. **Obtain price data**: We will obtain real-time price data of the basket of goods identified in `1.` from [!Instacart](https://www.instacart.com/). To achieve this, we'll train an ML model that can automatically identify products and their associated prices on a website.

3. **Put price data on-chain**: Once, we have our data, we'll publish it on-chain. The refined data could be on-chain, the raw price data could be on IPFS or equivalent, and any original URLs with prices of goods could potentially also be redundantly backed up using services like archive.is or web.archive.org.

4. **A smart contract to calculate inflation**

5. **Frontend**: We'll also create a simple frontend application where people can go to view inflation dashboard.

## Step 1: Training Our ML Model

To train our ML model, we need to collect some data. We'll take some screenshots on instacart and label them using labelimg. The labels that will be considered are the Product, Name, and Price. Here is a sample screenshot.

[!image](labelImg.png)

The screenshots from Instacart should be saved in the data/images folder and the annotations should be saved in data/annotations folder.

"
460,TheLandStander/inflation-calculator,,
461,rita-milani/Inflation_barchart,Jupyter Notebook,"[![author](https://img.shields.io/badge/author-rmilani-red.svg)](https://www.linkedin.com/in/rita-de-cassia-m-59ab7451/) [![](https://img.shields.io/badge/python-3.7+-blue.svg)](https://www.python.org/downloads/release/python-365/) [![GPLv3 license](https://img.shields.io/badge/License-GPLv3-blue.svg)](http://perso.crans.org/besson/LICENSE.html) [![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/rafaelnduarte/portfolio/issues)

<p align=""center"">
  <img src=""https://www.indaiatuba.sp.gov.br/relacoes-institucionais/imprensa/noticias/mini_noticia_ibge.jpg""height=200px >
</p>


## Brazilian Inflation Bar Chart Race
Bar Chart Race is a plot that has been very used recently in the media to present the evolution of a variable along time. The most known example is the Covid Bar Chart, with evolution of cases/deaths by country. Since then, many other topics have been portrayed with a Bar Chart Race, from Formula 1 to Super Heroes preferences by the public. Here, I use it to show the evolution of Brazilian inflation since 2021, divided by groups, subgroups and subitems. bar_chart_race library is used. 

* [Complete Project Here](https://github.com/rita-milani/Inflation_barchart/blob/main/CPI_barchart_race.ipynb)
* [YouTube: Brazilian CPI by Group (%12m) - IBGE](https://www.youtube.com/watch?v=RP5ZvzGGZDA&ab_channel=RitadeC%C3%A1ssiaMilani)
* [YouTube: Brazilian CPI by Subgroup (%12m) - IBGE](https://www.youtube.com/watch?v=1d_tfzHFdxE&ab_channel=RitadeC%C3%A1ssiaMilani)
* [YouTube: Brazilian CPI by Subitem (%12m) - IBGE](https://www.youtube.com/watch?v=tICwxri72Hc&ab_channel=RitadeC%C3%A1ssiaMilani)

**Related links and articles:**
* [LinkedIn](https://www.linkedin.com/in/rita-de-cassia-m-59ab7451/)
* [Portfolio](https://github.com/rita-milani)
* [LinkedIn Credit Card Fraud Detection](https://www.linkedin.com/pulse/credit-card-fraud-detection-rita-de-cassia-milani/?trackingId=qJ0KPz%2F7RGBLIE4YvDdk6g%3D%3D)

"
462,ay13/inflation-api,JavaScript,
463,kevinpavani/GDP-Inflation,Python,
464,gweymann2/MSSM-Inflation,Jupyter Notebook,
465,kbaro/inflation-calculator,CSS,"# inflation-calculator using JavaScript
"
466,CadenceElaina/Inflation-Calculator,HTML,"# Inflation-Calculator
 Input year and amount to return that amounts value in another year with rate of inflation
 
 TODO:
 1. formatting... Body sections and nav-section should be spaced better? 
 2. Hover over links animation is nice, but can overlap text on some pages
 3. links in footer lack cohesiveness with page
 4. overall symetry of the page is sus
 5. positioning of table and the data headers are too close and not easy to read??
 6. Why is there space below the contact header, but not on the other pages?
 7. Is the text / formulas readable?
 8. Is the page up to accessability standards?
 9. Add additional functionality with JS... Search by year? Search table? 
 10. Add graphs/charts... Generate graphs/charts based on the input to the calculator / allow comparision of inflation etc
 11. Comapre inflation globablly and generate charts to compare? 
 
"
467,craig552uk/uk-inflation,JavaScript,"UK Inflation
============

Tools for working with inflation-adjusted prices in the UK.

Uses ""Composite Price Index"" data provided by the [Bank of England][1].

Refer to the Bank of England site for the [methods used to adjust prices against inflation][2] and [caveats in the calculation data and techniques][3].

Usage
-----

Require the module the usual way
```javascript
> var ukinflation = require('ukinflation');
```

To find out what goods and services costing £23.60 in 1975 would have cost in 1985:

```javascript
> ukinflation.adjustCost(23.60, 1975, 1985);
65.33768545994066
```

To get the average inflation between two years:

```javascript
> ukinflation.averageInflation(1975, 1985)
10.719769831985682
```

You can also pass in Date objects if it's more convenient:

```javascript
> var from = new Date('1975');
> var to = new Date('1985');
> ukinflation.adjustCost(23.60, from, to);
65.33768545994066
```

Note that there's no data for the present year, so you can't convert to ""present day"" prices;

```javascript
> ukinflation.adjustCost(23.60, 1975, new Date());
Error: No UK inflation data available for the year 2016
```

[1]: http://www.bankofengland.co.uk/education/Pages/resources/inflationtools/calculator/index1.aspx
[2]: http://www.bankofengland.co.uk/education/Pages/resources/inflationtools/calculator/how.aspx
[3]: http://www.bankofengland.co.uk/education/Pages/resources/inflationtools/calculator/limitations.aspx"
468,keesvanz/Inflation-Calculator,Python,
469,justthetips/ml_inflation,Python,"# ml_inflation
Machine Learning to Predict Inflation
"
470,emgriffin6/predict_inflation,,"# predict_inflation
"
471,maritaria/inflation-calculator,HTML,
472,shawn8777/Inflation-master,C#,"# Inflation
"
473,mariobraga/inflation-calculator,HTML,
474,japroc/numbeo_inflation,Python,"# numbeo_inflation
Tool to evaluate inflation according to prices people see

# How To
1. скачать проект
2. `pip install requests`
3. запустить скрипт
4. Результат сохранится в файл `export.csv`
5. Для того чтобы было более удобно ориентироваться на название прокута можно подсматривать [СЮДА](https://www.numbeo.com/cost-of-living/historical-data?itemId=101&itemId=100&itemId=228&itemId=224&itemId=60&itemId=66&itemId=64&itemId=62&itemId=110&itemId=118&itemId=121&itemId=14&itemId=19&itemId=17&itemId=15&itemId=11&itemId=16&itemId=113&itemId=9&itemId=12&itemId=8&itemId=119&itemId=111&itemId=112&itemId=115&itemId=116&itemId=13&itemId=27&itemId=26&itemId=29&itemId=28&itemId=114&itemId=6&itemId=4&itemId=5&itemId=3&itemId=2&itemId=1&itemId=7&itemId=105&itemId=106&itemId=44&itemId=40&itemId=42&itemId=24&itemId=20&itemId=18&itemId=109&itemId=108&itemId=107&itemId=206&itemId=25&itemId=32&itemId=30&itemId=33&city_id=6146&name_city_id=&currency=RUB) или [СЮДА](https://clck.ru/LjVjn).

## Numbeo.com
Numbeo.com - сайт, где обычные люди заполняют информацию о ценах в их городе на разные сервисы и продукты. От продуктов питания, до средней зарплаты.

## Идея
На number.com можно получить историю цен по городу. (Cost of Living -> Historical Data in a City by Year). 
Данный проект позволяет выкачать данные по городу Санкт-Петербург в файл формата CSV.
Для каждого года высчитывается процент инфляции относительно предыдущего. Также для каждого типа сервиса/продукта высчитывается средняя арифметическая инфляция и взвешенная средняя арифметическая по 2 формулам. 

## Формулы взвешенных средних арифметических:
1. Каждый год вес уменьшается на 20%
2. Самый последний год вес 100. Каждый последующий уменьшается на 20.
"
475,sharmaumang001/Layout_inflation,Java,
476,bfopengradient/Inflation_elasticities,Jupyter Notebook,"### Inflation elasticities.

Checking rolling log-log regression models. The target variable is inflation. The predictors are one period lags of the unemployment rate and short term interest rates.

The elasticities are the coefficients from a log-log regression model, i.e where logs are taken of both the predictor and the target variable. 

In this repository there is a py file containing all the variables and accompanying functions for the els class. There is also a jupyter notebook that utilises the els class to produce charts of the elasticities, the p-values of the elasticities and the R2's.  

Nov/2019
"
477,sobcza11/Inflation---ARCHIVE,Jupyter Notebook,"![alt text](https://github.com/sobcza11/Inflation/blob/main/_other/READ%20ME_Back.jpg)
# OVERVIEW
**The United States Consumer Price Index** ( “**Inflation**” ) is calculated by the U.S. Bureau of Labor Statistics. It has gone through various periods of prominent increases; notably in the 1920’s, 1940’s, & 1970’s. Otherwise, it has remained relatively constant or declining. 

**Inflation is important in all facets of life but the financial world pays special attention to it.** The key objectives of the Federal Reserve are maximizing employment, stabilizing prices & moderating long-term interest rates; the second of which is Inflation & the third of which is generally decided by the condition of the other two ( 2 ), usually Inflation. Their decisions can move financial markets around the world.

In short, **Inflation is an important component of developing investment strategies for portfolios across the world. The view on inflation becoming positive or negative is not agreed upon nor are the variables which influence it.**


# DESCRIPTION
**The purpose of this Data Science project is to develop a model to explain & understand the phenomenon of Inflation. I shortlisted nineteen ( 19 ) variables to determine their influence on Inflation since 1990.**

# CONTENTS
In the enclosed you will find:
   * **Notebooks**
     * This is where the source code is stored
   * **Presentations**
     * The Presentation & Report summarizes the findings
       * <i>As the name suggests, the Presentation was prepared as a presentation; thus, I suggest that it is downloaded & perused as a PDF, not viewed on GitHub</i>

"
478,jrosenko/Inflation_project,Jupyter Notebook,"# Inflation_project

Objective : Create project to monitor and understand inflation.  This includes visualization, exploritory analysis, and possibly prediction. Create pipelines to visualize and predict.
"
479,stanicaa/inflation_qa,Python,"# inflation_qa
Using basic Transformers library to ask the computer for information about a text. The function is using the code from Huggingface from https://huggingface.co/transformers/task_summary.html#extractive-question-answering . It just has minor changes to allow for multiple answer searching.
"
480,LuizAlexandre21/Rnn_Inflation,Jupyter Notebook,
481,LBJ-Wade/inflation-simulation,Python,"# inflation-simulation
Have you ever wondered ""How far away will my screams reach?""? Well, here is the ultimate answer. It doesn't get any less causally connected than this. Here we introduce INFLATION SIMULATOR 9000. Be it that you started screaming at the beggining of the universe, of rather late (during radiation dominated era) we can tell you how far away they will ever reach!

# Download
To run a pre-compiled version of the game, download and unzip the file for your OS from the releases page:
https://github.com/rjrosati/inflation-simulation/releases/latest . Then double-click the executable. For Mac and Linux the executable is named `universe`, on Windows it's `universe.exe`.

# Controls
The simulation will begin paused.
+ <kbd>SPACE</kbd> starts/pauses the simulation.
+ <kbd>ENTER</kbd> speeds up time by a factor of 10 while held down
+ <kbd class=""mouse"">Left click</kbd> release a shell of light where you click.
+ <kbd>p</kbd> toggles the plot of a(t) 
+ <kbd>h</kbd> toggles the display of the causal horizon (i.e. the max comoving distance the current light ray could travel in infinite time) 
+ <kbd>e</kbd> ends inflation and switches to radiation domination
+ <kbd>g</kbd> GODMODE, sets view to comoving coordinates.
+ <kbd>r</kbd> resets the simulation to the initial conditions at t=0
+ <kbd>m</kbd> toggles music 

# Things to try:

- Causal horizon:
Switch to GODMODE. Start a light beam. Notice how the light beam will never reach the causal horizon. End inflation. Causal horizon will skyrocket, why do you think that is?
- Look at the plots in the two modes: 
NOTICE THE INTERSECTIONS: Your screams could hardly be heard during inflation but radiation era brings them back to those distant places!!!

# To run from source
To download this script, click on the green ""clone or download"" button right above the list of files. If you have `git` installed, you can clone the repository, or you can download the current version as a zip file.

## Installation
If you don't have `Python` installed, we recommend you install the Anaconda distribution (for Python 3), which comes packaged with `numpy`. https://www.continuum.io/downloads

You'll then need to run `pip install pygame`.

## Running the script
On Mac or Linux, open a terminal in the script's folder and type 
```bash
$> python ./universe.py
```

On Windows, hold down <kbd>Shift</kbd> and right-click in the script's folder. Choose ""Open Command Window Here"". Type:
```cmd
C:\Users\...\inflation-simulation> python universe.py
```

# Some warnings:
The units are arbitrary at the moment. A switch to Planck units will be coming in the near future.

We are not solving the full FRW equations here, especially not when switching from inflation to radiation domination.
If we solved the full equations of motion, we wouldn't be able to stay in inflation arbitrarily long.
You might notice some irregularites if you end inflation before a(t)=10 or so (like light going backwards).
This is an artefact of the approximations we are using and isn't physical. 
If anyone has an easy fix, feel free to message or submit a pull request.

The music is Hybrid Song from TeleportProkg.
"
482,LilKedin/Inflation_Model,Jupyter Notebook,# Inflation_Model
483,Frenchwa42/inflation-repo,R,"# AP R Cookiecutter

This is a project template powered by [Cookiecutter](https://github.com/cookiecutter/cookiecutter) for use with [datakit-project](https://github.com/associatedpress/datakit-project/).

## Structure

```
.
├── .Rprofile
├── .gitignore
├── README.md
├── analysis
│   └── archive
│   └── markdown
├── data
│   ├── documentation
│   ├── handmade
│   ├── html_reports
│   ├── processed
│   ├── public
│   └── source
├── etl
├── publish
├── scratch
├── viz
└── {{cookiecutter.project_slug}}.Rproj
```

- `.Rprofile`
  - Stores environment variables for local R projects.
- `.gitignore`
  - Ignores `packrat` and R user profile temporary files.
- `README.md`
  - Project-specific readme with boilerplate for data projects.
  - Includes sourcing details and places to explain how to replicate/remake the project.
- `analysis`
  - R code that involves analysis on already-cleaned data. Code for cleaning data should go in `etl`.
    - Multiple analysis files are numbered sequentially.
    - If we are sharing the data, last analysis script is called make_dw_files.R to write_csv to public folder.
  - `analysis/archive`
    - Any analyses for story threads that are no longer being investigated are placed here for reference.
  - `analysis/markdown`
    - Any R Markdown files go here. 
    - The AP has an R Markdown template here: https://github.com/associatedpress/apstyle
- `data`
  - This is the directory used with our `datakit-data` plugin.
  - `data/documentation`
    - Documentation on data files should go here - data dictionaries, manuals, interview notes.
  - `data/handmade`
    - Manually created data sets by reporters go here.
  - `data/html_reports`
    - Any HTML reports or pages generated by code should go here. These are usually RMarkdown reports for sharing with reporters.
  - `data/processed`
    - Data that has been processed by scripts in this project and is clean and ready for analysis goes here.
  - `data/public`
    - Public-facing data files (i.e., final datasets we share with reporters/make accessible) go here - data files which are 'live'.
  - `data/source`
    - Original data from sources goes here.
- `etl`
  - ETL (extract, transform, load) scripts for reading in source data and cleaning and standardizing it to prepare for analysis go here.
    - Multiple etl files are numbered.
    - Joins are included in etl process.
    - Last step of ETL process is to output an RDS file to data/processed.
        - naming convention: etl_WHATEVERNAME.rds
- `publish`
  - This directory holds all documents in the project that will be public facing (e.g. data.world RMarkdown files).
- `scratch`
  - This directory contains scratch materials that will not be used in the project at the end.
  - Common cases are filtered tables or quick visualizations for reporters.
  - This directory is not tracked in git.
- `viz`
  - Graphics and visualization development specific work such as web interactive code should go here.
- `{{cookiecutter.project_slug}}.Rproj`
  - This is the .Rproj file that can be used with RStudio to work within the project.

## Usage

You will need to clone this repository to `~/.cookiecutters/` (make the directory if it doesn't exist):

```
cd path/to/.cookiecutters
git clone git@github.com:associatedpress/cookiecutter-r-project
```

Then, use `datakit project`:

```
datakit project create --template cookiecutter-r-project
```

If you'd like to avoid specifying the template each time, you can edit `~/.datakit/plugins/datakit-project/config.json` to use this template by default:

```
{""default_template"": ""/Users/lfenn/.cookiecutters/cookiecutter-r-project""}
```

## Configuration

You can set the default name, email, etc. for a project in the `cookiecutter.json` file.
"
484,enricoruggieri/inflationreports_API,Python,
485,mrcszym/food-inflation,Java,"# food-inflation

App is all in polish.
REST app, that enables logged-in user to compare and analize food prices to inflation rate in Poland since January 2015 to May 2022 in monthly time intervals
and download that data in JSON or XML.
User may sign up by email, Google account, Github account or Facebook.
Authorization user is done with the use of JWT tokens.

# Used technologies

Docker,
Java 11,
Spring Boot,
Spring Security,
Maven,
Hibernate,
MySQL,
JavaScript,
React.js.

![image](https://user-images.githubusercontent.com/81679054/175812877-b4939ff4-7d6c-47a5-88ce-ad968a8b7fac.png)
![image](https://user-images.githubusercontent.com/81679054/175812888-ca7fd3e9-b8da-4289-819c-14a9889fa401.png)
![image](https://user-images.githubusercontent.com/81679054/175812894-21529258-0c01-44cb-9474-a9e11ed2cf44.png)
![image](https://user-images.githubusercontent.com/81679054/175812911-9b48d79e-1025-4df0-a231-8924be776dac.png)
![image](https://user-images.githubusercontent.com/81679054/175812912-b12ae508-1ef8-493e-83c1-451986b0e959.png)
"
486,dzonidevv/Inflation-Calculator,CSS,
487,Angela-Merkel-Tree/inflation-data,HTML,"## Welcome to GitHub Pages

You can use the [editor on GitHub](https://github.com/Angela-Merkel-Tree/inflation-data/edit/main/README.md) to maintain and preview the content for your website in Markdown files.

Whenever you commit to this repository, GitHub Pages will run [Jekyll](https://jekyllrb.com/) to rebuild the pages in your site, from the content in your Markdown files.

### Markdown

Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for

```markdown
Syntax highlighted code block

# Header 1
## Header 2
### Header 3

- Bulleted
- List

1. Numbered
2. List

**Bold** and _Italic_ and `Code` text

[Link](url) and ![Image](src)
```

For more details see [Basic writing and formatting syntax](https://docs.github.com/en/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).

### Jekyll Themes

Your Pages site will use the layout and styles from the Jekyll theme you have selected in your [repository settings](https://github.com/Angela-Merkel-Tree/inflation-data/settings/pages). The name of this theme is saved in the Jekyll `_config.yml` configuration file.

### Support or Contact

Having trouble with Pages? Check out our [documentation](https://docs.github.com/categories/github-pages-basics/) or [contact support](https://support.github.com/contact) and we’ll help you sort it out.
"
488,gentiang/inflation_analysis,R,"# Kosovo Inflation Analysis
This analysis provides a quick overview of the dynamics of inflation in Kosovo and the Western Balkan countries. The analysis and visualizations were done in RStudio and you can find the source code as well as the datasets in this repository.

A short analysis based on the data can be found [here](https://medium.com/@gentiangsh/a-quick-look-at-inflation-in-kosovo-2ef2227bd638).
"
489,heisxiang/purchasing-power,,"# Is Inflation Outpacing Wage Growth?
How many of us have heard friends/family/ourselves complain about how everything has grown except their salary? Is this really true? Are prices really increasing more than our salaries? 

Is our purchasing power really decreasing, or is it just an illusion?
"
490,pinglinh/inflation_calculator,Ruby,"# Inflation Calculation

A simple web service which calculates average inflation UK house price based on user input start price, from date and to date and region (borough).

### Instructions

**MAKE SURE YOU HAVE RUBY 2.3~ INSTALLED**

1. Save the zip file to your local environment
2. CD (change directory) into the directory where you saved it
3. Run `bundle install`
4. Run `bundle exec rails db:migrate RAILS_ENV=development` (creating empty tables in the database with the column names set in schema.rb)
5. The next step may take 5 or so mins to do:
    run `bundle exec rails csv:import`
6. WAIT
7. Once finished run `bundle exec rails server`
8. Type `localhost:3000` into your local browser to view the web service
9. Type in the price you bought your house at originally
10. Select 1st of the month only for the `from` and `to` dates
11. Select your `region`
12. Click `submit` and this will tell you the estimated inflated price for your house

### Future Improvements

1. Make the user only choose month and year as the date always has to be first of the month and this can cause accessibility issues
2. Add CSS - responsive design
3. Add animation
4. PROBLEM!!! Not all regions have the same date range for the index therefore maybe make the user choose the region first and alert them of the date range before they input the dates - or just list the range available when the user clicks to select dates
"
491,sgraffite/inflationary-english,,# inflationary-english
492,rfcoffee/Symmetron-Inflation,C++,"# Symmetron-Inflation

Solve the coupled equations between inflaton and the matter field in the symmetron inflation model.

For details, please refer to: http://arxiv.org/abs/arXiv:1307.4451
"
493,AhmedAmirBC/inflation-project,Jupyter Notebook,"# inflation-project

Scraping inflation data from the web, and storing it in a form that is useful for analysis.

Data pulled from [here](https://www.inflation.eu/)

## Vision
The vision for this project is to create a utility that allows me to easily engage with inflation data for financial analysis. This includes potential functionality like importing the inflation data for various countries into one's analysis notebooks.
"
494,itamarcaspi/wage-inflation,HTML,
495,dynamonda/inflation-unity,,
496,jsnns/personal-inflation,TypeScript,
497,Brainstorrrm/Inflation-Chart,,
498,Rep17/Upload_inflation,HTML,# Upload_inflation
499,juliapratt/Upload_inflation,HTML,# Upload_inflation
500,edgarcutar/covid_inflation,,
501,razumau/rating_inflation,HTML,"### Rating inflation research data
Data collection scripts (downloading and parsing of data from https://rating.chgk.info; data from https://rating.maii.li was downloaded directly from its database) and raw data (see [csv](/csv) folder).

Datawrapper graphs: 
* [old organisation (till 2020)](https://datawrapper.dwcdn.net/3Fcxq/1/);
* [new organisation (from 2021 till now)](https://datawrapper.dwcdn.net/3gm95/1/);
* [complete](https://datawrapper.dwcdn.net/fINdw/1/).
"
502,SupratikRulz/web-scraper-inflationeu,JavaScript,
503,Asrorbek-Orzikulov/inflation_rate,Python,"# Inflation Calculation

Program written in Python that calculates inflation in 8 product prices for 203 districts of Uzbekistan.
When you run the program, a folder called **Inflation_Rate** is created on Desktop. The program was written 
to automate a weekly report that used to take four hours each time.

To use the program, run the **main.py** , place two Excel files containing product price data inside 
the **Inflation_Rate** folder, input the names of the Excel files in corresponding input boxes and
click on the `Calculate` button. The result will be saved as an Excel file in the same folder."
504,talhaamir4130/pk-inflation-bot,Python,"# PAKISTAN INFLATION RATE BOT

This is a script which will run every month and compare current and last month inflation rate and visualize it and create a post on Facebook and Twitter.

"
505,insideTheEconomy/fed_inflation,JavaScript,
506,s-a-y/mass-inflation,JavaScript,"Usage

```
npm i
node index.js < file.csv
```

`file.csv` should have 2 columns:
- first is line number (to show errors without spitting secret keys all over the place), 
- second column is stellar secret keys for accounts you want to modify

```csv
1, S....
2, S....
3, S....
```
"
507,seanmfox/inflation-calculator,Java,
508,ParasVc98/Inflation-Monitor,Python,
509,MattM240499/RankInflation,C#,"# Rank Inflation tracker

## How to launch
You will need to setup database config. See README in Database folder.
In Vscode hit f5 to run.

### Database not running?
Force the database to start by running:
```pg_ctl restart -D ""D:\Program Files\PostgreSQL\12\data""```
Note: pg_ctl.exe will be found in ```D:\Program Files\PostgreSQL\12\bin``` or in same place as your install directory

## Deployments
Currently, deployments are done via github actions. This uses the dockerfile in the root to build an image, and then pushes to heroku.
Currently needs a database to be deployed as well ;)

Likely at a later stage this will change."
510,jmsbutcher/inflation_predictor,Python,"# Inflation Predictor

### A Python app that tracks, analyzes, and predicts future price trends of ordinary consumer products using machine learning.

<p align=""center"">
  <img src=""https://github.com/jmsbutcher/inflation_predictor/blob/master/Images/GUI_4.png"">
</p>

## Keeping track of item prices

At its most basic level, the app acts as a simple price tracker.

### Step 1: Select Date
The first step is to select the date. The date displayed in the entry box is *today's* date by default. If you are entering shopping data from a previous date, simply type that date in standard format *YYYY-MM-DD*.

### Step 2: Select Store
The first time you visit a store, type in the store name and location. Previously entered stores will appear as a drop down menu.

<p align=""center"">
  <img src=""https://github.com/jmsbutcher/inflation_predictor/blob/master/Images/GUI-store_entry.png"">
</p>

Then click the ""Enter"" button. At this point, any previously tracked items will appear in a list to the right.

### Step 3: Enter New Items to Track
If you are adding new items, type in the item type, description, and quantity, and then click ""Enter"" for each new item. The items will be added to the list on the right.

<p align=""center"">
  <img src=""https://github.com/jmsbutcher/inflation_predictor/blob/master/Images/GUI-entry_1.png"">
</p>

### Step 4: Enter Prices
<p>Now, enter the prices you gathered from your shopping trip. Click in the entry field next to the dollar sign, enter the price, and then press Enter. The cursor will jump to the next entry field automatically for fast data entry.</p>
<p>If you make a mistake, simply click the Edit button next to that item.</p>
<p>**Note:** To skip adding a price for a certain item, simply leave the entry field blank. Do not enter ""0"".</p>
<p>Once all of the data has been entered, click the Save button. This will write all of the items and their price data to text files to be automatically loaded the next time you open the app. You can also view these text files as simple tabular lists of individual item's prices at certain dates.</p>

<p align=""center"">
  <img src=""https://github.com/jmsbutcher/inflation_predictor/blob/master/Images/GUI-entry_2.png"">
</p>

<p>Now you are done! You may close the app and go on putting your groceries away. Next time you go shopping, open the app and enter the prices again for that date. Over months and years, you will have accumulated a wealth of price data for the items you usually buy.</p>

### Step 5: Plot Price Trends
<p>After you have entered some data over a span of time, you can begin checking on price trends.</p>
<p>Go over to the frame on the right, titled: ""Make Price Predictions.""</p>
<p>Select an item from the drop down menu and click ""Plot"".</p>
<p>A chart will be plotted showing all the prices you entered at their corresponding dates.</p>

<p align=""center"">
  <img src=""https://github.com/jmsbutcher/inflation_predictor/blob/master/Images/GUI-plot_1.png"">
</p>

<p>To get a very basic idea of the price trend, click the checkbox labelled ""Show Trendline."" The program will use Numpy's polyfit regression model to plot a dotted line approximating the trend. Increase or decrease the polynomial order to get a curve that represents the data best.</p>

### Step 6: Predict Future Prices
<p>[ Under Development ]</p>
<p>The program also has a feature to predict the prices of items a set timeframe into the future.</p>
<p>Select the timeframe from the drop down menu and click ""Predict"".</p>
<p>The program will then use price data changes over that timeframe, as well as economic data such as CPI, Money supply, etc. at the dates at which you entered price data, to predict what the price will be in the future.</p>
<p>It first scrapes economic data from the St. Louis Federal Reserve webpage for only those dates listed in your price data, which results in very fast ( < 1 sec ) data retrieval. It packages this data into a Pandas data frame for processing.</p>
<p>It then uses regularized linear regression (scikit-learn's Ridge linear model) to fit a prediction curve to all the data. </p>
<p>Then it plots the curve on the chart. The prediction curve appears as a red dashed line.</p>
<p>The exact predicted price is indicated at the end of the last point, extended *timeframe* into the future from today.</p>
<p>You can adjust the regularization coefficient to address overfitting. Try increasing the coefficient from 0.001 by multiples of 10 (0.001, 0.01, 0.1, 1.0, etc.) and then click ""Predict"" again to see if the prediction curve makes more sense.</p>

<p align=""center"">
  <img src=""https://github.com/jmsbutcher/inflation_predictor/blob/master/Images/GUI-plot_2.png"">
</p>

<p>You can choose the toggle the simple linear regression trendline alongside the more complicated one to compare. Sometimes the naive approach works best, although with enough data, and enough large economic events (inflation, CPI changes, money supply changes, etc.) the intelligent model may learn to make better predictions anticipating price changes on items.</p>

<p>[ Future work: increase number of economic data points; utilize RNNs, which are perfectly suited to temporal data prediction tasks such as this. ]</p>

<p>
© 2020 James Butcher
<br>
jmsbutcher1576@gmail.com
</p>
"
511,ShrutiGupta97/Inflation-Targeting,Jupyter Notebook,"# Inflation-Targeting
Time Series Analysis using SARIMAX | Economic Modelling using New Keynesian Phillips Curve
"
512,drjuarez/btc-inflation,Python,"# btc-inflation

Selnium scripts in python to scrape items priced in BTC

```
pipenv shell
python run.py
```

### Pre-requisites
uses pipenv to manage dependencies

### Notes
./clean.sh to kill all hanging chrome processes when testing

#  Issues / TODO
# ------------------------------------------
#  - If items have additional selection, are we using or not
#  - Handle when an item runs out of stock
#  - Handle when the html page changes
#  - How to actually calculate inflation
#  - Do we need the price in SGD?
# ------------------------------------------
"
513,ecasanovas/inflation_intrate,Stata,"# inflation_intrate
Comparison of different measures of inflation and risk-free interest rate, downloaded directly from FRED into Stata using freduse.  
"
514,alanwhite1203/fiInflation,,"# Inflation Indexed Bond 

Inflation indexed bonds, also called inflation linked bonds or real return bonds, are bonds where the principal is indexed to inflation or deflation on a daily basis in terms of a reference index, such as Consumer Price Index (CPI). The CPI is the proxy for inflation that measures price changes in a basket of goods and services. 

The main idea of inflation indexed bonds is that investing in the bond will generate a certain real return. Inflation indexed bonds pay a periodic coupon that is equal to the product of the daily inflation index and the nominal coupon rate. Therefore, even though the nominal value of the coupons and principal may change, the real return of these remains the same. Unlike regular (nominal) bonds, inflation indexed bonds assure that your purchasing power is maintained regardless of the future rate of inflation. 

An inflation indexed bond is designed to hedge the inflation risk of the bond. Since inflation indexed bonds offer investors a very high level of safety, their coupons are typically lower than high-yield bonds. It is an important vehicle for investors whose liabilities indexed to changes in inflation or wages. Inflation indexed bonds have favorable performance and lower volatility relative to other risk assets. It is favorable to retirement planning and pension funds given its inflation protection. Inflation indexed bonds are less liquid than regular bonds. This presentation provides an overview of inflation indexed bond product and valuation. 


	Inflation Indexed Bond Introduction
	Inflation indexed bonds, also called inflation linked bonds or real return bonds, are bonds where the principal is indexed to inflation or deflation on a daily basis in terms of a reference index, such as Consumer Price Index (CPI).
	The CPI is the proxy for inflation that measures price changes in a basket of goods and services.
	The main idea of inflation indexed bonds is that investing in the bond will generate a certain real return.
	Inflation indexed bonds pay a periodic coupon that is equal to the product of the daily inflation index and the nominal coupon rate.
	Therefore, even though the nominal value of the coupons and principal may change, the real return of these remains the same.
	Unlike regular (nominal) bonds, inflation indexed bonds assure that your purchasing power is maintained regardless of the future rate of inflation.


	The use of Inflation Indexed Bonds
	Inflation indexed bonds are designed to hedge the inflation risk of a bond.
	Since inflation indexed bonds offer investors a very high level of safety, their coupons are typically lower than high-yield bonds.
	It is an important vehicle for investors whose liabilities indexed to changes in inflation or wages.
	Inflation indexed bonds have favorable performance and lower volatility relative to other risk assets.
	It is favorable to retirement planning and pension funds given its inflation protection.
	Inflation indexed bonds are less liquid than regular bonds.


	Valuation
	The present value of an inflation indexed bond is given by

	 


 		PV(t)=∑_(i=1)^n▒C ̅_i  D_i+(P_n ) ̅D_n
where
	t	the valuation date
	(C_i ) ̅=C*CPI(T_i )/CPI(T_I)	the inflation adjusted coupon at payment  date T_i                      
	(P_n ) ̅=P*CPI(T_n )/CPI(T_I)	the inflation adjusted principal at maturity date T_n
	CPI(t)	the base reference CPI at time t.
	CPI(T_i )/CPI(T_I)	the CPI ratio at T_i
	T_I	the issue date.
	D_i=D(t,T_i)	the discount factor from T_i to t.


	Practical Guide
	First construct inflation curve by bootstrapping either breakeven inflation swap rates or treasury inflation protected securities (TIPS).
	Compute the base reference CPIs at the issue date and each payment date.
	Adjust the coupons and principal based on CPI ratio at each payment date.
	Discount all the coupons and principal to the valuation date.
	The bond price is the sum of all the present values.


	A Real World Example

Buy Sell	Buy
Calendar	NYC
Coupon Type	Fixed
Coupon	0.00375
Currency	USD
Issue Date	7/31/2015
Interest Accrual Date	7/15/2015
First Coupon Date	1/15/2016
Last Coupon Date	1/15/2025
Maturity Date	7/15/2025
Settlement Date	7/31/2015
Settlement Lag	1
Day Count	dcActAct
Payment Frequency	6M
Pay Receive	Receive
Inflation Reference Index	CONSUMER PRICE INDEX US
Inflation Reference Index Level	237.14365
Notional	100



Reference:

https://finpricing.com/lib/EqBarrier.html

https://bitbucket.org/cmrm11/fiinflation/downloads/FiInflationBond-15.pdf

"
515,valerieboctor/CBAs-Inflation,TeX,"This repo is used for .tex files and python scripts associated with the project ""Bringing Expectations to the Collective Bargaining Table: Evidence from Brazilian Firms""
"
516,esiu-23/inflation_minwage,Python,"# inflation_minwage: 
Project looking at whether minimum wage has kept up with inflation. Script can take as input any state(s) in the USA, plotted CA, NY, IL as initial analysis.

CPI-U.csv : National CPI data from Bureau of Labor Statistics, from 1980-2020

Minimum_Wage_Data.csv: Minimum Wage Data for 50 states from Kaggle, from 1968-2020

West_CPI-U.csv : CPI Data for the Western Region Bureau of Labor Statistics, from 1980-2020

inflation_minwage_2.py : Cleaning, plotting script

minwage_CPI-U.csv: cleaned & combined data for minimum wage & CPI files, for national CPI data

minwage_West_CPI-U.csv: cleaned & combined data for minimum wage & CPI-West files, for CPI data for Western Region of US

"
517,vasilije7/Inflation-Calculator,HTML,# Inflation-Calculator
518,connorpainter/rgf-inflation,Python,"# Cosmological Inflation in N-Dimensional Gaussian Random Fields with Algorithmic Data Compression
Organizes code and other documents pertaining to Painter &amp; Bunn (2022).

## Abstract
There is considerable interest in inflationary models with multiple inflaton fields.
The inflaton field $\boldsymbol\phi$ that has been postulated to drive accelerating expansion in the very early universe has a corresponding potential function $V$, the details of which, such as the number of dimensions and shape, are free parameters of the theory. We consider a natural hypothesis that $V$ ought to be maximally random. We realize this idea by defining $V$ as a Gaussian random field in some number $N$ of dimensions. Given a model set of parameters that statistically determine the shape of $V$, we repeatedly evolve $\boldsymbol\phi$ through the end of inflation from various initial conditions, cataloguing a representative sample of trajectories associated with that model. In order to impose the anthropic constraint of a universe in which inflation ends and normal expansion takes over, we impose a minimum with $V=0$ and only consider trajectories that reach that minimum. We simulate each path evolution stepwise through $\boldsymbol\phi$-space while simultaneously computing $V$ and its derivatives along the path via a constrained Gaussian random process. When $N$ is large, this method significantly reduces computational load as compared to methods which generate the potential landscape all at once. Even so, the covariance matrix $\boldsymbol\Gamma$ of constraints on $V$ can quickly become large and cumbersome. To solve this problem, we present data compression algorithms to prioritize the necessary information already simulated, then keep an arbitrarily large portion. With these optimizations, we simulate thousands of trajectories with various parameter sets, extract tensor and scalar perturbation spectra from each, then assemble statistical predictions of these quantities through repeated trials. We find that the Gaussian random potential is a highly versatile inflationary model with a rich volume of parameter space capable of reproducing modern observations.
"
519,mathieu-clement/inflation_calculator,Java,
520,ivana7f/inflation-calculator,JavaScript,"# inflation-calculator

Simple calculator that calculates the value of money in future based on inflation rate.<br />
https://inflation-calculator-2022.netlify.app/
"
521,BBC-Data-Unit/gin-inflation,,"# Why is gin and tonic getting pricier?

![](https://ichef.bbci.co.uk/news/624/cpsprodpb/13432/production/_99389887_chart-gintonic_birmingham-mhr7c-nc.png)

In December 2017 **Daniel Wainwright** [reported that the price of the average bottle of gin has risen by about a quarter in the past five years, with the accompanying tonic water also rising](http://www.bbc.co.uk/news/uk-england-42286701). The story was based on historical price data obtained from the price monitoring service MySupermarket, which was then adjusted for inflation. The Wine and Spirits Trade Association were approached for a comment, and sent a press release which contained further figures on the gin industry.

Dan also spoke to distillers and Vhari Russell of the Food Marketing Expert, and visited The Gin Vault in Birmingham to speak to staff and customers about changes in the gin market.

## Get the data

* Spreadsheet: [Drink prices 2012-2017, adjusted for inflation, with differences](https://github.com/BBC-Data-Unit/gin-inflation/blob/master/drinkcosts5dec17_pluscalcs.xlsx)
* Press release: [Gin sales are up as drinkers vote it their favourite spirit tipple ](https://github.com/BBC-Data-Unit/gin-inflation/blob/master/WSTA%20-%20Gin%20sales%20soar.docx) (Wine and Spirits Trade Association)

## Visualisation

* Multiple bar chart: How much drinks prices have changed - 2017 vs 2012
* Infographic: Festive spirit - stats on gin sales in the UK
"
522,exabyteso/inflation-tool,Java,"This project is an inflation calculator that finds the value of an inputted amount based on the
Consumer Price Index (CPI) of the years in question"
523,Karagul/ForecastingInflation,R,"# ForecastingInflation
Forecasting Inflation in a data-rich environment: the benefits of machine learning methods

- Required packages:
    - HDeconometrics (from my github)
    - h20
    - glmnet
    - xgboost
    - randomForest
    - lbvar (from my github)
    - boot



- This repository contains the codes used to run the rolling windows in the paper ""Forecasting Inflation in a data-rich environment: the benefits of machine learning methods"" by Medeiros, Vasconcelos, Veiga and Zilberman.
- Codes are divided in one folder for each subsample used in the paper.
- Each folder contains one folder with functions and one folder with codes to call and run the functions. PATHS MUST BE ADJUSTED.
- If the paths are correct, running the files in the RUN folders will start the rolling windows.
- Data are already treated as descriped in the paper. 


## References

Medeiros, M. C., Vasconcelos, G., Veiga, A., & Zilberman, E. (2018). Forecasting Inflation in a data-rich environment: the benefits of machine learning methods.
"
524,dhense177/Rethinking_Inflation,Jupyter Notebook,"# Rethinking Inflation
Going beyond the Consumer Price Index (CPI) to measure the inflation rate in the US and observe how a typical US household's real income fares under different inflation estimates
"
525,iamrishav111/LinkInflation,Java,
526,Relatora/Inflation-Plotter,Python,
527,lamobot/inflation_index,Python,"# inflation_index
An index of Russian inflation
"
528,swatiasnani10/Inflation_Paper,Stata,"# Inflation Anchoring in India
Does Inflation Targeting Anchor Inflation Expectations? Evidence from India

Swati Asnani, Emory University 

Pankaj Kumar, RBI

Jay Surti, IMF

Shekhar Tomar, ISB
 
We use novel survey data on Indian households to evaluate the contribution of inflation targeting in anchoring inflation expectations. The novel feature of the database; viz., its availability before and after the adoption of inflation targeting by the Reserve Bank of India in 2015 allows us to compare the evolution of household inflation ex- pectations relative to inflation dynamics during these two periods. Our results show that households’ expectations of consumer price inflation, which were not anchored before the switch to inflation targeting, become so after the switch, not only in the aggregate, but also in the two major components, food and non-food. Importantly, we find that it is the lower spillover from persistently volatile food inflation to both food and non-food inflation expectations after 2015 that explains improved price sta- bility performance and anchoring of household inflation expectations after the switch to inflation targeting.

Codes for the working paper have been organized in order in the Code folder.
"
529,skad00sh/vif,,"# vif
Variance Inflation Factor aka VIF
"
530,andrewsalber/inflation-calculator,HTML,
531,Sitenl/bra-inflationtools,Python,"# BRA-inflationtools
BRA-inflationtools is toolset to handle information about inflation in Brazil.

# Roadmap
Currently, the project goals are:
* Implement localisation and i10n in Brazilian Portuguese
* Implement a method to return the updated value of a float
* Create a GUI

# License
BRA-inflationtools is licensed under the MIT License.
"
532,maximality/inflation-app,Swift,"# Inflation App

# Что сделано:
Сделано приложение по описанию: https://docs.google.com/document/d/1jYxlChmGIhLTR830tay1gkW8T2qkOmI60ZogE4NbwmI/edit#

# Что не сделано
Местами код можно переиспользовать (ошибки, лоадеры), причесать презентеры, а также исправить небольшой недочет с количеством месяцев в калькуляторе + немного ""прилизать"" UI. Задание немаленькое, время ограничено. К сожалению, успел не всё.
"
533,skestelman/adjust_inflation,Stata,"# adjust_inflation
Program to adjust for inflation in US data, v1.0
Last updated: Sept 13, 2019

# About
This program downloads BLS CPI data from 1920 to 2018, calculates monthly or annual inflation rates, and adjusts variables for inflation. 

# Syntax
<i>syntax varlist [if] [in], year(real) [month_3letter_or_annual(string) includestates(string)]</i>

<i>varlist</i>: list of variables you want to correct for inflation. Be careful to only include variables measured in USD.

<i>year</i>: enter the year you want your data in (e.g., to convert all dollar amounts to 2018 dollars, type year(2018)

<i>month_3letter_or_annual</i>: takes in the month the data were measured in, in case different observations were collected in different months. Some states report revenue measured at different points of the fiscal year, for exmaple. The default is the ""annual"" CPI. 


Stephanie Kestelman: E-mail skestelman [at] g.harvard.edu.

adjust_inflation is licensed under the MIT License.
"
534,diayan/Inflation-Calculator,Kotlin,"# **Inflation Calculator**

**Inflation calculator is meant to help users see how much their money has lost value over time**


* It collects historical data on different currencies and a user can enter a certain amount of money and select a time interval (in years) 
* Inflate will calculate the value of the money over that time period and give them their money's worth today 
"
535,xsiruse/DJ_Inflation,Python,"Построение таблицы
=======

Вам необходимо оценить динамику инфляции в РФ и подготовить сравнительную таблицу. У вас есть данные по инфляции в csv-файле, необходимо реализовать приложение, которое выводит размер инфляции по годам и месяцам в процентах и отображает общую инфляцию за год.

Вам необходимо реализовать чтение csv-файла `inflation_russia.csv` во view `inflation_view` в файле `apps/views.py` и вывести данные из этого файла в таблице.

Построение шаблона реализуйте в файле `app/templates/inflation.html`.

Таблица должна состоять из столбцов: ""Год"", перечисление месяцев, ""Всего"". Суммарно 14 столбцов.

Таблица с суммарной величиной должна быть закрашена в серый цвет.

Если инфляция за месяц была отрицательной (дефляция), то ячейка должна быть закрашена в зеленый. Если значение инфляции превысило 1%, то в красный. Должна быть реализована визуальная градация красного: от 1% до 2%, от 2% до 5%, от 5% и более (3 оттенка красного, визуально они должны быть различимы).

Если данных за месяц нет, то нужно выводить прочерк.

## Примеры таблицы:

#### Пример 1
![Пример 1](example1.png)

#### Пример 2
![Пример 2](example2.png)

## Советы

- как работать с csv в Python: https://docs.python.org/3.6/library/csv.html


## Документация по проекту

Для запуска проекта необходимо:

Установить зависимости:

```bash
pip install -r requirements.txt
```

Выполнить команду:

```bash
python manage.py runserver
```
"
536,Printassia/Inflation-Calculator,Java,"# Inflation Calculator

It is difficult to make a budget that spans several years, because prices are not stable. If your company needs 200 pencils per year, you cannot simply use this year’s price as the cost of pencils two years from now. Because of inflation, the cost is likely to be higher than it is today. 

Write a program to gauge the expected cost of an item in a specified number of years. The program asks for the cost of the item, the number
of years from now that the item will be purchased, and the rate of inflation. The program then outputs the estimated cost of the item after the specified period. Have the user enter the inflation rate as a percentage, such as 5.6 (percent). Your program should then convert the percent to a fraction, such as 0.056, and should use a loop to estimate the price adjusted for inflation.
"
537,thiagoomenez/Inflation_factors,MATLAB,
538,hazevt04/inflation_calculator,Python,"# Inflation Calculator

Given a year and an amount, returns the amount adjusted for inflation.
Year can be between 1913 and 2018

# Usage

```bash
usage: inflation_calculator [-h] [-y YEAR] [-a AMOUNT] [-d]

Adjust for inflation

optional arguments:
  -h, --help            show this help message and exit
  -y YEAR, --year YEAR  Year the amount is from (1913-2018)
  -a AMOUNT, --amount AMOUNT
                        Amount in dollars
  -d, --debug           Increased verbosity
```

"
539,futureclint/inflation-station,Ruby,"# Inflation Station

- Deployed front-end: <a href=""http://inflation-station.surge.sh/login"" target=""_blank"">http://inflation-station.surge.sh/login</a>
- Deployed back-end: <a href=""https://inflation-station.herokuapp.com"" target=""_blank"">https://inflation-station.herokuapp.com</a>

## Overview

Inflation Station is an inflation calculator that allows users to calculate inflation. Calculations are saved as entries which can then have optional descriptions added to them or deleted.

## MVP

> The Minimum Viable Product should be a well-planned, easily-communicated product, ensuring that the client's deliverable will be achievable and meet specifications within the time frame estimated.

The Inflation Station MVP contains the basic functionality to calculate inflation between the years CPI data is available: 1913–2021, save entries, edit descriptions of entries, and delete entries.

## Libraries and Dependencies

|     Library      | Description                                |
| :--------------: | :----------------------------------------- |
| Ruby on Rails    | Data models, RESTful JSON endpoints        |
| PostgreSQL       | Database                                   |
| React            | Front-end components                       |
| React Router     | Client-side routing                        |

## Wireframe

<img src=""img/wireframe.png"" width=""800"" />

## Component Tree

<img src=""img/comp-tree.png"" width=""974"" />

## ERD

<img src=""img/erd.png"" width=""376"" />

## Time Estimates

| Task                | Priority | Estimated Time | Actual Time   |
| ------------------- | :------: | :------------: | :-----------: |
| Set up back-end     | H        |     10 hrs     |     15 hrs    |
| Set up front-end    | M        |     10 hrs     |     12 hrs    |
| Set up CRUD actions | H        |     10 hrs     |     20 hrs    |
| Styling             | L        |     4 hrs      |     6 hrs     |
| Deployment          | H        |     1 hr       |     1 hr      |
| TOTAL               |          |     35 hrs     |     54 hrs    |

## Code Showcase

The algorithm to calculate inflation is contained within the POST entry method on the back-end:

```
# POST /entries
def create
  @entry = Entry.new(entry_params)
  @entry.user = @current_user

  # Retrieve starting and ending average CPI values by starting/end yaer
  @starting_datum = CpiDatum.find_by(year: @entry.starting_year).avg_cpi
  @ending_datum = CpiDatum.find_by(year: @entry.ending_year).avg_cpi

  # If starting year is before ending year: starting_value * ( ending_CPI / starting_CPI )
  # Else if starting year is after ending year: starting_value * ( starting_CPI / ending_CPI )
  # Else if they are equal, just make ending value equal to the starting value
  if @entry.starting_year < @entry.ending_year
    @entry.ending_value = (@entry.starting_value * ( @ending_datum / @starting_datum )).round(2)
  elsif @entry.starting_year > @entry.ending_year
    @entry.ending_value = (@entry.starting_value * ( @starting_datum / @ending_datum)).round(2)
  else
    @entry.ending_value = @entry.starting_value.round(2)
  end

  if @entry.save
    render json: @entry, status: :created
  else
    render json: @entry.errors, status: :unprocessable_entity
  end
end
```

## Code Issues & Resolutions

One challenge that occurred was how to handle the editing of multiple entries on the same page. By default, all entries were receiving the same state from any input that was typed in. This problem was solved by putting each entry in its own component, and discreetly handling that state there.

Another challenging bug was all users could see all entries created by all users. This occurred because there was no logic to only display an entry if the `user_id` matched up with the `id` of `currentUser`, so the problem was solved by passing `currentUser` down into where each entry was rendered, then adding logic to conditionally render an entry only if it is an entry owned by the current user.

## Post-MVP

The biggest post-MVP goal is to refine and polish the styling of the app to match the design of the wireframe. Functionality to make the calculate form work, but not save, when a user is not logged in is crucial as well. An about page and some explanatory text above the form are needed to inform the user how to use the tool, and why it exists.
"
540,pedrofnuness/inflation-calc,Java,
541,terminal-labs/inflation-states,Python,"## License

MIT (See LICENSE file).
"
542,Bora-Ulu/Inflation-Technique,Jupyter Notebook,"# Inflation-Technique

A computational platform for The Inflation Technique in python
"
543,Warfelz16/zero-inflation,HTML,
544,Real-John-Cheung/NFT-Inflation,,"# NFT-Inflation
The idea is to create a NFT that is linked to a picture of a QR code, when the NFT is sold and the QR code is scanned, a new QR code derived from it will be generated and minted in the market. When the new NFT is sold and the new QR code is scanned, the same process will be triggered.

This is the repo for the website and (maybe) the heroku app

BY [John C](https://johncheung.feedia.co)
"
545,fgreve/chilean_inflation,Jupyter Notebook,
546,ktm21/pln-inflation,JavaScript,
547,nachosdt/scraping-inflation,JavaScript,"# Scraping the Inflation

This package helps to measure inflation in Spain, scraping various supermarkets websites, using [Puppeteer](https://www.npmjs.com/package/puppeteer).

Also useful if you need data of thousands of products to practice or develop a personal project.

<img src=""https://upload.wikimedia.org/wikipedia/commons/c/cb/UK_and_US%2C_1990-Feb_2022.svg"" height=""300"" align=""right"">

Websites scraped:

-   [Mercadona](https://tienda.mercadona.es/categories)
-   [Carrefour](https://www.carrefour.es/supermercado)
-   [Día](https://www.dia.es/compra-online/)

## Getting Started

### Installation

To use Scraping Inflation in your project, run:

```bash
npm i scraping-inflation
```

**Example**

```js
const scraping = require(""scraping-inflation"");

scraping.mercadona(true, true, true, ""28001"").then((products) => {
    // Do something with products
});

(async function getCarrefourProducts() {
    let products = await scraping.carrefour(false, false, true);
    // Do something with products
})();

let diaProducts = scraping.dia(true, false, false);
diaProducts.then((products) => {
    // Do something with products
});
```

To run Chromium in headless mode, set first argument to `true`.

To save products in .json file, set second argument to `true`.

To save process log in a .txt file, set third argument to `true`, otherwise the progress of the scraping process will be printed in the STDOUT (console).

**Result JSONs**

The result of the scraping process is an array of JSON of all the products of the website.

The JSONs properties are:

```
{
    description: // { string } Product name and format
    source: // { string } ""mercadona"" || ""carrefour"" || ""dia""
    image: // { string } Image URL
    url: // { string } Product details URL (if any)
    category: // { string } Product category
    subcategory: // { string } Product subcategory
    class: // { string } Product class or third level category
    price: // { string } Price in € (includes € symbol)
    pricePerUnit: // { string } Price per kilogram or litre (if any)
}
```
"
548,litotechenterprise/Inflation-Calculator,Java,
549,marciosantetti/inflation-talk,JavaScript,"# inflation-talk
Lecture on inflation (why's, who's, and how's), given at Lawrence University (Appleton, WI), 02/16/2022, by Marcio Santetti.

Slide template inspired by [Andrew Heiss](https://github.com/andrewheiss)'s amazing .css template, using the `xaringan` R package.


**Slides**: [html](https://raw.githack.com/marciosantetti/inflation-talk/main/inflation-2022.html) | [PDF](https://raw.githack.com/marciosantetti/inflation-talk/main/inflation-2022.pdf)
"
550,abigailtmorgan/Forecasting-Inflation,HTML,
551,Zumairaka/Inflationary_Token,TypeScript,"# CinemaDraft Token Contract

CinemaDraft token contract is a reflection token contract that used IBEP20 interface and Reflect.finance reflection mechanism. The contract code is inspired from Safemoon contract and has made the necessary modifications to make the tokenomics easier to chage, make the code easier to maintain and fix some of the issues reported in the Safemoon audit.

# EasyAuction Contract

EasyAuction should become a platform to execute batch auctions for fair initial offerings and token buyback programs. Batch auctions are a market mechanism for matching limit orders of buyers and sellers of a particular good with one fair clearing price.
Already in traditional finance, batch auctions have established themselves as a tool for initial offerings, and in the blockchain ecosystem, they are expected to become a fundamental DeFi building lego brick for price-discovery as well.
The EasyAuction platform is inspired by the auction mechanism of the Gnosis Protocol v1, which has shown a significant product-market fit for initial dex offerings (IDOs) (cp. sales of DIA, mStable, etc…). EasyAuction improves significantly the user experience for IDOs, by settling up arbitrary many bids with a single clearing price instead of roughly 28 orders and thereby making the mechanism fairer, easier to use, and more predictable.
Given the emerging regulations for IDOs and utility sales - see MiCA -, EasyAuction is intending to comply with them and enabling new projects a safe start without legal risks.

## Instructions

Install dependencies

```
npm install
```

Running tests

```
npx hardhat test
```

Deploy

For deployment, paste your keys and other details as mentioned below in a dotenv.
```
GAS_PRICE_GWEI = 30000
INFURA_KEY = ""write your infura key""
MNEMONIC = 12 word recovery phrase
MY_ETHERSCAN_API_KEY = 
PK = private key 
To deploy on the BSC mainnet, write ""binancesmartchain"" in place of $NETWORK.
```

```
npx hardhat run scripts/sample-script.js --network $NETWORK

```
"
552,Duilwing/Inflation_Expectations,TeX,"# Inflation_Expectations
Paper about the influence of expectations on inflation
Veronika and Luca are writing together by using RStudio and GitHub ;)
"
553,JeremyPeresDev/WorldInflation,HTML,"# WorldInflation

Inflation based on the data from https://tradingeconomics.com

Using python and folium

https://www.linkedin.com/in/j%C3%A9r%C3%A9my-peres-34487566/
"
554,kmirijan/Inflation_Expectation,Jupyter Notebook,
555,larsmoe/xai-inflationsrecher,Python,
556,GuilleMGN/PortfolioVSInflationAnalysis,Jupyter Notebook,"# Portfolio vs Inflation Analysis

## Description
This project will focus on Portfolio and Inflation Analysis. We will be focusing on 3 common popular portfolios with similar ETFs. ETFs are a popular investment option for various asset classes such as Equity and Bonds. They also play an important role in the portfolio of different types of investors – Growth, Moderate & Conservative. We will measure how ETFs have really performed and, given the rising rate of inflation, how you can prepare your portfolio for this shift?

---
## Table of Contents
* [Description](#description)
* [Goals](#goals)
* [Technologies](#technologies)
* [Asset Types](#asset-types-etfs)
* [Portfolios](#portfolios)
* [Performance](#performance)
* [Inflation](#inflation)
* [2021 Returns and Inflation Trends](#2021-returns-and-inflation-trends)
* [Conclusion](#conclusion)
* [Contributors](#contributors)
* [References and Resources](#references-and-resources)
* [License](#license)

---
## Goals
Our goal is to answer these 4 questions: 

* How do conservative, moderate & growth portfolios compare?
* Which asset classes will do well?
* How does inflation impact the portfolios?
* What to consider in future investment decisions? 

## Technologies
Our portfolio analysis will use the following technologies: 
* panel
* pandas
* plotly
* graph_objects
* numpy
* datetime
* pathlib
* seaborn
* hvplot
* matplotlib
* bokeh
* World Bank API 
* Google Finance 

---
[![forthebadge made-with-python](https://forthebadge.com/images/badges/made-with-python.svg)](https://www.python.org/) </br>
[![Made withJupyter](https://img.shields.io/badge/Made%20with-Jupyter-orange?style=for-the-badge&logo=Jupyter)](https://jupyter.org/try) </br>

## Asset Types ETFs
* VTSMX Vanguard Total Stock Market Idx Inv (US Stock Market)
* VGTSX Vanguard Total Inernational Stock Index Inv (Global Stock Market)
* VBMFX Vanguard Total Bond Market Index Inv (US Bond Market)
* PIGLX PIMCO Global Bond Opps (Global Bonds)

## Portfolios
* <b>Conservative Portfolio</b>: 48% US Bond Market, 12% Global Bonds, 14% Global Stock Market, 26% US Stock Market. <br />
![pie_conservative](Images/pie_conservative.png) 
* <b>Growth Portfolio</b>: 16% US Bond Market, 4% Global Bonds, 28% Global Stock Market, 52% US Stock Market. <br />
![pie_growth](Images/pie_growth.png) 
* <b>Moderate Portfolio</b>: 32% US Bond Market, 8% Global Bonds, 21% Global Stock Market, 39% US Stock Market. <br />
![pie_moderate](Images/pie_moderate.png) 


## Performance
![cumulative_returns](Images/cumulative_returns.png) <br />
Growth Portfolio shows the highest cumulative return percentage over the past 10 years (2012 - 2021), followed by the Moderate and Conservative Portfolios. <br />

---
![volatility](Images/volatility.png) <br />
Above graph outlines the the annualized standard deviation over the past 10 years (2012-2021). The Growth Portfolio has the highest volatility index. <br />

## Inflation
### Monthly Inflation trend over the past 10 years
![inflation](Images/inflation.png) <br />
Above graph outlines the monthly inflation over the past 10 years. As we see, there has been a drastic increase in 2021. <br />

---
![correlation](Images/correlation.png) <br />
Above graph outlines the correlation between the monthly portfolio returns and monthly inflation. 


## 2021 Returns and Inflation Trends
### Portfolio Returns and Monthly Inflation trend for 2021
![inflation_returns_2021](Images/inflation_returns_2021.png) <br />

## Conclusion
In conclusion, inflation does play an important role in determining the real returns of a portfolio and investors must consider the impact of inflation especially given the current trend
where US inflation has touched the highest level in 39 years. The greatest increase being between 2020 and 2021 where it went from 1.2% to 6.8% . In our analysis we reviewed the monthly inflation impact over monthly returns of each type of Portfolio i.e Growth, Moderate and Conservative. We also reviewed the co-relation of the monthly returns to monthly inflation trends. We conclude that the Growth Portfolio is best suited to protect investors under high inflation scenarios. Investors will need to decrease exposure to bond or fixed income assets.

---
### How do conservative, moderate & growth portfolios compare?
Growth Portfolio shows the highest cumulative return percentage over the past 10 years (2012 - 2021), followed by the Moderate and Conservative Portfolios. 
### Which asset classes will do well?
Based upon our past analysis, the trend shows the VTSMX asset class had the highest returns, which led to the higher returns in the Growth Portfolio (VTSMX comprising 52%). 

### How does inflation impact the portfolios?
As the inflation rate rises, the real return from the portfolio decreases. Based on our analysis of real return of each portfolio over the period of time, Growth portfolio still had higher rate of real return than conservative and moderate portfolios, however the magnitude of the return was much lower when adjusted for inflation (i.e. November 2020 Before Adj = 10.2%, After Adj = 9.03%). 

### What to consider in future investment decisions? 
It is important to consider the impact of inflation depending on your investment portfolio and variables that may impact real returns. <br />
Investors in Growth Portfolio will need to review their equity investments and will need to compare expected future return vs expected inflation rates. They should focus more on asset equity investments with higher return rates. <br />
Investors in Moderate and Conservative Portfolio should look at rebalancing their portfolio by shifting some of their fixed income assets to higher return investments to beat the impact of inflation. <br />
Our study is limited to ETFs and may vary with other asset classes such as real estate, crypto and gold. <br />
Also the inflation rate varies across countries. So it is important to review the inflation rate of the country you are investing in. <br />

---
![world_inflation_trend](Images/world_inflation_trend.png) 

## Contributors
Our team: 
<h2><a href=""https://github.com/GuilleMGN""><img src=""https://avatars.githubusercontent.com/u/73862470?s=60&v=4"" /> GuilleMGN</a></h2>

<h2><a href=""https://github.com/ksmaria""><img src=""https://avatars.githubusercontent.com/u/93277973?s=60&v=4"" /> ksmaria</a></h2>

<h2><a href=""https://github.com/Prabhdyals""><img src=""https://avatars.githubusercontent.com/u/93745962?s=60"" /> Prabhdyals</a></h2>

<h2><a href=""https://github.com/RiteshChugani""><img src=""https://avatars.githubusercontent.com/u/93497343?s=60&"" /> RiteshChugani</a></h2>

---
## References and Resources
[InvestOPedia.com](https://www.investopedia.com/consumer-price-inflation-brisk-december-2021-5215608#:~:text=In%20December%202021%2C%20inflation%2C%20as,major%20contributors%20to%20overall%20inflation ) <br />
[RateInflation.com](https://www.rateinflation.com/inflation-rate/usa-historical-inflation-rate/ ) <br />
[USAToday.com](https://www.usatoday.com/story/money/2022/01/12/cpi-2021-consumer-prices-climbed-7-2021-fastest-pace-since-1982/9178235002/ ) <br />
[PortfolioVisualizer.com](https://www.portfoliovisualizer.com/ ) <br />

## License
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

Copyright © 2022"
557,paezha/Demand-and-Supply-Inflation-in-Floating-Catchment-Area-FCA-Methods-,HTML,"# Demand and level of service inflation in Floating Catchment Area (FCA) methods

Antonio Paez, Christopher D. Higgins, Salvatore F. Vivona (2019) Demand and level of service inflation in Floating Catchment Area (FCA) methods. PLoS ONE 14(6): e0218773. 

https://doi.org/10.1371/journal.pone.0218773

## Abstract

Floating Catchment Area (FCA) methods are a popular tool to investigate accessibility to public facilities, in particular health care services. FCA approaches are attractive because, unlike other accessibility measures, they take into account the potential for congestion of facilities. This is done by 1) considering the population within the catchment area of a facility to calculate a variable that measures level of service, and then 2) aggregating the level of service by population centers subject to catchment area constraints. In this paper we discuss an effect of FCA approaches, an artifact that we term demand and level of service inflation. These artifacts are present in previous implementations of FCA methods. We argue that inflation makes interpretation of estimates of accessibility difficult, which has possible deleterious consequences for decision making. Next, we propose a simple and intuitive approach to proportionally allocate demandand and level of service in FCA calculations. The approach is based on a standardization of the impedance matrix, similar to approaches popular in the spatial statistics and econometrics literature. The result is a more intiuitive measure of accessibility that 1) provides a local version of the provider-to-population ratio; and 2) preserves the level of demand and the level of supply in a system. We illustrate the relevant issues with some examples, and then empirically by means of a case study of accessibility to family physicians in the Hamilton Census Metropolitan Area (CMA), in Ontario, Canada. Results indicate that demand and supply inflation/deflation affect the interpretation of accessibility analysis using existing FCA methods, and that the proposed adjustment can lead to more intuitive results.

## Keywords

- Accessibility
- Floating Catchment Area
- FCA
- Two-Step Floating Catchment Area
- Three-Step Floating Catchment Area
- Demand inflation
- Supply inflation
- Healthcare services
"
558,phil20686/Measuring-Inflation,Python,# Measuring-Inflation
559,josegalvez/multifield-inflation,FORTRAN,"# multifield-inflation
"
560,irvin-welsh/inflation_counter,,
561,dankaufmann/historical_inflation,Stata,"﻿-----------------------------------------------------------------------------------------------
Daniel Kaufmann, “Is Deflation Costly After All? The Perils of Erroneous Historical 
Classifications,"" Journal of Applied Econometrics, forthcoming

readme.txt for replication files
-----------------------------------------------------------------------------------------------

Notes
-----------------------------------------------------------------------------------------------
Files with the extension *.R run in R (v. 3.6.1) and RStudio (v. 1.2.5019).
Files with the extension *.do run in Stata (v. 15). 
The GMM estimates are based on iterative procedures that may require to increase the number of 
iterations in the program (see options in the Stata files)

Data
-----------------------------------------------------------------------------------------------
BLSData.RData
	BLS CPI subindices to construct the modern replications

CompositeCPIMeasuringWorth.csv
	Composite CPI by Officer and Williamson (2016), www.measuringworth.com

RawDataProxy.csv
	PPI data by Warren and Pearson (1933) linked with modern replications by Hanes (2006)

RawData[Country].csv
	Historical data for various economies. See Online Appendix B6 for a detailed description

Codes
-----------------------------------------------------------------------------------------------
1_SimulatePlim.R -> Fig. 1, Fig C.1
	R program simulating the probability limit under various assumptions on the measurement
	errors.

2_RomerizeBLSData.R -> Fig. 2, Tab. 1, B4, B5, DataForStataUS.xlsx
	Uses BLSData.RData (Alternatively uses original BLS data downloaded from internet 
	as well as, RawDataUS.csv, CompositeCPIMeasuringWorth.csv and RawDataProxy.csv) 
	see Online Appendix B3 for a detailed description
	Computes the replication and the proxy for the US with historical and modern data. 
	In addition, prepares the US data set to in the Stata programs

3_ConstructStataData.R-> Fig. B2, DataForStata[Country].xlsx
	Uses RawData[Country].csv
	Imports the international data sources (see Online Appendix Tab. B6) and constructs data
        sets used in the Stata programs

4_ResultsUS.do -> Tab. 2, Tab C.3
	Uses DataForStataUS.xlsx
	Computes the results using US industrial production growth

5_ResultsUK.do -> Tab. 3
	Uses DataForStataUK.xlsx
	Computes the estimates for various real activity measures for the UK

6_ResultsCrossCountry.do-> Fig. 3, C.2, C.3
	Uses DataForStata[Country].xlsx
	Computes the cross-country results (main results and robustness tests)

7_SimulatedData.do -> Tab. 4
	Uses DataForStataUS.xlsx
	Computes the results with simulated error-ridden data

8_ResultsRobust.do-> Tab. C.1, C.2, C.3, D.1, D.2, D.3, D.4
	Uses DataForStataUS.xlsx
	Computes various robustness checks for the US

9_RobusntessGrid.do -> Fig. D.1
	Uses DataForStataUS.xlsx
	Computes the robustness tests for various assumptions on the misclassification rates


Contact
-----------------------------------------------------------------------------------------------
Daniel Kaufmann
daniel.kaufmann@unine.ch
"
562,jacoduplessis/cpi-inflation,Python,"# cpi-inflation

## install

```
pip install cpi-inflation
```

## usage

```python
from cpi_inflation import add_inflation_single, add_inflation_multiple
from cpi_inflation.za import CPI_INFLATION
from datetime import datetime, timedelta

today = datetime.now().date()
six_years_ago = today.replace(year=today.year-6)
six_years_ahead = today.replace(year=today.year+6)
amount = 100_000

# the first argument to the function below is and
# ordered dict of the  structure
# {<date_str>: <index_value>}

# if the lookup map does not contain the required values, the initial amount is returned unchanged.

# add inflation to historic value
val = add_inflation_single(CPI_INFLATION, amount, dt=six_years_ago, to=today)

# discount a present value using historic inflation
val = add_inflation_single(CPI_INFLATION, amount, dt=today, to=six_years_ago)

# discount a future value at fixed yearly rate
val = add_inflation_single(CPI_INFLATION, amount, dt=six_years_ahead, to=today, discounting_rate=1.06)

# get future value at fixed yearly rate
val = add_inflation_single(CPI_INFLATION, amount, dt=today, to=six_years_ahead, discounting_rate=1.06)

# calculating multiple values
table = [
    (amount, today),
    (amount, six_years_ago)
]
vals = add_inflation_multiple(CPI_INFLATION, table, to=six_years_ahead, discounting_rate=1.06)


```

## run tests

```
python -m unittest discover tests
```

## inflation data

Historic CPI inflation for South Africa is included under the `za` module.

### internal notes

*index_maps*: maps should be ordered. Either use python3.7 or OrderedDicts."
563,MADS-MarisaRivera/Predicting-Inflation,HTML,"
<!-- PROJECT LOGO -->
<br />
<p align=""center"">
  <a href=""https://github.com/MADS-MarisaRivera/Predicting-Inflation"">
    <img src=""images/logo.jpg"" alt=""Logo"" width=""200"" height=""200"">
  </a>

  <h3 align=""center"">Predicting Inflation</h3>

  <p align=""center"">
    Data Products Creation & Deployment - Final Project
    <br />
    <a href=""https://github.com/MADS-MarisaRivera/Predicting-Inflation""><strong>Explore the docs »</strong></a>
    <br />
  </p>
</p>


<!-- TABLE OF CONTENTS -->
<details open=""open"">
  <summary>Table of Contents</summary>
  <ol>
    <li>
      <a href=""#about-the-project"">About The Project</a>
      <ul>
        <li><a href=""#built-with"">Built With</a></li>
      </ul>
    </li>
    <li><a href=""#dataset-inputs"">Dataset Inputs</a></li>
    <li>
      <a href=""#getting-started"">Getting Started</a>
      <ul>
        <li><a href=""#prerequisites"">Prerequisites</a></li>
        <li><a href=""#installation"">Installation</a></li>
      </ul>
    </li>
    <li><a href=""#usage"">Usage</a></li>
  </ol>
</details>


<!-- ABOUT THE PROJECT -->
## About The Project

According to <a href=""http://www.banguat.gob.gt/page/inflacion-total"">Banco de Guatemala</a>, nowadays the country is reporting a 3.82% inflation at July2021, which is 0.94pp more than last year at July2020. At this point, it is important to enhance that inflation will always exist in our society, and that people have to learn to live with it. However, if we look at the definition of inflation itself:
<br/>
""<a href=""https://www.investopedia.com/terms/i/inflation.asp"">Inflation</a> is the decline of purchasing power of a given currency over time. A quantitative estimate of the rate at which the decline in purchasing power occurs can be reflected in the increase of an average price level of a basket of selected goods and services in an economy over some period of time. The rise in the general level of prices, often expressed as a percentage, means that a unit of currency effectively buys less than it did in prior periods.""
<br/> 
<br/> 
In other words, inflation makes us feel that we can't afford as much as we could last year, mostly, when our incomes remain static from one year to another. This is why companies and customers must be open-eyed when it comes to inflation, because it has a direct impact on their purchasing power. 
<br/> 
<br/> 
Therefore, as a team of passionate members about analytics, **we are seeking to predict the percentual variance, between next month's inflation value and its last year's value, meaning 12 months earlier, so that we can anticipate increasing inflation or decreasing inflation (deflation) periods.** 
For example, when we predict deflation periods, we may promote in our companies & personal expenses, the perks of deflation, and buy more for less or, save the remaining money that we didn't spend in our regular purchases.
<br/> 
<br/> 
*We believe this is how we learn to coexist with inflation behavior, in a way that we can also take the most of it when it's behavior moves in our favor.*


### Built With

* [Python](https://www.python.org)
* [Shap](https://shap.readthedocs.io/en/latest/index.html)
* [Bayesian Ridge Regression](https://scikit-learn.org/stable/auto_examples/linear_model/plot_bayesian_ridge.html)
* [Flask](https://flask.palletsprojects.com/en/2.0.x/)
* [PythonAnywhere](https://www.pythonanywhere.com)


<!-- DATASET -->
## Dataset Inputs
* [Data Source (JSON Output)](https://www.bls.gov/developers/api_python.htm#python1)
  ```sh
  import requests
  import json
  import prettytable
  import pandas as pd 
  headers = {'Content-type': 'application/json'}
  data = json.dumps({""seriesid"": ['SUUR0000SA0'],""startyear"":""2012"", ""endyear"":""2021""})
  p = requests.post('https://api.bls.gov/publicAPI/v1/timeseries/data/', data=data, headers=headers)
  json_data = json.loads(p.text)
  for series in json_data['Results']['series']:
      cols=[""series id"",""year"",""period"",""value"",""footnotes""]
      x=pd.DataFrame(columns = cols)
      seriesId = series['seriesID']
      for item in series['data']:
          year = item['year']
          period = item['period']
          value = item['value']
          footnotes=""""
          for footnote in item['footnotes']:
              if footnote:
                  footnotes = footnotes + footnote['text'] + ','

          if 'M01' <= period <= 'M12':
              x.append([seriesId,year,period,value,footnotes])
  ```
* Raw Data Sample
  ```
  {'status': 'REQUEST_SUCCEEDED',
   'responseTime': 230,
   'message': [],
   'Results': {'series': [{'seriesID': 'SUUR0000SA0',
      'data': [{'year': '2021',
        'period': 'M07',
        'periodName': 'July',
        'latest': 'true',
        'value': '153.424',
        'footnotes': [{'code': 'I', 'text': 'Initial'}]},
       {'year': '2021',
        'period': 'M06',
        'periodName': 'June',
        'value': '152.720',
        'footnotes': [{'code': 'U', 'text': 'Interim'}]},
       {'year': '2021',
        'period': 'M05',
        'periodName': 'May',
        'value': '151.405',
        'footnotes': [{'code': 'U', 'text': 'Interim'}]},
       {'year': '2021',
        'period': 'M04',
        'periodName': 'April',
        'value': '150.221',
        'footnotes': [{'code': 'U', 'text': 'Interim'}]}
  ]}]}}
  ```
* Model Input - Data Preparation Sample
    - series id: key
    - year: year
    - period: month
    - value: price index
    - footnotes: attached features
    - value-1: value from last month
    - value-3: value from 3 months ago
    - value-6: value from 6 months ago
    - value-12: value from 12 months ago
    - var-1: percentual delta from value and value-1
    - var-3: percentual delta from value and value-3
    - var-6: percentual delta from value and value-6
    - var-12: percentual delta from value and value-12

  | series id | year | period | value | footnotes | value-1	| value-3	| value-6 | value-12 | var-1 | var-3 | var-6 | var-12 | var-1_lag | var-3_lag	| var-6_lag	| var-12_lag |
  | --- | --- | --- | --- | --- | ---	| ---	| --- | --- | --- | --- | --- | --- | --- | ---	| ---	| --- |
  | SUUR0000SA0	| 2021 | M07 | 153.424 | Initial | 152.720 | 150.221 | 147.123 | 145.747 | 0.004610 | 0.021322 | 0.042828 | 0.052673 | 0.008685 |	0.025049 | 0.042621 | 0.054354 |
  | SUUR0000SA0	| 2021 | M06 | 152.720 | Interim | 151.405 | 148.988 | 146.477 | 144.847 | 0.008685 | 0.025049 | 0.042621 | 0.054354 | 0.007882 | 0.023373 | 0.034526 | 0.051292 |
  | SUUR0000SA0	| 2021 | M05 | 151.405 | Interim | 150.221 | 147.947 | 146.352 | 144.018 | 0.007882 | 0.023373 | 0.034526 | 0.051292 | 0.008276 | 0.021057 | 0.025672 | 0.042174 |
  | SUUR0000SA0	| 2021 | M04 | 150.221 | Interim | 148.988 | 147.123 | 146.461 | 144.142 | 0.008276 | 0.021057 | 0.025672 | 0.042174 | 0.007036 | 0.017143 | 0.017559	| 0.028120 |
  | SUUR0000SA0	| 2021 | M03 | 148.988 | Interim | 147.947 | 146.477 | 146.417 | 144.913 | 0.007036 | 0.017143 | 0.017559 | 0.028120 | 0.005601 | 0.010898 | 0.011465	| 0.018968 |


<!-- GETTING STARTED -->
## Getting Started

Follow this instructions to setup project.

### Prerequisites
* [python3.9 or later](https://www.python.org/downloads/)
* **shap**
  ```sh
  pip install shap
  ```
* **flask**
  ```sh
  pip install flask
  ```  
* **pandas**
  ```sh
  pip install pandas
  ```
* **numpy**
  ```sh
  pip install numpy
  ```
* **sklearn**
  ```sh
  pip install sklearn
  ```  
* **joblib**
  ```sh
  pip install joblib
  ```   
* **requests**
  ```sh
  pip install requests
  ```
* **json**
  ```sh
  pip install json
  ```
* **prettytable**
  ```sh
  pip install prettytable
  ```


### Installation

1. Clone the repo
   ```sh
   git clone https://github.com/MADS-MarisaRivera/Predicting-Inflation.git
   ```
2. Make sure to have python and prerequisite libraries installed
3. Open in any Python IDE, file app.py if you would like to check source code
4. Open terminal window, go to your git repo inflation_Flask folder and run this command:
   ```sh
      python app.py
   ```
   <img src=""images/console run.png"" alt=""App"" width=""850"" height=""75"">
   <img src=""images/console log.png"" alt=""App"" width=""850"" height=""300"">
5. Go to your browser and explore home, predict & drift endpoints.
6. You may also visit link: [PythonAnywhere Output](http://jrs.pythonanywhere.com) to see model prediction output, if you don't want to clone repo and run app with local resources.
  <img src=""images/pythonanywhere_output.png"" alt=""App"" width=""850"" height=""300"">


<!-- USAGE EXAMPLES -->
## Usage 
* app.route/ & app.route/predict
  * Go to your browser and visit respective domain and port, specified in your terminal window (For example: 192.168.5.45:5000/)
  * Window will display prediction output: which must be interpreted in the following way: prediction output is next month's percentage delta with it's last year    reference (var-12). For example, our model is predicting that in August2021 we'll have an inflation value 5.28% higher than August2020.
  * <br/>
  * <img src=""images/app:home output.png"" alt=""App"" width=""600"" height=""250"">
  * <br/>
  * Another thing to add, is that as you may observe in shap values, we are getting the insight that our target variable is mostly influenced by the percentage variance with price index value present value and the price index value from 3 months ago.
  * <br/> 
  * This is the reason why we develop a simulation tool, where you can create different scenarios percentage deltas from last four months, and send it to our model as an input. 
  * <br/>
  * <img src=""images/app:home simulation.png"" alt=""App"" width=""500"" height=""250"">
  
* app.route/predict
  * In /predict endpoint, you'll be able to analyze the prediction output from that scenario you just simulate.
* app.route/drift
  * Drift endpoint, is for the user to analyze de deviation from current values and hystoric values. For this, user must have in mind that, the more homogeneous these distributions are, the better. Which also means, more confidence in model output of predicting inflation percentage deltas from one year to another.
  * <br/>
  * <img src=""images/app:drift output.png"" alt=""App"" width=""600"" height=""300"">
"
564,alberoman/rapid-inflation,Jupyter Notebook,
565,LBJ-Wade/Inflation.jl,Julia,"# Inflation.jl

[![Build Status](https://travis-ci.com/rjrosati/Inflation.jl.svg?token=zMDX3GmCZbdBcf9JWMdp&branch=master)](https://travis-ci.com/rjrosati/Inflation.jl)
[![codecov](https://codecov.io/gh/rjrosati/Inflation.jl/branch/master/graph/badge.svg?token=JIJHU89U8J)](https://codecov.io/gh/rjrosati/Inflation.jl)

A Julia package for numerical evaluation of cosmic inflation models. Perturbations are evolved with the transport method. It supports symbolic calculation of the equations of motion, and remains efficient at a high number of fields, even with non-canonical kinetic terms.

`Inflation.jl`automatically applies the [horizon-crossing approximation](https://arxiv.org/pdf/1303.3611.pdf), if the potential is detected to be sum-separable. Support is planned for automatic application of other approximations when they are valid as well.

Watch the talk given about this package at JuliaCon 2020: https://www.youtube.com/watch?v=gvUZiPPB3nI

![logo](https://github.com/rjrosati/Inflation.jl/raw/master/inflationjl.png ""Logo"")

## Installation
For now, Inflation.jl is an unregistered Julia package. It can be installed with
```julia
julia> import Pkg

julia> Pkg.add(""https://github.com/rjrosati/Inflation.jl"")
```

## an example
```julia
using Inflation
using SymPy

# this is a quadratic inflation model with 10 fields and randomly selected masses

# set the field space dimension
d = 10

# set the model parameters, and their values
params = [symbols(""m$i"") for i in 1:d]
pvalues = rand(d)*1e-9

function G(Phi,p)
    d = length(Phi)
    g = Matrix{eltype(Phi)}(I,d,d)
    return g
end

function V(Phi,p)
    m = p
    return sum([ m[i]*Phi[i]^2)/2 for i in 1:d])
end

# set the initial conditions
Pi0 = zeros(d) # zero initial velocity

# pick a position randomly over the sphere, with radius to give ~N0 e-folds
N0 = 100
Phi0 = randn(d)
Phi0 ./= norm(Phi0)
Phi0 .*= sqrt(4*N0)

# symbolically construct the equations of motion
# because this potential is sum-separable, the horizon-crossing approximation will automatically be calculated
funcs = inflation_setup(d,V,G,params)

# solve the background equations of motion
sol = background_evolve(Phi0,Pi0,pvalues,funcs,verbose=true)

# solve the 2-pt correlation function equations of motion
# by default, use 7 k-values centered at a pivot scale of 0.002 Mpc^-1
tsol = transport_perturbations(sol,pvalues,funcs,verbose=true)

println(tsol)
```

see the `examples` directory for more complicated potentials and metrics, how to scan parameter space, evaluate several simulations in parallel, output and analyze data.

At the moment, `Inflation.jl` can only solve the 2-pt correlation function equations of motion. Solving for higher-point correlation functions is possible with [PyTransport](https://github.com/jronayne/PyTransport)/[CppTransport](https://github.com/ds283/CppTransport).
"
566,nondejus/bijstandsuitkering-inflation,,"# bijstandsuitkering-inflation
the dutch zeroconomie
https://nl.wikipedia.org/wiki/Staat_der_Nederlanden
"
567,duembgen-lutz/TailInflation,R,
568,KBuck2018/inflation-frontend,JavaScript,"# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
"
569,karenz50/inflation_analysis,,"# inflation_analysis
Personal project to analyze the relationship between gas prices and inflation

Used GCP BigQuery to store gas price and GDP information with the goal of predicting recessions with changes in the gas prices and GDP.

## Dataset
GCP BigQuery uses datasets instead of databases; any references to a ""dataset"" refers to a database.

This is the command to create and verify a dataset:

``` bigquery
bq mk -d --description ""My recession analysis"" recession_db
bq ls
bq show --format=prettyjson recession_db
```

## Tables
The project included one dataset, recession_db, with 2 tables, gas_price and gdp.

### Table gas_price: 
| Column Name | Type | Mode |
| ----------- | ---- | ---- |
| price_date | DATE | REQUIRED |
| price_per_gallon | FLOAT | REQUIRED |

### Table gdp: 
| Column Name | Type | Mode |
| ----------- | ---- | ---- |
| gdp_date | DATE | REQUIRED |
| gdp_value | FLOAT | REQUIRED |
| gdp_change | FLOAT | REQUIRED |

## Source of Data
### Gas Price Data 
Weekly Texas Regular Conventional Retail Gasoline Prices: https://www.eia.gov/dnav/pet/hist/LeafHandler.ashx?n=PET&s=EMM_EPMRU_PTE_STX_DPG&f=W
### GDP Data
Gross Domestic Product of the United States (US GDP): 
https://datahub.io/core/gdp-us

## Create Tables
### GDP Table
A json schema file is used for creating the gdp table.

#### gdp_schema.json
``` json
[
  {
    ""mode"": ""REQUIRED"", 
    ""name"": ""gdp_date"", 
    ""type"": ""DATE""
  }, 
  {
    ""mode"": ""REQUIRED"", 
    ""name"": ""gdp_value"", 
    ""type"": ""FLOAT""
  }, 
  {
    ""mode"": ""REQUIRED"", 
    ""name"": ""gdp_change"", 
    ""type"": ""FLOAT""
  }
]
```
The first line of code below creates recession_db.gdp table using gdp_schema.json, the second line shows the schema of the table, and the last line verifies that there are no rows in the table.
``` bigquery
bq mk --table recession_db.gdp gdp_schema.json
bq show --schema --format=prettyjson recession_db.gdp
bq query --nouse_legacy_sql 'SELECT count(*) Total from recession_db.gdp'
```
### Gas Price Table
A similar json file is used for creating the gas_price table.
#### gas_price_schema.json
```json
[
  {
    ""mode"": ""REQUIRED"", 
    ""name"": ""price_date"", 
    ""type"": ""DATE""
  }, 
  {
    ""mode"": ""REQUIRED"", 
    ""name"": ""price_per_gallon"", 
    ""type"": ""FLOAT""
  }
]
```
The first line of code below creates recession_db.gas_price table using gdp_schema.json, the second line shows the schema of the table, and the last line verifies that there are no rows in the table.
``` bigquery
bq mk --table recession_db.gas_price gas_price_schema.json
bq show --schema --format=prettyjson recession_db.gas_price
bq query --nouse_legacy_sql 'SELECT count(*) Total from recession_db.gas_price'
```

## Load Data
### Load Data to GDP Table
```bigquery
bq load --noreplace --source_format=CSV --skip_leading_rows=1 recession_db.gdp gdp_quarter.csv
bq show recession_db.gdp
bq query --nouse_legacy_sql 'SELECT count(*) Total from recession_db.gdp'
```
"
570,sbutler-gh/anti-inflationary,Svelte,"# create-svelte

Everything you need to build a Svelte project, powered by [`create-svelte`](https://github.com/sveltejs/kit/tree/master/packages/create-svelte).

## Creating a project

If you're seeing this, you've probably already done this step. Congrats!

```bash
# create a new project in the current directory
npm create svelte@latest

# create a new project in my-app
npm create svelte@latest my-app
```

## Developing

Once you've created a project and installed dependencies with `npm install` (or `pnpm install` or `yarn`), start a development server:

```bash
npm run dev

# or start the server and open the app in a new browser tab
npm run dev -- --open
```

## Building

To create a production version of your app:

```bash
npm run build
```

You can preview the production build with `npm run preview`.

> To deploy your app, you may need to install an [adapter](https://kit.svelte.dev/docs/adapters) for your target environment.
"
571,szavaryn/inflation_issue,Jupyter Notebook,"# inflation_issue
The sense of this issue is to create method of calculation the inflation in our marketplace.
"
572,SwatiSethee/Inflation-Forecasting-using-SARIMAX-and-NKPC-Economic-Model,Jupyter Notebook,"# Inflation-Forecasting-using-SARIMAX-and-NKPC-Economic-Model
### Objective of the Project:

1.	*Use SARIMAX Modelling to forecast monthly inflation rate in India using Bank rate as the exogenous variable*
2.  *Estimate monthly inflation  by economic modelling using the New Keynesian Phillips Curve*

**Compare which model is a better fit to actual data using Residual Mean Squared Error as the estimator. 
We have worked with Monthly Inflation Rate and Bank Rate data of India for 60 years spanning 1960-2020.**

### Please download the notebooks and the excel file attached in order to see the interactive plots.
"
573,dhesse/FoodInflation,R,"# Inflation and Food

Repository containing compainion code for some posts on [my blog](http://data-adventures.com).
"
574,kwalt/inflation_calculator,Ruby,
575,russsik1/inflation_bot,Python,"# Inflation_bot   
Telegram bot which let you get full information about inflation rate, price change, purchasing power of money
in such countries and unions as **Belarus🇧🇾, Brazil🇧🇷, Canada🇨🇦, European Union🇪🇺, Eurozone, France🇫🇷, Germany🇩🇪, Greece🇬🇷, India🇮🇳, 
Japan🇯🇵, Kazakhstan🇰🇿, Mexico🇲🇽, Russia🇷🇺, Spain🇪🇸, Turkey🇹🇷, Ukraine🇺🇦, United Kingdom🇬🇧, United States🇺🇸.** 
Inflation_bot uses [Statbureau Api](https://www.statbureau.org/en/inflation-api)





###Commands
[Inflation_bot](https://telegram.me/Inflation_bot) supports the following commands:  

`Inflation <country> <startdate>-<enddate>`  
The command allows **calculating inflation rate** (percentage) between the start of the first month and end of the second for a given country.
* _country_ - the name of country or Emoji flag (e. g. European Union, EU or 🇪🇺)
* _startdate_ - the first year or month, inclusive (e. g. 1993, 1993/05 or 1993/5)
* _enddate_ - the last year or month, inclusive  
returns inflation rate, decimal, percentage

`Price change <country> <startdate>-<enddate> <decimal amount>`  
The command allows **calculating the price change** due to inflation between the start of the first month and end of the second for a given country.  
* _country_ - the name of country or Emoji flag
* _startdate_ - the first year or month, inclusive
* _enddate_ - the last year or month, inclusive
* _amount_ - the price in the beginning of the first month  
returns the price in the end of the second period, adjusted to the inflation, decimal  


`Value change <country> <startdate>-<enddate> <decimal amount>`  
The command allows **to determine the change of the money purchasing power** due to inflation between the start of the first month and end of the second for a given country.  
* _country_ - the name of country or Emoji flag
* _startdate_ - the first year or month, inclusive
* _enddate_ - the last year or month, inclusive
* _amount_ - the price in the beginning of the first month  
returns the amount in the end of the second period, adjusted to the inflation, decimal


`Get denominations <country>`  
* _country_ - the name of country or Emoji flag  
returns a list of denominations that happened in the given country.

`Get inflation <country> <startdate>-<enddate> <m*>`(_*optional. Set annual by default_)
* _country_ - the name of country or Emoji flag
* _startdate_ - the first year or month, inclusive
* _enddate_ - the last year or month, inclusive
* _m_ - get monthly inflation rates  
returns the full dataset of annual or monthly inflation rates from _startdate_ to _enddate_.







###### For more data visit [www.statbureau.org](https://www.statbureau.org) 
"
576,codeoholic/inflation.live,JavaScript,"# inflation.live
This is my hobby project to project inflation rates in various categories and states in India. This will help in visualizing Indian economy. I will try to update the data on a monthly basis providing all the referencing data source and in a long term see, how are our investment instruments are working.

Data source : http://www.mospi.nic.in/cpi"
577,metinelitas/TurkeyInflation,HTML,"# TurkeyInflation

Generates graphics for Turkey's inflation data in HTML format using data taken from TUIK.


![alt text](https://user-images.githubusercontent.com/13383508/76705417-f8c3ff00-66f0-11ea-94c6-880ab1b8bfca.png)



"
578,agodil/inflation-calculator,Java,"# inflation-calculator-project

Java 10 application to calculate inflation across a set of items.
JavaFX library is used for UI.
"
579,dzolotor/inflation-nation,Jupyter Notebook,
580,anticmex/inflation_HW,Python,
581,Jjcaligiuri77/Inflation_calculator,Python,
582,srguiwiz/inflation-outdated,HTML,"# Redirect from Outdated to New URL

Made for one specific project, to use during transition.
"
583,taeyoung94/Inflation_Analysis,Jupyter Notebook,# Inflation_Analysis
584,hamzamalick21/ProjectInflation,Jupyter Notebook,"Python Project - Inflation in Europe

by Hamza Malick

This Python program uses a set of data on the inflation rates of European nations from 2008 to 2019 to plot inflation rates and predict the rate of inflation between those years. Note: Graph doesn't show in the repo, but is visable on Colab.

Data Source: Kaggle
"
585,rodrigoaguerrero/inflation_calculator,R,
586,daha6801/Inflation_Analysis,Python,"# Inflation_Analysis
This project collects the data from Us gov website and analyzes inflation year over year using Databricks by comparing the price of Gas, all items, and weekly compensation etc.

#This is our reference for the sourcing of U.S. Bureau of Labor Statistics data
#U.S. Bureau of Labor Statistics. (2021, March 2). API version 2.0 Python sample code. U.S. Bureau of Labor Statistics. Retrieved May 3, 2022, from #https://www.bls.gov/developers/api_python.htm#python2

Note :- There is a limit on the number of times you can access data from U.S. Bureau of Labor Statistics website using the APIs mentioned above

This project also collects BTC price from Yahoo finance and does some camparision with other areas mentioned above.
"
587,nculjak/Inflation-Calculator,CSS,
588,lastunicorn/Inflation-Calculator,C#,"# Inflation Calculator (The Anatomy of an Application)

## Description

A desktop WPF application that calculates the equivalent value of an amount of money in another moment in time, based on the historical values of the inflation rate provided in a text file.

## Discussions and Suggestions

https://github.com/lastunicorn/Inflation-Calculator/discussions

I appreciate any opinion or suggestion:

- Did you feel the need for a specific feature?
- Did you like or dislike something?
- Do you have questions?
- etc...

I'm looking forward to hearing from you.

## Donations

> If you like my work and want to support me, you can buy me a coffee:
>
> [![ko-fi](https://www.ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/Y8Y62EZ8H)

"
589,FurkanToprak/inflation.ninja,TypeScript,"# inflation.ninja

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 13.3.7.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The application will automatically reload if you change any of the source files.

## Production server

Deployed on AWS Amplify.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.
"
590,baydogan/fullstack-inflation,JavaScript,"# fullstack-inflation
"
591,CHC2022/Inflation-Hedge,Solidity,"# Inflation Hedge with Chainlink External Adapter and Keeper

We built a decentralized exchange for binary call options on inflation. If the next release of median consumer price index (CPI) is greater than the strike level, option buyer will receive a fixed payout, otherwise option seller gets the payout. The exchange uses an external adapter to track the underlying (median CPI released monthly by the Federal Reserve Bank of the US), and uses Chainlink Keeper to automatically settle the option contracts. Our smart contracts are fully tested on Polygon Testnet. 

## Decentralized Exchange for Binary Call Options
In our implementation of exchange, users can place bids, asks to an options struct array. Bids and asks can be canceled as long as they are not taken (transacted). Users can buy or sell options from the bids array and asks array. Option buyers only need to pay the option premium as margin. Option sellers, on the other hand, need to put down the payout amount minus option premium as margin. In our setting, the payout amount is fixed at 1 eth. On Ethereum network, it means one ETH. On Polygon network, it means one MATIC. Premiums are denominated in finneys, or 1/1000 of an eth. 

Although our exchange uses median CPI as underlying, it really can be just about any data that has a trusted API as information source. For example, will Novak Djokovic have more than 24 grand slam titles at the end of 2023 is a valid underlying. Will extraterrestrial life be discovered by the end of 2025 is also valid. Will Donald Trump be voted again as the President of the US at the end of 2024 is also interesting. As for inflation, we have many kinds of inflation data with focus on food, energy, housing, or a particular geographic region. We aim to found a decentralized exchange for almost any topic, bounded only by regulation and imagination.  

## Keeper for automatic contract settlement
In our implementation, the expiration time is set to be Sep 13, 2022, 10 am EDT. This is the announced release time of August median CPI.  However, there is no guarantee that the API will be updated at that exact moment. We can rely on the exchange contract owner to manually update the external adapter. However, a more efficient way is to let Chainlink Keeper do the job. Upon expiration, Keeper will examine if the underlying number from the external adapter contract is still the same. If it is, Keeper will request an update from the external adapter every 4 hours until there is a different number. Then, the underlying will be updated to that new number and the expire function will be called and all options will be settled. Once settled, users who have uncancelled bids/asks can withdraw their margins and winners can withdraw their payouts minus a fee. 
"
592,eshaben/inflation-squid,TypeScript,"# squid-template

Sample [squid](https://subsquid.io) project to demonstrate its structure and conventions.
It accumulates [kusama](https://kusama.network) account balances and serves them via graphql API. For more info consult [FAQ](./FAQ.md).

## Prerequisites

* node 16.x
* docker

## Quickly running the sample

```bash
# 1. Install dependencies
npm ci

# 2. Compile typescript files
npm run build

# 3. Start target Postgres database
docker compose up -d

# 4. Apply database migrations from db/migrations
npx sqd db create
npx sqd db migrate

# 5. Now start the processor
node -r dotenv/config lib/processor.js

# 6. The above command will block the terminal
#    being busy with fetching the chain data, 
#    transforming and storing it in the target database.
#
#    To start the graphql server open the separate terminal
#    and run
npx squid-graphql-server
```

## Setup for parachains

Subsquid provides Squid Archive data sources for most parachains. Use `lookupArchive(<network name>)` to lookup the archive endpoint by the network name, e.g.

```typescript
processor.setDataSource({
  archive: lookupArchive(""basilisk"")[0].url,
  //...
});
```

To make sure you're indexing the right chain one can additionally filter by genesis hash:

```typescript
processor.setDataSource({
  archive: lookupArchive(""basilisk"", undefined, ""0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"")[0].url,
  //...
});
```

If the chain is not yet supported, please fill the [form](https://forms.gle/Vhr3exPs4HrF4Zt36) to submit a request.

## Setup for devnets and testnets

Non-production chains, e.g. Devnets and Testnets are not supported by `lookupArchive` and one has to provide a local Squid Archive as a data source.

Inspect `archive/.env` and provide the websocket endpoint for your node. If the network requires custom type bundles (for older versions of Substrate), mount them as volumes in `archive/docker-compose.yml` and uncomment the relevant sections in `archive/.env`.

Then run (in a separate terminal window)

```bash
docker compose -f archive/docker-compose.yml up
```

Inspect your archive at `http://localhost/console`. Run the processor with

```typescript
processor.setDataSource({
  archive: `http://localhost/v1/graphql`,
  chain: // your network endpoint here
});
```

To drop the archive, run
```bash
docker compose -f archive/docker-compose.yml down -v
```


## Dev flow

### 1. Define database schema

Start development by defining the schema of the target database via `schema.graphql`.
Schema definition consists of regular graphql type declarations annotated with custom directives.
Full description of `schema.graphql` dialect is available [here](https://docs.subsquid.io/schema-spec).

### 2. Generate TypeORM classes

Mapping developers use TypeORM [EntityManager](https://typeorm.io/#/working-with-entity-manager)
to interact with target database during data processing. All necessary entity classes are
generated by the squid framework from `schema.graphql`. This is done by running `npx sqd codegen`
command.

### 3. Generate database migration

All database changes are applied through migration files located at `db/migrations`.
`sqd(1)` tool provides several commands to drive the process.
It is all [TypeORM](https://typeorm.io/#/migrations) under the hood.

```bash
# Connect to database, analyze its state and generate migration to match the target schema.
# The target schema is derived from entity classes generated earlier.
npx sqd db create-migration

# Create template file for custom database changes
npx sqd db new-migration

# Apply database migrations from `db/migrations`
npx sqd db migrate

# Revert the last performed migration
npx sqd db revert

# DROP DATABASE
npx sqd db drop

# CREATE DATABASE
npx sqd db create            
```

### 4. Generate TypeScript definitions for substrate events and calls

This is an optional part, but it is very advisable. 

Event and call data comes to mapping handlers as a raw untyped json. 
Not only it is unclear what the exact structure of a particular event or call is, but
it can also rather frequently change over time.

Squid framework provides tools for generation of type-safe, spec version aware wrappers around
events and calls.

The end result looks like this:

```typescript
/**
 * Normalized `balances.Transfer` event data
 */
interface TransferEvent {
    from: Uint8Array
    to: Uint8Array
    amount: bigint
}

function getTransferEvent(ctx: EventHandlerContext): TransferEvent {
    // instanciate type-safe facade around event data
    let event = new BalancesTransferEvent(ctx)
    if (event.isV1020) {
        let [from, to, amount, fee] = event.asV1020
        return {from, to, amount}
    } else if (event.isV1050) {
        let [from, to, amount] = event.asV1050
        return {from, to, amount}
    } else {
        // This cast will assert, 
        // that the type of a given event matches
        // the type of generated facade.
        return event.asLatest
    }
}
```

Generation of type-safe wrappers for events and calls is currently a two-step process.

First, you need to explore the chain to find blocks which introduce new spec version and
fetch corresponding metadata. 

```bash
npx squid-substrate-metadata-explorer \
  --chain wss://kusama-rpc.polkadot.io \
  --archive https://kusama.indexer.gc.subsquid.io/v4/graphql \
  --out kusamaVersions.json
```

In the above command `--archive` parameter is optional, but it speeds up the process
significantly. From scratch exploration of kusama network without archive takes 20-30 minutes.

You can pass the result of previous exploration to `--out` parameter. In that case exploration will
start from the last known block and thus will take much less time.

After chain exploration is complete you can use `squid-substrate-typegen(1)` to generate 
required wrappers.

```bash
npx squid-substrate-typegen typegen.json
```

Where `typegen.json` config file has the following structure:

```json5
{
  ""outDir"": ""src/types"",
  ""chainVersions"": ""kusamaVersions.json"", // the result of chain exploration
  ""typesBundle"": ""kusama"", // see types bundle section below
  ""events"": [ // list of events to generate
    ""balances.Transfer""
  ],
  ""calls"": [ // list of calls to generate
    ""timestamp.set""
  ]
}
```

## Project conventions

Squid tools assume a certain project layout.

* All compiled js files must reside in `lib` and all TypeScript sources in `src`. 
The layout of `lib` must reflect `src`.
* All TypeORM classes must be exported by `src/model/index.ts` (`lib/model` module).
* Database schema must be defined in `schema.graphql`.
* Database migrations must reside in `db/migrations` and must be plain js files.
* `sqd(1)` and `squid-*(1)` executables consult `.env` file for a number of environment variables.

## Types bundle

Substrate chains which have blocks with metadata versions below 14 don't provide enough 
information to decode their data. For those chains external 
[type definitions](https://polkadot.js.org/docs/api/start/types.extend) are required.

Type definitions (`typesBundle`) can be given to squid tools in two forms:

1. as a name of a known chain (currently only `kusama`)
2. as a json file of a structure described below.

```json5
{
  ""types"": {
    ""AccountId"": ""[u8; 32]""
  },
  ""typesAlias"": {
    ""assets"": {
      ""Balance"": ""u64""
    }
  },
  ""versions"": [
    {
      ""minmax"": [0, 1000], // block range with inclusive boundaries
      ""types"": {
        ""AccountId"": ""[u8; 16]""
      },
      ""typesAlias"": {
        ""assets"": {
          ""Balance"": ""u32""
        }
      }
    }
  ]
}
```

* `.types` - scale type definitions similar to [polkadot.js types](https://polkadot.js.org/docs/api/start/types.extend#extension)
* `.typesAlias` - similar to [polkadot.js type aliases](https://polkadot.js.org/docs/api/start/types.extend#type-clashes)
* `.versions` - per-block range overrides/patches for above fields.

All fields in types bundle are optional and applied on top of a fixed set of well known
frame types.

## Differences from polkadot.js

Polkadot.js provides lots of [specialized classes](https://polkadot.js.org/docs/api/start/types.basics) for various types of data. 
Even primitives like `u32` are exposed through special classes.
In contrast, squid framework works only with plain js primitives and objects.
This allows to decrease coupling and also simply dictated by the fact, that
there is not enough information in substrate metadata to distinguish between 
interesting cases.

Account addresses is one example where such difference shows up.
From substrate metadata (and squid framework) point of view account address is simply a fixed length
sequence of bytes. On other hand, polkadot.js creates special wrapper for account addresses which 
aware not only of address value, but also of its 
[ss58](https://docs.substrate.io/v3/advanced/ss58/) formatting rules.
Mapping developers should handle such cases themselves.

## Graphql server extensions

It is possible to extend `squid-graphql-server(1)` with custom
[type-graphql](https://typegraphql.com) resolvers and to add request validation.
More details will be added later.

## Disclaimer

This is alpha-quality software. Expect some bugs and incompatible changes in coming weeks.
# inflation-squid
"
593,foxsnow38/InflationRateToCentralBankOfTurkeyBetween2012_2022,HTML,website: https://infilationpercent2022.netlify.app/ (JSON)
594,bonarbridge/inflation-stats,,"inflation-stats
===============

Inflation rates in US from 1960s to 2000s
"
595,spleenhouse/fisting,HTML,
596,michaeljunokas/inflation_adjusted_ticker,,"# inflation_adjusted_ticker
Adjusting stock prices for inflation
"
597,joepalardy/Inflation_Block,R,"# Inflation_Block
Stan program 
"
598,Characterlimit/Cosmic-Inflation,,"Cosmic-Inflation
================

An Android/Desktop Top Down Shooter
"
599,fernote7/Inflation_Expectations,R,
600,dybushnell/inflation_db,Ruby,"# InflationDb

InflationDb allows you to take a dollar amount from any year between 1635 and 2018 and find that amount adjusted for inflation in 2019.

## Installation

Add this line to your application's Gemfile:

```ruby
gem 'inflation_db'
```

And then execute:

    $ bundle

Or install it yourself as:

    $ gem install inflation_db

## Usage

To calculate inflation on an amount from 1635-2018 to 2019, add this line to your code:

```calculate_inflation(year_of_original_amount, that_original_amount)```

and the method will return a float rounded to two decimal places.

To calculate inflation on an amount from 1635-2019 to any other year 1635, add this line to your code:

```calculate_inflation(year_of_original_amount, that_original_amount, year_of_new_amount)```


Examples:  
 
 - to calculate inflation on $10 from 1776 to 2019, you can write

```calculate_inflation(1776, 10)```

  or

```calculate_inflation(1776, 10, 2019)```

 - to calculate inflation on $10 from 1776 to 1980, you would write
 
```calculate_inflation(1776, 10, 1980)```

- to calculate what $100 in 2019 would have been worth in 1888, you would write

```calculate_inflation(2019, 100, 1888)```



## Contributing

Bug reports and pull requests are welcome on GitHub at https://github.com/dybushnell/inflation_db. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.

## Acknowledgments

I would like to thank Nick Stano for his guidance and assistance. I would also like to thank the Flatiron School, Tashawn Williams, Brianna Dixon, and Jeff Hwang. 

## License

The gem is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).

## Code of Conduct

Everyone interacting in the InflationDb project’s codebases, issue trackers, chat rooms and mailing lists is expected to follow the [code of conduct](https://github.com/dybushnell/inflation_db/blob/master/CODE_OF_CONDUCT.md).
"
601,jedaboin/inflation-exp,Python,"# inflation-exp
"
602,noname1014/Aggressive-Inflation,,"# James and Lucas' assignment. Oh and that other guy
This is the group assignment for ICT
"
603,VinniciusPS/Inflation-Calculator,Python,"# Inflation-Calculator
Monetary correction calculator by ipca or igp-m. Data directly from IPEA

Check the app in: https://share.streamlit.io/vinniciusps/inflation-calculator/main/ipea.py
"
604,greedisgud/Inflation-Tracker,,# Inflation-Tracker
605,RM503/Stochastic_Inflation,Python,"# Numerical treatment of stochastic inflation in slow-roll and beyond
"
606,shruti-misra/inflation_viz,Jupyter Notebook,"# Design Decisions and Development Process

## Design Decisions

The goal of our visualization was to create a dashboard showing how basic aspects of life are impacted by inflation. 

### Data Rationale

We first started by choosing our data of interest. Inflation rate was an obvious choice given that it was central to the visualization. We then asked the question, what are some basic economic elements of people's lives. Four categories emerged from our discussions: unemployment (people care about having a job), wages (people care about how much they earn), mortgage (people care about buying a house) and gas prices (people care about cost of transportation). Each of the four team members then researched each category to make sure they were relevant to inflation. We then gathered temporal data for each of the categories and inflation rate. 

We also considered the gas price data to encode with the inflation at the first, because it is one of the most common goods that people see daily and consume daily. But since it has already been in the CPI implicitly and its growth is just a manifestation of the inflation which is not the cause of inflation, we finally chose WTI Crude oil to encode with.

### Encoding Rationale

The data for each category was a percentage value and thus was quantitative. We had a choice between scatterplots or line charts. We ended up selecting line charts because we were interested in showing the viewer trends over time and decided that line charts do that more effectively. Furthermore, each category of data was encoded in a different color to differentiate between them. 

### Layout and Interaction Rationale

The biggest question guiding our layout and interaction choices was ""what do we want out user to get out of the dashboard?"" Do we want the user to just be able to compare different categories independently with inflation? or do we want the user to be able to compare categories with inflation and with each other? This was mainly a scoping issue. Eventually, we decided that we wanted to stick to having the user visualize the relationship between each category and inflation independently and not build visualization for cross-category comparisons (i.e wages vs. unemployment etc) as that would make everything too complex.

- Given our above decision we decided to choose a single graph panel with the ability to have a dropdown menu where users could choose their cateogry of interest and compare it with inflation. 

- In the graph panel, we created grey bars to mark periods of recession as defined by the Federal Reserve, as recessions are such extreme and influential period in the business cycle. The idea for the grey bar came from the visualization on the website of our data source (https://fred.stlouisfed.org/series/FPCPITOTLZGUSA). 

- While it was nice to have trendlines, we also wanted to provided the user with some details on demand such as explicit values of the data for each year. So, we incorporated the interaction technique from the ""stock prices"" example in the Colab notebook from the interactions lecture from class. In addition to using the sliding ruler to show percentages, we also used it to annotate the recession periods indicated by the grey bars for additional clarity. 

- Our goal with the dashboard was to provide the user with a historical overview of economic trends, but also provide the ability for the user to analyze smaller periods of time (for example trends in the 1980s, 1990s etc). This is because economic policies and circumstances vary widely through time. Our economy today is vastly different from what it was in the 1980s (for example, most of the technology sector that exists today barely existed back then). So, we added a zooming along the x-axis functionality for the user to be able to zoom into time periods they might be interested in. 

- A minor design decision was what should be the initial state of the chart. For the longest time, we had it so that initially all 5 trendlines will be displayed on the graph until the user picked an option from the dropdown. Later, we decided against it and initialized the chart to display wages vs. inflation. This was because of two reasons (1) having all the charts on one graph was overwhelming and look cluttered, especially with the oil price changes looming over everything else and (2) there was a small bug. Since the dropdown menu was also initialized to start at ""unemployment"", clicking ""unemployment"" again didn't do anything (didn't bring up the right graph). The user would first have to select a different option and then ""unemployment"" for the interactive filtering to work.  

- Because each category and inflation has such a complex relationship, we realized that the user would need some context to understand what's going on. So, we used the gitlab pages website to design information tabs that provided brief insight into the relationship each category had with inflation and point out some salient trends in the visualization. This information is by no means comprehensive, but hopefully is just enough for someone who doesn't know anything about inflation to get started. 

## Development Process

We initially started with discussing what variables to compare with inflation for our visualization. Four variables/categories emerged: unemployment, wages, mortgage and oil prices. Each of us then picked one category to explore its relationship with inflation further. The exploration phase roughly took an average of 2 hours per person

- Neha looked at inflation and mortgage
- Shruti looked at inflation and unemployment
- Mai looked at inflation and oil prices
- Boyuan looked at inflation and wage change

Once the data was decided the work was split into data wrangling (Mai), application design (Neha, Boyuan, Shruti (supporting)) and writeup + webpage design (Shruti, Mai)


1. Mai first put together the data in the correct format 

2. To gauge how long the application design will take Shruti created an initial prototype of the application with the graph panel with the grey bars, sliding ruler showing values per  year for all four data categories and inflation (~3 hours). 

3. Boyuan and Neha then iterated upon the prototype developed in 2 to add the dropdown filter. However, they ran into a challenge where they could not figure out double selections for the same visualization. So, instead of a sliding ruler, this next prototype had tooltips and zoom (only along the y axis) enabled. Furthermore, the tooltip was only showing up during recession years (grey bars) and the WTI Crude Oil trend line was not showing up. Also, Boyuan and Neha tried to add the interval selection feature. However, brushing is actually flatten the line curve when zooming in too much, creating some issues of overplotting, so this feature was ignored. (~7 hours).

4. Shruti was able to fix the WTI Crude Oil not showing up. It was a small textual error in the data file, so that column was not loading correctly (~ 10 minutes)

5. Boyuan was then able to get the sliding ruler pointwise selection and the dropdown menu selection to work. However, the black circle dot for the inflation chart was not showing up on the sliding ruler (~ 1 hour). We also decided to zoom along the x-axis for the temporal analysis.

6. Neha worked on figuring out how to zoom only along the x-axis (~ 2 hours)

7. Shruti fixed the black dot for inflation on the sliding ruler and zooming along the x-axis. Turns out interactive() does not work with nominal data, so the 'Year' column had to be transformed into datetime for the zoom to work. (~ 1.5 hours)

8. Shruti worked on creating the gitlab page and populating it with textual data and the visualization. Neha, Boyuan and Mai provided textual explanations for each of their categories. (~ 4 hours)

9. Mai and Shruti drafted the writeup (~ 1.5 hours)

### Challenges 

1. Double selection: it took three people to figure out how the dropdown menu interaction can be integrated with the sliding ruler. Now, we all have a better understanding of altair

2. Data Wrangling: The very first step of data wrangling took time. It also changes during the design process. Different visualiation design might require different format of datasets.

3. Zooming: figuring out how to zoom along the x-axis was challenging and took up some time because we were not familiar with altair's limitations. Turns out you can zoom with nominal and ordinal variables in altair. So, the years had to be transformed to temporal type variable. 

### Design Limitations

1. We could not figure out a way to restrict the zoom feature so that it does not zoom out or zoom out too much. Currently, you could zoom in or zoom out to the point where the visualization is unclear. 

2. Minor detail: we could not figure out how to have the ""COVID-19 pandemic"" annotation for the grey bar to be on two lines, so currently that annotation gets cut off a little in the native graph and needs to be zoomed out/ moved a little for the full annotation to show up.
 

## Deployment Link

This repo is deployed at: https://shruti-misra.github.io/inflation_viz/
"
607,whoisnnamdi/cochrane-inflation,Jupyter Notebook,
608,Dusan2001/Inflation-Kalkulator,JavaScript,
609,rlivianu/inflation_rnd,,"# inflation_rnd
 
"
610,ruhl0029/inflation-consequences,Jupyter Notebook,"# Inflation and its consequences

Data and code for the [UW Now](https://www.uwalumni.com/uw-now/) livestream, July 12, 2022.

"
611,arkgah/inflation-rest,Java,"# inflation-rest
A spring boot REST web service for calculating CPI

## Spring boot REST веб-сервис для расчёта индекса инфляции (CPI)

Используется:
* Web
* Data JPA
* Validation
* PostgreSQL
* Security
* JWT
* i18n
* Test

Для работы с сервисом прилагаются коллекция запросов и переменные окружения для Postman

### Инициализация

1. Создать рабочую и тестовые DB
2. Указать настройки соединений с DB, соответственно, в application.properties и application-test.properties
3. Перед первым запуском раскомментировать указанные в application.properties строки. Создастся демонстрационная схема с
   данными.
4. Перед последующими запусками закомментировать указанные в application.properties строки

### Работа с сервисом

1. Импортировать в Postman прилагаемую коллекцию запросов и переменные окружения.
2. Указать свои настройки (адрес, порт) в переменной окружения
3. Для доступа к конечным точкам (endpoints), необходимо авторизоваться через Postman-запрос Auth/Login.  
   Для демонстрационных целей, после инициализационного запуска, создаются 2 пользователя с login: user и admin.
   Пароль у них 12345678.
   Для новых пользователей, создаваемых через /Auth/New user, производится контроль качества пароля.
4. После успешной авторизации на сервисе, в Postman автоматически задаётся JWT и можно выполнять запросы.
5. Часть endpoints, как в демонстрационных, так и практических целях, имеет доступ только для пользователей с ролью
   ROLE_ADMIN

### Тестирование

1. Для интеграционного тестирования используется тестовая база PostgreSQL. Можно было бы использовать H2 DB (в качестве
   упражнения, или иных целей).
2. Готовы некоторые модульные тесты. Остальные - в процессе написания.
3. Готовы некоторые интеграционные тесты. Остальные - в процессе написания."
612,clpo13/inflation-calc-c,C,"# Inflation Calculator

A simple command-line tool to find the difference in purchasing power of the US
dollar, as well as the cumulative percent of inflation, between two years.

The included [cpi.csv](cpi.csv) file contains annual Consumer Price Indices from
1913 to 2016, sourced from the United States
[Bureau of Labor Statistics](http://www.bls.gov/cpi/) website.

## Requirements

* A C compiler (gcc, clang, MSVC, etc.)
* CMake

## Compile and run

In the top source directory, run:

```bash
mkdir build && cd build
cmake ..
make
```

Then run `./inflation-calc`.

## Caveats

Make sure `cpi.csv` is in the same directory, or you'll get an error. CMake will
automatically copy the file to the build directory, but if you move the built
binary, the CSV needs to go with it.

Also, the program expects the CSV to have only two fields, year and CPI,
separated by commas. Additional fields will be ignored. A header line (like the
one in the included CSV file) is optional. If present, it will be ignored.

## Purpose

For now, the program just reads the CSV and spits formatted data out, but the
idea is to be able to compare the purchasing power of a given amount of USD for
two different years. For example, `inflation-calc --amount 1.00 1913 2016` should
return `$24.24`. Optionally, the cumulative rate of inflation would be returned
if specified with a command-line flag.

## TODO

* [ ] Accept user input to compare different years and amounts
* [ ] Include CPI data in a more portable way (instead of copying the CSV)
* [ ] Pull data directly from [BLS](https://www.bls.gov/cpi/) via their API

## License

This code is free to use, modify, and distribute according to the terms of the
MIT License, the text of which is available in [LICENSE](LICENSE).
"
613,itsnotbubs/ZHAW-Scientific-Programming-GroupProject,Python,"# ZHAW-Scientific-Programming-GroupProject
 how interest rates effects stock market returns 
"
614,Gant1855/Project-1-Group-2,Jupyter Notebook,
615,cran/sifds,R,
616,jwg4/british-inflation-data-from-literature,,"# british-inflation-data-from-literature
British inflation data from literature

The aim of this project is to gather information on prices across time from works of literature and to present it in an accessible way.

Pull requests welcome - please feel free to add information in any convenient format if you have some.
"
617,clustersdata/1998-MCM-B-Grade-Inflation,,"# 1998-MCM-B-Grade-Inflation


Background

Some college administrators are concerned about the grading at A Better Class (ABC) college. On average, the faculty at ABC have been giving out high grades (the average grade now given out is an A-), and it is impossible to distinguish between the good and mediocre students. The terms of a very generous scholarship only allow the top 10% of the students to be funded, so a class ranking is required.

The dean had the thought of comparing each student to the other students in each class, and using this information to build up a ranking. For example, if a student obtains an A in a class in which all students obtain an A, then this student is only “average” in this class. On the other hand, if a student obtains the only A is a class, then that student is clearly “above average.” Combining information from several classes might allow students to be placed in deciles (top 10%, next 10%, etc.) across the college.

Problem

Assuming that the grades given out are (A+, A, A-, B+,…), can the dean's idea be made to work? Assuming that the grades given out are only (A,B,C,…), can the dean's idea be made to work? Can any other schemes produce a desired ranking? A concern is that the grade in a single class could change many student's deciles. Is this possible?

Data Sets

Teams should design data sets to test and demonstrate their algorithms. Teams should characterize data sets that limit the effectiveness of their algorithms.
"
618,xenakas/inflation_targeting,TeX,"# Does Inflation Targeting Matter?
### Laurence Ball and Niamh Sheridan


The performance of inflation-targeting regimes has been quite good. In-
flation-targeting countries seem to have significantly reduced both the
rate of inflation and inflation expectations beyond that which would
likely have occurred in the absence of inflation targets. 

The U.K. data show that not only has inflation been lower since infla-
tion targeting was introduced, but that, as measured by its standard de-
viation, it has also been more stable than in recent decades. Moreover,
inflation has been less persistent—in the sense that shocks to inflation
die away more quickly—under inflation targeting than for most of the
past century. 

One of the main benefits of inflation targets is that they may help to
“lock in” earlier disinflationary gains, particularly in the face of one-
time inflationary shocks. We saw this effect, for example, following the
exits of the United Kingdom and Sweden from the European Exchange
Rate Mechanism and after Canada’s 1991 imposition of the Goods and
Services Tax. In each case, the re-igniting of inflation seems to have been
avoided by the announcement of inflation targets that helped to anchor
the public’s inflation expectations and to give an explicit plan for and di-
rection to monetary policy. 
"
619,bacoco/inflation-ml,HTML,"https://towardsdatascience.com/deep-learning-to-predict-us-inflation-70f26405bf76
"
620,jasoncable/inflation-calc,C#,"# inflation-calc

An inflation calculator for Alexa.

My first attempt at AWS Lambda.  This skill is live.  

""Alexa, install Inflation Calc""

__Please ignore the messy code.  This was just a first attempt.  It needs some cleanup!__"
621,terminal-labs/inflation-precursor,Shell,"curl https://raw.githubusercontent.com/terminal-labs/inflation-precursor/main/install.sh -o install.sh; bash install.sh
"
622,hully-rolemberg/inflation-midas,R,"# INFLATION-MIDAS
 forecasting inflation using daily data and MIDAS models
"
623,SlimBenTanfous/inflation-rate,R,"# inflation-rate
An Rshiny app that describes inflation rate in the world
"
624,jaycode/inflation_damodaran,Jupyter Notebook,"This projects attempts to duplicate this analysis by prof. Damodaran:

[Inflation and Investing: False Alarm or Fair Warning?](https://www.youtube.com/watch?v=p0vqmjgF3E4)

I thought it might be interesting to be able to get the latest data whenever we need to perform this analysis in the future.

Data source locations:

- Inflation: https://www.quandl.com/data/RATEINF/CPI_USA-Consumer-Price-Index-USA (need to sign up for an account to download)
- T-Bond: [Damodaran Online: Historical Returns on Stocks, Bonds and Bills](http://pages.stern.nyu.edu/~adamodar/New_Home_Page/datafile/histretSP.html) (I could not find a larger data source than the one in prof. Damodaran's website so I used it)
- Gold: [Gold Prices Dataset from Gold Hub](https://www.gold.org/goldhub/data/gold-prices) (need to sign up for an account to download)
- S&P 500 and Real Estate: [ONLINE DATA ROBERT SHILLER](http://www.econ.yale.edu/~shiller/data.htm) (Much thanks to Prof. Robert J. Shiller for providing this dataset)

The Markdown report is available in the [report](./report/inflation_research.md) directory (best read from your local computer - on the Github website, the styles for the tables do not display properly since CSS is not supported.).
"
625,UBICenter/inflation-qtom,Jupyter Notebook,"# UBI Center analysis template
Template for UBI Center analyses, including Jupyter-Book and GitHub Action files.

Instructions:
* Replace `reponame` with the name of the repo in `environment.yml`, `jb/_config.yml`, and the files in `.github/workflows/*`.
* Add data generation `.py` script and data files to `jb/data` folder.
Store files in `.csv.gz` format and load them as local files in analysis notebooks.
* Add all necessary packages to `environment.yml`.
* Use pull requests to make changes; the workflows will trigger and alert you of any errors.
* In all three GitHub Actions (YAML files in `.github/workflows/`), replace the `if: github.repository == [account/repo]` lines with the account and repo of this GitHub repository.

## Website integration

In `website/`, there are two file:
- `post.ipynb` should contain all the content, including graphs, tables and markdown, of the website post.
- `metadata.yml` should contain the post metadata, including authorship, title, cover image and other fields.

On pushing changes to the repo, a fork of the `ubicenter.org` repo will be updated with the new post, under the branch with the same name as this repo. From there, a PR should be filed from the source repo `ubicenter-post-bot/repo-name` to `ubicenter/master`."
626,NaveenGali11/Inflation-Calculator,Java,"# Inflation-Calculator

[![Build status](https://build.appcenter.ms/v0.1/apps/c91f517c-ebab-4a2b-8a00-3f3d70dd4577/branches/dev/badge)](https://appcenter.ms)
"
627,tdhock/grade-inflation,HTML,"** 13 Jan 2022

[[file:figure-before-after.R]] makes the following figure which shows, for
a given year, the percent of grades received, over all CS classes.

[[file:figure-before-after-percent.png]]

The following figure shows the differences in that percent between
consecutive years. For example we see a big increase in the percent
of A's assigned in 2020, 8.4% more than in 2019.

[[file:figure-before-after-percent-diff.png]]

[[file:figure-before-after-level.R]] makes the following figure which
shows, for a given year, the percent of grades received, over all CS
classes at a given level.

[[file:figure-before-after-level-percent.png]]

The following figure shows the differences in that percent between
consecutive years. For example we see a big increase in the percent of
A's assigned in 2020, for 3xx and 4xx level classes.

[[file:figure-before-after-level-percent-diff.png]]

Data source: http://www7.nau.edu/pair/reports/ClassDistribution

[[file:download.R]] could be used to make POST requests? Just download a
few files in a web browser for now.
"
628,Mojisibe/Inflation-rate,R,
629,david-isailovich/Inflation-Calculator,CSS,"# Inflation-Calculator
My first Java Script project.
"
630,context-dependent/inflation-adjustment,,
631,Peyman2012/Calculate-inflation,Jupyter Notebook,# Calculate-inflation
632,emilioosmenaiv/US_Inflation,Jupyter Notebook,
633,vincentbagilet/causal_inflation,HTML,"# Causal inflation

This repository contains the work by Léo Zabrocki and Vincent Bagilet for the paper ""Unconfounded but Inflated Causal Effects"".

A companion website displays most of these documents in a reader-friendly format: [https://vincentbagilet.github.io/causal_inflation/](https://vincentbagilet.github.io/causal_inflation/)"
634,Pierre-BenoitG/Inflation-Forecast,Jupyter Notebook,
635,styounessi/Inflation_Dashboard,Python,"# Inflation Tracking Dashboard
A quick, low-code way to get an inflation tracking dashboard up and running with an assortment of data and indicators in one place
without any extra frills or hindrances. In depth explanation can be found on [Medium](https://medium.com/geekculture/building-an-inflation-tracking-dashboard-with-plotly-dash-93edf01e1fcf).

## Requirements
You can install any of the required libraries using `pip` like in the example below.

`pip install dash`

 - [Dash](https://pypi.org/project/dash/)
 - [Dash Bootstrap Components](https://pypi.org/project/dash-bootstrap-components/)
 - [BeautifulSoup](https://pypi.org/project/beautifulsoup4/)
 - [Pandas](https://pypi.org/project/pandas/)
 - [Pandas Datareader](https://pypi.org/project/pandas-datareader/)
 - [Plotly](https://pypi.org/project/plotly/)
 - [Requests](https://pypi.org/project/requests/)
 - [lxml](https://pypi.org/project/lxml/)

## Additional Information
Economic data is available on FRED, [Federal Reserve Economic Data](https://fredhelp.stlouisfed.org/fred/about/about-fred/what-is-fred/),
while commodity prices are sourced from [Yahoo Finance](https://finance.yahoo.com/commodities/).
"
636,teovonkesselstatt/inflation_targetting,Python,"# inflation_targetting

Esta web app me está ayudando a pensar cómo variaciones de los términos de intercambio afectan a la inflación. 
Consiste en 3 páginas.
1. *Country*: Gráficos por país.
2. *Full Database*: La base de datos, con shocks a los ToT de más de 3% resaltados.
3. *Correlations*: Correlaciones entre la inflación o el desvío de la meta contra variaciones en los ToT.
"
637,J-Isaula/Inflation-Forecast,Jupyter Notebook,
638,EricMasonFa/tsi-inflation-adjusted,JavaScript,
639,mtwn105/personal-inflation-calculator,TypeScript,"# Personal Inflation Calculator for India

![image.png](https://blog.amitwani.dev/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1643898323584%2F5X12ttUh2.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&w=1920&q=75)

""Personal Inflation Calculator"" for India, which is a tool to calculate personal inflation according to the different expenses among different categories.

![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1643897184497/ReNYykpwQ.png)

The personal Inflation concept tells us how every individual has his/her own inflation rate depending on the amount spent across different categories.

Also, you can choose between ""Rural"", ""Urban"" & ""Combined"" inflation.

Inflation for each category is sourced from RBI and is released every month. The Source of these values for the latest month is shown at the bottom.

This tool is built using Node JS, Angular, MongoDB and deployed on Northflank as a Docker container.
"
640,kpomerleau/taxbrackets,R,"taxbrackets
===========

Inflation Adjusts Federal Tax Provisions

This code takes current-law provisions in the tax code and adjusts them for inflation.

For more information see: http://taxfoundation.org/article/2015-tax-brackets
"
641,taskie/mystig,C++,
642,zhaohualu/ZISDE,,"# ZISDE
JAGS code for Zero-inflation Ornstein–Uhlenbeck process
"
643,juliokozarewicz/ipca,Python,"# **DESCRIPTION**
The IPCA is an indicator to track inflation. It is calculated based on the average price needed to buy a set of goods and services in a country, compared to previous periods.

Source: https://www.ibge.gov.br/estatisticas/economicas/precos-e-custos/9256-indice-nacional-de-precos-ao-consumidor-amplo.html

# **RESULTS**
Results obtained through the model estimation process.

## Variable analysis at level:
<img src=""4_results/1_ts_ipca_monthly_percentage.jpg""> <br /> <br />


<img src=""4_results/2_fac_facp_ipca_monthly_percentage.jpg""> <br /> <br />


<img src=""4_results/3_periodogram_ipca_monthly_percentage.jpg""> <br /> <br />


<img src=""4_results/4_level_descriptive_statistics_.jpg""> <br /> <br />


## Study of data stationarity:
<img src=""4_results/5_adf_test_level.jpg""> <br /> <br />


<img src=""4_results/6_adf_diff_result.jpg""> <br /> <br />


## X13-ARIMA-SEATS RESULTS:
<img src=""4_results/7_x13_results_ipca_monthly_percentage.jpg""> <br /> <br />


<img src=""4_results/8_x13_seasonal_adjustment_ipca_monthly_percentage.jpg""> <br /> <br />


## Model results:
<img src=""4_results/9_model_summary.jpg""> <br /> <br />


## Residual analysis:
<img src=""4_results/10_residuals (acf and pacf) - ipca_monthly_percentage.jpg""> <br /> <br />


<img src=""4_results/11_residuals (frequency distribution) - ipca_monthly_percentage.jpg""> <br /> <br />


<img src=""4_results/12_residuals (time serie) - ipca_monthly_percentage.jpg""> <br /> <br />


## Forecast:
<img src=""4_results/13_effective_fitted - ipca_monthly_percentage.jpg""> <br /> <br />
"
644,OmikM/visualization-of-inflation-data,Python,"Program, that shows inflation in Poland and U.S 2014-2022. program output is plot. I'm doing this project to get to know maplotlib. 


At this moment it looks like this v.3 (second plot is animated):

![Figure_3](https://user-images.githubusercontent.com/93057360/176552983-4b608a8f-b279-4ee1-8011-754b10a66bb7.png)

v.2:

![download-1](https://user-images.githubusercontent.com/93057360/171998473-d101f588-e7a4-488d-a572-a29f2e63a12f.png)

v.1:

![download](https://user-images.githubusercontent.com/93057360/171951381-10697234-f231-4862-a9cb-2222bd8744ba.png)

"
645,fqroldan/inflapstion,Julia,"# Credibility Dynamics and Disinflation Plans

Preliminary and incomplete codes
"
646,freeman129/RO_rAthena_inflation_in_NPC_shop,C,
647,covenasdl/ARIMA,,
648,spider000111/emi_effect,Python,
649,leejustin/sf-software-salary,Python,"# SF Software Salary

## Summary
Many online tools and platforms exist online that help us determine our self worth.  However, most of these rely on the user creating cumbersome, complicated profiles.  The data they generate is produced from a possibly unreliable data source with a method unknown to the user.

The script in this repository is catered towards software developer jobs in San Francisco.

In order to help validate these results or even potentially replace them, we can compare one's salary against an accurate and representative set of H1B data.

For more information, feel free to visit my blog here:
https://leejustin.com/blog/3701016340289169098

## Design
The script is a simple Python script that uses the `requests` and `BeautifulSoup` libraries to scrape the H1B data source. Unwanted results such as manager positions are filtered out. The data is then adjusted for annual cost-of-living changes using the Bureau of Labor Statistics' Consumer Price Index.

## Usage
Use pip to install the `BeautifulSoup` `requests` and `statistics` libraries.

```python run.py COMPANY_NAME```
"
650,zq00/glmhd,R,"# glmhd

## Overview

This R package estimates the inflation and variance of the MLE from a high-dimensional binary regression model. (Note: This package is currently under construction to fix numerical inaccuracy when gamma or beta0 is large.)

## Getting started

- You can find the package **vignette** under the Articles tab (https://zq00.github.io/glmhd/articles/my-vignette.html). 
- You can read more about the theory of high dimensional logistic MLE, and the methods used in the package [here](https://arxiv.org/abs/2001.09351).  

## Installation

You can install the package using 

```R
install.packages(""devtools"")
devtools::install_github(""zq00/glmhd"")
```

To install with vignettes, please run

```R
devtools::install_github(""zq00/glmhd"", build_vignettes = TRUE)
```

Note that the vignette takes about 20 min to knit, so feel free to download the [Rmarkdown file](https://github.com/zq00/glmhd/tree/master/vignettes) and run code line by line.

## Function documentation

You can find the function documentations under the [Reference](https://zq00.github.io/glmhd/reference/index.html) tab. To get started, you can take a look at the function `adjust_glm`, which computes the adjusted coefficient and standard error estimates.

## Source code

The source code is located at the [Github -> R](https://github.com/zq00/glmhd/tree/master/R) folder. 

## Feedback

If you encounter error or would like to provide feedback, please use [Github -> Issues](https://github.com/zq00/glmhd/issues) to reach us. Thank you! 
"
651,IeuanG/HyperInflation-CountDown,CSS,
652,sriyapradhan/LaborForce-and-Inflation,,# LaborForce-and-Inflation
653,kevin910162/Inflation-Linked-Bond-Design,MATLAB,"# Inflation-Linked-Bond-Design
 
"
654,NekomammaT/stochastic_long_inflation,Jupyter Notebook,
655,blake5634/US-Historical-Inflation,Python,"#  US Historical Inflation

Very simple dataset and plotting app. 

#### Source of Data: 
Prepared by the Utah Department of Workforce Services from tabulations published by Bureau of Labor Statistics, United States Department of Labor

[Link](https://jobs.utah.gov/wi/data/library/wages/uscpihistory.html) 



"
656,LQG-Florida-Atlantic-University/cos_pert_inflation,Mathematica,"# cos_pert_inflation
Manifestly Gauge-Invariant Cosmological Perturbation Theory from Full Loop Quantum Gravity II: Inclusion of Inflaton.

- eom_and_continuum_limit.nb contains the equations of motion (EoMs) of cosmological perturbation with inflaton up to first order. The continuum limit is calculated.
- newH0novnewschemefsimpccdN2.zip contains the jacobian matrix (20-by-20) of first order linear ODE of perturbation. The detailed information can be found in eom_and_continuum_limit.nb and the paper.
- cosmo_pert.jl contains the numerical evaluation of background and perturbations. It is recommended to use [Julia](https://julialang.org/) package [Pluto](https://github.com/fonsp/Pluto.jl) to read and evaluate the file. 
"
657,joshuarichard/time-inflation-converter,JavaScript,"# react-ts-boilerplate
"
658,anees-patwa/payment-inflation-project,,# payment-inflation-project
659,DylanMcBean/BalloonInflationGame,Processing,
660,anushkau/Inflation-rate-forecasting,,"# Inflation-rate-forecasting
We will be using the data provided by the world bank and try forecasting the inflation rate for the coming years of particular countries. This will be done in R.
- Currently I am using an Inflation data set for my Business Forecasting Project. Using Inflation trends we intent to use past values for India and USA which will be helpful in forecasting future inflation. The data that we are using is based on Inflation as measured by the consumer price index reflecting the annual percentage change in the cost to the average consumer of acquiring a basket of goods and services that may be fixed or changed at specific intervals on yearly basis
- This is an Economic Forecast and a Point forecast.
- In order to bring out the best outcome, we will compute the accuracy of the specifications using Mean Absolute Percentage Error (MAPE). Mean Absolute Percentage Error (MAPE) = (Absolute Error/Actual Volume) * 100
- In terms of time component, this is a Long Forecast. The trends are defined annually ranging from the year 1960-2020.
"
661,tulicsgabriel/Variance-Inflation-Factor-VIF-,Python,"# Variance-Inflation-Factor-VIF-
## Variance Inflation Factor in Python &amp; R

A way to explore the relationship between the features is to check the **Variance Inflation Factor (VIF)**. The VIF measures the correlation among independent variables (predictors) in regression models. We refer to this type of correlation as multicollinearity. Excessive multicollinearity can cause problems for regression models. The steps of VIF analysis are as follows:
1.	Drop target variable.
2.	Select one feature as new target.
3.	Use predictor features to predict new target using a linear regression model.
4.	Calculate R^2, (R squared is a measure that represents the proportion of the variance for a dependent variable that's explained by an independent variable or variables in a regression model), then calculate vif= 1/(1-R^2).
5.	Repeat steps 1-3 for all features.

### Interpretation
The rule of thumb for interpreting VIF values is:

- 1 — features are not correlated
- 1 < VIF < 5 — features are moderately correlated
- VIF > 5 — features are highly correlated
- VIF > 10 — high correlation between features and is cause for concern

A VIF greater than 10 is a signal that the model has a collinearity problem. Some say any feature that has a VIF more than 5 should be removed from your training dataset. Whichever way you look at it, VIF values above 5 are suspisious, and values above 10 are downright bad.


### About the example code

I've noticed that the *variance_inflation_factor* library from *statsmodels.stats.outliers_influence* gives different results for the VIF than the vif function from the *R car library*.

The **vif_analysis.py** file contains the *calc_vif* function which calculates the VIF using the statsmodels implementation, while **vif_analysis.R** contains the R implementation. Printing out the outputted dataframes (using the tatinic dummy data) show that there is indeed a difference between the outputs.

The **vif_analysis.py** file contains also a *calc_vif_from_scratch* function, which uses a LinearRegression model to calculate the VIF. The output of this function is the same as the output of the R implementation.

Enjoy!
"
662,john-mcmullan/Inflation_MinWage_Groceries,Jupyter Notebook,"# Inflation_MinWage_Groceries
Answer to question 1 of group 2

This file contains only one third of the final project

The question:
How does Inflation affect Minmum Wage and Grocery Prices.

The first graph we are going to look at shows average prices of commomon groceries and the average minimum wage from 2005 to 2021:
![AveGrocery](https://user-images.githubusercontent.com/100164773/182153351-dd3e72b7-4ebc-471c-85ae-c54b9c95d055.png)

Next we are going to look at the correlation values between the consumer price index and the average minimum wage and the average prices of groceries

![Beefcorrelation](https://user-images.githubusercontent.com/100164773/182161840-c1e865d4-46be-4813-b53e-5b786db480f8.png)

![Eggcorrelation](https://user-images.githubusercontent.com/100164773/182162009-b5ff89b6-9cb5-4207-8718-109d24e29f3f.png)

![Breadcorrelation](https://user-images.githubusercontent.com/100164773/182161874-00f3ce43-f4b4-4cc7-b61f-f511716ac1e2.png)

![Milkcorrelation](https://user-images.githubusercontent.com/100164773/182161897-7d829302-a4d6-4efe-9ac8-beef22b2135f.png)

![Wagecorrelation](https://user-images.githubusercontent.com/100164773/182161930-6d70ad9d-6c29-44f8-b6fb-db9973484d8e.png)

We fingd strong correlations in some categories in some but not all like beef, bread, and minimum wage. While the other categories, milk and eggs, have next to zero correlation to the consumer price index.

Then we compared these correlation values between the average grocery prices and the average consumer price index in the first half of 2022:

![Beef2022](https://user-images.githubusercontent.com/100164773/182163411-00160b98-7d39-422c-a90c-017970c98dfb.png)

![Egg2022](https://user-images.githubusercontent.com/100164773/182163449-35194cc1-e358-4a34-9def-9e0eefc6554b.png)

![Bread2022](https://user-images.githubusercontent.com/100164773/182163476-9966b858-878d-45a5-ba00-9731f4412036.png)

![Milk2022](https://user-images.githubusercontent.com/100164773/182163522-58112ea0-b8b2-4085-bf76-f236f19a9ff7.png)

We see strong correlation numbers for all our basic groceries for the first half of 2022. While we can draw the inflation can cause rise in the price of beef and bread we cannot say the same for milk and eggs. There must be other factors causing the rise of prices.
"
663,urvish7/Inflation_Unemployment_InterestRate,,# Inflation_Unemployment_InterestRate
664,SaiGuy1/change-in-inflation,C++,"# change-in-inflation
C++ program that outputs inflation rates for two successive years and whether the inflation is increasing or decreasing. 

Program properly calculates rates of inflation based on prices of an item over the past two years input by the user. This program uses functions and passes parameters through reference and value. 
"
665,sing1/Layout-Inflation-as-Intended,,"转自：https://possiblemobile.com/2013/05/layout-inflation-as-intended/

##Layout inflation is the term used within the context of Android to indicate when an XML layout resource is parsed and converted into a hierarchy of View objects. 
It’s common practice in the Android SDK, but you may be surprised to find that there is a wrong way to use *LayoutInflater*, and your application might be one of the offenders. If you’ve ever written something like the following code using *LayoutInflater* in your Android application: 
```Java
inflater.inflate(R.layout.my_layout, null);
```
PLEASE read on, because you’re doing it wrong and I want to explain to you why.
###Get to Know LayoutInflater
Let’s first take a look at how *LayoutInflater* works. There are two usable versions of the *inflate()* method for a standard application: 
```Java
inflate(int resource, ViewGroup root)
```
```Java
inflate(int resource, ViewGroup root, boolean attachToRoot)
```
The first parameter points to the layout resource you want to inflate. The second parameter is the root view of the hierarchy you are inflating the resource to attach to. When the third parameter is present, it governs whether or not the inflated view is attached to the supplied root after inflation.

It is these last two parameters that can cause a bit of confusion. With the two parameter version of this method, *LayoutInflater* will automatically attempt to attach the inflated view to the supplied root. However, the framework has a check in place that if you pass *null* for the root it bypasses this attempt to avoid an application crash.

Many developers take this behavior to mean that the proper way to disable attachment on inflation is by passing null as root; in many cases not even realizing that the three parameter version of *inflate()* exists. By doing things this way, we also disable another very important function the root view has…but I’m getting ahead of myself.
###Examples from the Framework
Let’s examine some situations in Android where the framework expects you as a developer to interactively inflate portions of the view.
<br/>
<br/>
**Adapters** are the most common case for using LayoutInflater is custom ListView adapters overriding getView(), which has the following method signature:
```Java
getView(int position, View convertView, ViewGroup parent)
```
**Fragments** also use inflation often when creating views via onCreateView(); notice its method signature:
```Java
onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
```
Have you noticed that every time the framework wants you to inflate a layout, they also pass you the parent *ViewGroup* it will eventually be attached to? Notice also that in most cases (including the above two examples), it will throw an Exception later on if *LayoutInflater* is allowed to automatically attach the inflated view to the root.

So why do you suppose we are given this *ViewGroup* if we are not supposed to attach to it? It turns out the parent view is a very important part of the inflation process because it is necessary in order to evaluate the *LayoutParams* declared in the root element of the XML being inflated. Passing nothing here is akin to telling the framework “I don’t know what parent this view will be attached to, sorry.”

The problem with this is *android:layout_xxx* attributes are always be evaluated in the context of the parent view. **As a result, without any known parent, all LayoutParams you declared on the root element of your XML tree will just get thrown away**, and then you’ll be left asking “why is the framework ignoring the layout customizations I defined? I’d better check SO and then file a bug.”

Without LayoutParams, the *ViewGroup* that eventually hosts the inflated layout is left to generate a default set for you. If you are lucky (and in many cases you are) these default parameters are the same as what you had in XML…masking the fact that something is amiss.
###Application Example
So you claim you’ve never seen this happen in an application? Take the following simple layout that we want to inflate for a *ListView* row:
####R.layout.item_row
```Java
<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
　　android:layout_width=""match_parent""
　　android:layout_height=""?android:attr/listPreferredItemHeight""
　　android:gravity=""center_vertical""
　　android:orientation=""horizontal"">
　　<TextView
　　　　android:id=""@+id/text1""
　　　　android:layout_width=""wrap_content""
　　　　android:layout_height=""wrap_content""
　　　　android:paddingRight=""15dp""
　　　　android:text=""Text1"" />
　　<TextView
　　　　android:id=""@+id/text2""
　　　　android:layout_width=""0dp""
　　　　android:layout_height=""wrap_content""
　　　　android:layout_weight=""1""
　　　　android:text=""Text2"" />
</LinearLayout>
```
We want to set the height of our row to be a fixed height, in this case the preferred item height for the current theme…seems reasonable.

However, when we inflate this layout the wrong way
```Java
public View getView(int position, View convertView, ViewGroup parent) {
　　if (convertView == null) {
　　　　convertView = inflate(R.layout.item_row, null);
　　}
 
　　return convertView;
}
```
we end up with a result that looks like this<br/>
![github](http://www.doubleencore.com/wp-content/uploads/2013/05/Image11-300x187.png ""github"")  
What happened to the fixed height we set?? This is usually where you end up setting the fixed height on all your child views, switching the root elements height to *wrap_content*, and move on without really knowing why it broke (you may have even cursed at Google in the process).

If we instead inflate the same layout this way
```Java
public View getView(int position, View convertView, ViewGroup parent) {
　　if (convertView == null) {
　　　　convertView = inflate(R.layout.item_row, parent, false);
　　}
 
　　return convertView;
}
```
we end up with what we expected in the first place.<br/>
![github](http://www.doubleencore.com/wp-content/uploads/2013/05/Image21-300x187.png ""github"")  
Hooray!
###Every Rule Has An Exception
There are of course instances where you can truly justify a null parent during inflation, but they are few. One such instance occurs when you are inflating a custom layout to be attached to an *AlertDialog*. Consider the following example where we want to use our same XML layout but set it as the dialog view:
```Java
AlertDialog.Builder builder = new AlertDialog.Builder(context);
View content = LayoutInflater.from(context).inflate(R.layout.item_row, null);
 
builder.setTitle(""My Dialog"");
builder.setView(content);
builder.setPositiveButton(""OK"", null);
builder.show();
```
The issue here is that *AlertDialog.Builder* supports a custom view, but does not provide an implementation of *setView()* that takes a layout resource; so you must inflate the XML manually. However, because the result will go into the dialog, which does not expose its root view (in fact, it doesn’t exist yet), we do not have access to the eventual parent of the layout, so we cannot use it for inflation. It turns out, this is irrelevant, because *AlertDialog* will erase any *LayoutParams* on the layout anyway and replace them with match_parent.

So the next time your fingers are tempted to just type null into *inflate()*, you should stop and ask yourself “do I really not know where this view will end up?”

Bottom line, you should think of the two parameter version of *inflate()* as a convenience shortcut to omit true as the third paramter. You should not think of passing *null* as a convenience shortcut to omit false.
"
666,MarcusMLarsson/Forecasting-Inflation-Stacked-Regressions,Jupyter Notebook,"This jupyter notebook uses stacked regressions to forecast the inflation rate in the United States. I developed this solution mainly for practise. 
"
667,biruk-chafamo/Scalar_Field_Inflation,Jupyter Notebook,
668,isk-lie/hfwu_pension_n_inflation,,
669,Monika2101/Inflation_rate_Prediction,Jupyter Notebook,# Inflation_rate_Prediction
670,firstwan/malaysia-inflation-rate,Jupyter Notebook,
671,FurkanToprak/inflation.ninja-backend,Python,"# inflation.ninja-backend
Flask backend for [inflation.ninja](www.inflation.ninja), deployable on AWS Lightsail via Docker.

### Objective

I made this server as a way to scrape stock data from free stock APIs and to cache the results as required. This way, I can keep updated versions of stock quotes and provide thousands of users with up-to-date market information _without_ having to buy a premium API account with higher API rates.

### Architecture

* Python3.10 backend that makes API calls to AlphaVantage to get stock information. This data is then processed, compressed, and cached.

* These methods are exposed through Flask GET endpoints.
    * `/`: Health check endpoint that returns `Hello, World!`.
    * `/getStock?ticker=<STOCK>`: Endpoint that returns the daily stock quote of the stock.
    * * `/getTopStocks`: Endpoint that returns some of the stocks that were traded with the highest volume. Unfortunately, this is a hard-coded list of stocks (for now).

* This Flask service lives in a Docker container (Alpine image). You can see the `scripts/` directory to build and run the container. Look at the `Dockerfile` for more.

* This Docker container is then deployed on Amazon Lightsail.

## Interactive Shell

* `docker images`
* `docker run -it <image id> sh`

## Endpoint
Exposed locally at `http://172.17.0.2:8080`

## Deploying on AWS Lightsail

### Login to Docker Hub
`docker login`

### Build Docker Container
`./scripts/build_docker.sh`

### Tag container
`docker tag inflation-ninja-backend furkantoprak/inflation-ninja-backend`

### Push to Docker Hub
`docker push furkantoprak/inflation-ninja-backend`

### Deploy Container on AWS Lightsail
`https://lightsail.aws.amazon.com/ls/webapp/home/containers`

## Local Development
### Kill Container Locally
`docker container list` and `docker container kill <id>`"
672,yahya-maged/World-Inflation-SQL,,"# World-Inflation-SQL
Data cleaning and Exploration of the IMF(International Monetary Fund) inflation data using SQL. The dataset includes all the countries around the world and the inflation rate for each of them (From 2005 to 2022).
--
Important note : That is only the first part of this Project, The second part will be visualizing the data and sharing the key findings from it through Tableau.
"
673,juujulio/inflation-br-today,,"# inflation-br-today
The porpose of this project is to create an inflation history for queries
"
674,manasgithub005/Project-Inflation-Forecasting,Jupyter Notebook,
675,larsmoe/inflationsrechner_base_functions,JavaScript,"# `angular-seed` — the seed for AngularJS apps

This project is an application skeleton for a typical [AngularJS][angularjs] web app. You can use it
to quickly bootstrap your angular webapp projects and dev environment for these projects.

The seed contains a sample AngularJS application and is preconfigured to install the AngularJS
framework and a bunch of development and testing tools for instant web development gratification.

The seed app doesn't do much, just shows how to wire two controllers and views together.


## Getting Started

To get you started you can simply clone the `angular-seed` repository and install the dependencies:

### Prerequisites

You need git to clone the `angular-seed` repository. You can get git from [here][git].

We also use a number of Node.js tools to initialize and test `angular-seed`. You must have Node.js
and its package manager (npm) installed. You can get them from [here][node].

### Clone `angular-seed`

Clone the `angular-seed` repository using git:

```
git clone https://github.com/angular/angular-seed.git
cd angular-seed
```

If you just want to start a new project without the `angular-seed` commit history then you can do:

```
git clone --depth=1 https://github.com/angular/angular-seed.git <your-project-name>
```

The `depth=1` tells git to only pull down one commit worth of historical data.

### Install Dependencies

We have two kinds of dependencies in this project: tools and AngularJS framework code. The tools
help us manage and test the application.

* We get the tools we depend upon and the AngularJS code via `npm`, the [Node package manager][npm].
* In order to run the end-to-end tests, you will also need to have the
  [Java Development Kit (JDK)][jdk] installed on your machine. Check out the section on
  [end-to-end testing](#e2e-testing) for more info.

We have preconfigured `npm` to automatically copy the downloaded AngularJS files to `app/lib` so we
can simply do:

```
npm install
```

Behind the scenes this will also call `npm run copy-libs`, which copies the AngularJS files and
other front end dependencies. After that, you should find out that you have two new directories in
your project.

* `node_modules` - contains the npm packages for the tools we need
* `app/lib` - contains the AngularJS framework files and other front end dependencies

*Note copying the AngularJS files from `node_modules` to `app/lib` makes it easier to serve the
files by a web server.*

### Run the Application

We have preconfigured the project with a simple development web server. The simplest way to start
this server is:

```
npm start
```

Now browse to the app at [`localhost:8000/index.html`][local-app-url].


## Directory Layout

```
app/                  --> all of the source files for the application
  app.css               --> default stylesheet
  core/                 --> all app specific modules
    version/              --> version related components
      version.js                 --> version module declaration and basic ""version"" value service
      version_test.js            --> ""version"" value service tests
      version-directive.js       --> custom directive that returns the current app version
      version-directive_test.js  --> version directive tests
      interpolate-filter.js      --> custom interpolation filter
      interpolate-filter_test.js --> interpolate filter tests
  view1/                --> the view1 view template and logic
    view1.html            --> the partial template
    view1.js              --> the controller logic
    view1_test.js         --> tests of the controller
  view2/                --> the view2 view template and logic
    view2.html            --> the partial template
    view2.js              --> the controller logic
    view2_test.js         --> tests of the controller
  app.js                --> main application module
  index.html            --> app layout file (the main html template file of the app)
  index-async.html      --> just like index.html, but loads js files asynchronously
e2e-tests/            --> end-to-end tests
  protractor-conf.js    --> Protractor config file
  scenarios.js          --> end-to-end scenarios to be run by Protractor
karma.conf.js         --> config file for running unit tests with Karma
package.json          --> Node.js specific metadata, including development tools dependencies
package-lock.json     --> Npm specific metadata, including versions of installed development tools dependencies
```


## Testing

There are two kinds of tests in the `angular-seed` application: Unit tests and end-to-end tests.

### Running Unit Tests

The `angular-seed` app comes preconfigured with unit tests. These are written in [Jasmine][jasmine],
which we run with the [Karma][karma] test runner. We provide a Karma configuration file to run them.

* The configuration is found at `karma.conf.js`.
* The unit tests are found next to the code they are testing and have a `.spec.js` suffix (e.g.
  `view1.spec.js`).

The easiest way to run the unit tests is to use the supplied npm script:

```
npm test
```

This script will start the Karma test runner to execute the unit tests. Moreover, Karma will start
watching the source and test files for changes and then re-run the tests whenever any of them
changes.
This is the recommended strategy; if your unit tests are being run every time you save a file then
you receive instant feedback on any changes that break the expected code functionality.

You can also ask Karma to do a single run of the tests and then exit. This is useful if you want to
check that a particular version of the code is operating as expected. The project contains a
predefined script to do this:

```
npm run test-single-run
```


<a name=""e2e-testing""></a>
### Running End-to-End Tests

The `angular-seed` app comes with end-to-end tests, again written in [Jasmine][jasmine]. These tests
are run with the [Protractor][protractor] End-to-End test runner. It uses native events and has
special features for AngularJS applications.

* The configuration is found at `e2e-tests/protractor-conf.js`.
* The end-to-end tests are found in `e2e-tests/scenarios.js`.

Protractor simulates interaction with our web app and verifies that the application responds
correctly. Therefore, our web server needs to be serving up the application, so that Protractor can
interact with it.

**Before starting Protractor, open a separate terminal window and run:**

```
npm start
```

In addition, since Protractor is built upon WebDriver, we need to ensure that it is installed and
up-to-date. The `angular-seed` project is configured to do this automatically before running the
end-to-end tests, so you don't need to worry about it. If you want to manually update the WebDriver,
you can run:

```
npm run update-webdriver
```

Once you have ensured that the development web server hosting our application is up and running, you
can run the end-to-end tests using the supplied npm script:

```
npm run protractor
```

This script will execute the end-to-end tests against the application being hosted on the
development server.

**Note:**
Under the hood, Protractor uses the [Selenium Standalone Server][selenium], which in turn requires
the [Java Development Kit (JDK)][jdk] to be installed on your local machine. Check this by running
`java -version` from the command line.

If JDK is not already installed, you can download it [here][jdk-download].


## Updating AngularJS and other dependencies

Since the AngularJS framework library code and tools are acquired through package managers (e.g.
npm) you can use these tools to easily update the dependencies. Simply run the preconfigured script:

```
npm run update-deps
```

This will call `npm update` and `npm run copy-libs`, which in turn will find and install the latest
versions that match the version ranges specified in the `package.json` file.

If you want to update a dependency to a version newer than what the specificed range would permit,
you can change the version range in `package.json` and then run `npm run update-deps` as usual.


## Loading AngularJS Asynchronously

The `angular-seed` project supports loading the framework and application scripts asynchronously.
The special `index-async.html` is designed to support this style of loading. For it to work you must
inject a piece of AngularJS JavaScript into the HTML page. The project has a predefined script to help
do this:

```
npm run update-index-async
```

This will copy the contents of the `angular-loader.js` library file into the `index-async.html`
page. You can run this every time you update the version of AngularJS that you are using.


## Serving the Application Files

While AngularJS is client-side-only technology and it is possible to create AngularJS web apps that
do not require a backend server at all, we recommend serving the project files using a local
web server during development to avoid issues with security restrictions (sandbox) in browsers. The
sandbox implementation varies between browsers, but quite often prevents things like cookies, XHR,
etc to function properly when an HTML page is opened via the `file://` scheme instead of `http://`.

### Running the App during Development

The `angular-seed` project comes preconfigured with a local development web server. It is a Node.js
tool called [http-server][http-server]. You can start this web server with `npm start`, but you may
choose to install the tool globally:

```
sudo npm install -g http-server
```

Then you can start your own development web server to serve static files from any folder by running:

```
http-server -a localhost -p 8000
```

Alternatively, you can choose to configure your own web server, such as Apache or Nginx. Just
configure your server to serve the files under the `app/` directory.

### Running the App in Production

This really depends on how complex your app is and the overall infrastructure of your system, but
the general rule is that all you need in production are the files under the `app/` directory.
Everything else should be omitted.

AngularJS apps are really just a bunch of static HTML, CSS and JavaScript files that need to be
hosted somewhere they can be accessed by browsers.

If your AngularJS app is talking to the backend server via XHR or other means, you need to figure
out what is the best way to host the static files to comply with the same origin policy if
applicable. Usually this is done by hosting the files by the backend server or through
reverse-proxying the backend server(s) and web server(s).


## Continuous Integration

### Travis CI

[Travis CI][travis] is a continuous integration service, which can monitor GitHub for new commits to
your repository and execute scripts such as building the app or running tests. The `angular-seed`
project contains a Travis configuration file, `.travis.yml`, which will cause Travis to run your
tests when you push to GitHub.

You will need to enable the integration between Travis and GitHub. See the
[Travis website][travis-docs] for instructions on how to do this.


## Contact

For more information on AngularJS please check out [angularjs.org][angularjs].


[angularjs]: https://angularjs.org/
[git]: https://git-scm.com/
[http-server]: https://github.com/indexzero/http-server
[jasmine]: https://jasmine.github.io/
[jdk]: https://wikipedia.org/wiki/Java_Development_Kit
[jdk-download]: http://www.oracle.com/technetwork/java/javase/downloads
[karma]: https://karma-runner.github.io/
[local-app-url]: http://localhost:8000/index.html
[node]: https://nodejs.org/
[npm]: https://www.npmjs.org/
[protractor]: http://www.protractortest.org/
[selenium]: http://docs.seleniumhq.org/
[travis]: https://travis-ci.org/
[travis-docs]: https://docs.travis-ci.com/user/getting-started
"
676,nazriz/inflation_population_over_time,Python,
677,saleel/stable,TypeScript,"# Project Stable

Project Stable is a decentralized, on-chain, price-history and inflation dashboard.
It tracks price change of various daily-use products and commodities and allow users to 
see true inflation rates.

It also allow users to mint an anti-inflationary asset called `STABLE` token.

Demo: [https://inflation.netlify.app/](https://inflation.netlify.app/)

Subgraph: [https://thegraph.com/hosted-service/subgraph/saleel/stable-price-history](https://thegraph.com/hosted-service/subgraph/saleel/stable-price-history)

[Presentation Slides](https://docs.google.com/presentation/d/1mJleFKS5Iu1r3NbQ3BMaUVnFMGz821PPpLterQprfFA/)

[Presentation Video](https://youtu.be/gRjCPNxg-lM)


Status: Testing/POC phase

<br />


## Inspiration
Prices of daily-use products and services has been increasing drastically in the last couple of months. Many claims that govt. reported inflation numbers are not accurate.
The starting idea for this was inspired by [this tweet](https://twitter.com/balajis/status/1423330960481816582).


<br />

## What it does

- Track prices of daily-use products and services, in multiple countries, on the chain.
- Prices collected from users.
- Tracks Price Index (weighted average of all prices) - measure of true inflation.
- Products to track and weightage chosen by DAO.
- Project token Stabilizer `$SZR`  - used for governance and rewards.
- Allow users to mint an anti inflationary crypto-currency `$STABLE`, that is pegged to the Global Price Index, and is ""stable"" in terms of purchasing power.
<br />

## How it works
<img src=""https://raw.githubusercontent.com/saleel/stable/main/screenshots/architecture.png"" width=""800"" style=""margin-left:20px;margin-bottom:20px"" alt=""Architecture"" />

- `Stable` is the main smart contract deployed on Aurora blockchain. A gas efficient chain like Aurora is optimal for a public facing application like this.
- The product details are stored on IPFS and the hash/CID is stored in the contract.
 - `Stable` contract create child contracts called `CountryTracker` to track prices within a country.
- Users submit prices to the `CountryTracker` contract (which only emits an event).
- **Aggregators** watch for price submission event and aggregate all submissions made in a day, calculate aggregated price for each product and the Price Index, and submit them back to the contract. The rule (logic name) to be used for aggregation is set in the contract.
- Aggregators need to lockup `SZR` to get claims for aggregation rounds - the more they lock, more rounds they can get. DAO can slash their locked SZR if they don't do aggregations properly.
- The price submission events are indexed by a subgraph in the `TheGraph` protocol, which aggregators can use to query submission data.
- `CountryTracker` contract stores the latest prices of all products and the price index.
- The subgraph also index price and price index history - which powers the web app.
- Aggregators receive rewards in `SZR` (amount set by DAO) for completing each agg. round. Users with winning submissions are also rewarded at the same time. Rules to chose winners is also decided by the DAO.
- There is also a **Global Price Index** in `Stable` which is the weighted average of Price Index of each participating country. The weightage for each country is stored in `Stable` contract and is again, set by the DAO.
<br />

### StableToken
- StableToken (`STABLE`) is a token pegged to the Global Price Index.
- The peg is maintained using the `SZR` token. Users can exchange 1 USD worth of `SZR` for 1 USD worth of `STABLE`. This is similar to how Terra/Luna works.
- If a user mint 1000USD worth `STABLE` by exchanging 1000USD worth of `SZR`, and if the inflation increase by 10%, then they can burn their `STABLE` tokens and get 1100USD (10% extra) worth of `SZR`.
<br />

### Suppliers
<img src=""https://raw.githubusercontent.com/saleel/stable/main/screenshots/supplier.png"" width=""500"" style=""margin-left:20px;margin-bottom:20px;"" alt=""Suppliers"" />

- StableToken is backed by another entity in the ecosystem called by **Suppliers**
- Suppliers (super-market chains for example) stake their reputation, and  promise to redeem $STABLE in exchange of the goods in the product basket - and borrow equivalent $SZR. 
- Instead of paying an interest, they would pay/redeem the product basket even if the price increase in the future.
- Suppliers are approved and added to the contract by DAO. DAO also set a limit on the percentage of `SZR` they can withdraw with respect to the `STABLE` they promise to redeem. DAO can slow increase these limited based on the behavior of the supplier.
- Suppliers are added to the contract by DAO after verification. Suppliers will have to show their identity publicly in the proposal they create for adding them. If they don't redeem the `STABLES` they promised, it can lead to bad reputation on the brand.
- The incentive for the Supplier is they can borrow money without any interest, which they can use to run their business. Even when a user redeem their Stable token with the supplier, they make profits on the sales. In addition to that they get rewards in `SZR` for each redemption they do.
<br />

### Exchange
<img src=""https://raw.githubusercontent.com/saleel/stable/main/screenshots/exchange.png"" width=""500"" style=""margin-left:20px;margin-bottom:20px;"" alt=""Exchange"" />

- Users can only exchange `SZR` for `STABLE` if there are suppliers backing the `STABLE`. However, there is a `over-collateralization ratio` in the contract which can be set by the DAO to allow mining of more `STABLE` than that are in the contract.
- As the ecosystem grows, more `STABLE`  than that are backed can be minted because all users wont redeem them at once.
- Also, users can always choose to burn `STABLE` to mint `SZR` instead of redeeming with a supplier. This would increase the supply of `SZR` and reduces its value.
- When users exchange `SZR` for `STABLE`, `SZR` equivalent to over collateralization is burned, as this amount is seignorage. This will also make `SZR` a deflationary asset as the ecosystem grows.
<br />

## Tech stack
- Contract deployed on Aurora - [`0xaFB36003d119b3976D915D74887F9568ca635854`](https://aurorascan.dev/address/0xaFB36003d119b3976D915D74887F9568ca635854) (deployed to mainnet as TheGraph has trouble indexing testnet).
- TheGraph for indexing - to track price submission, price and price index history, etc.
- IPFS for storing product meta - CID stored in contract.
- React for the UI.
<br />


## Repo structure

Entire code for this project is in this repo

- `/core` : Contains code for smart-contract, hardhat setup, and some scripts for transferring SZR, creating suppliers, generating sample data, etc.
- `/subgraph` : Contains the subgraph definition and mappers that index price submissions, price and price index, etc.
- `/aggregator` : Contains script for becoming an aggregator - lockup SZR and run aggregations.
- `/ui` : React project web-app that renders the UI by connecting to subgraph and the contract.
<br />


## Things that can be done
- Suppliers backing STABLE token is only one model. **DAO can have a smart contract where users can lock BTC, ETH as collateral and borrow STABLE (i.e equivalent SZR).**
- Instead of paying interest, they would be paying the inflation rate as excess when they return.
- The contract can also act as an Oracle feed for the Defi apps. And also can bridge the tokens to other chains.

<br />

## TODOs:
- Allow users to view inflation based on their choice of products and weightage.
- Improve overall quality - fix bugs, test for security/errors.
- Implement the DAO functionality - proposal and voting features. Currently the `owner` of the contract is one address, but the ownership can be transferred to the DAO. 
- The contract to derive the price of SZR from an oracle. It is currently simulated (based on supply) in the contract as the token is not traded on any exchange.
- `subgraph` to also index the price submissions made through IPFS.
- Implement a better logic to select one/few winners from price submissions. Currently all submissions which equal aggregated price is decided as winner.
- A lot of these would depend on the direction of this project.

<br />


## Testing
Please contact me if you would like to test the app. I can transfer `SZR` tokens and also add you as a supplier if you would like to.

<br />


### Contracts

Deployed to Aurora mainnet during POC/testing phase, as TheGraph has trouble indexing testnet

Contract on Aurora: [0xaFB36003d119b3976D915D74887F9568ca635854](https://aurorascan.dev/address/0xaFB36003d119b3976D915D74887F9568ca635854)

SZR Token: [0x2f6ee7ee17647ed9cd0e449d893b5f2a285ef316](https://aurorascan.dev/token/0x2f6ee7ee17647ed9cd0e449d893b5f2a285ef316)

STABLE Token: [0x264cA4C59e24Dc7424CDf75f57ac14B2cc2eF3F3](https://aurorascan.dev/token/0x264cA4C59e24Dc7424CDf75f57ac14B2cc2eF3F3)

<br />


*Icons and logo from [icons8](https://icons8.com)*
"
678,theshubhagrwl/ValueMyMoney,JavaScript,"# Value My Money
### This tool helps you to see how much the value of money has changed due to inflation 
This tool uses inflation data set from <a href=""https://www.macrotrends.net/""> Macrotrends </a> and calculated the results compoundly. 

[![Reddit](https://img.shields.io/reddit/user-karma/combined/theshubhagrwl?style=social)](https://www.reddit.com/user/theshubhagrwl)
[![Github](https://img.shields.io/github/followers/theshubhagrwl?style=social)](https://github.com/theshubhagrwl)
[![Twitter](https://img.shields.io/twitter/follow/theshubhagrwl?label=Follow)](https://twitter.com/theshubhagrwl)

<hr>
<img src=""./demo/valuemymoney.gif"">

## Use the tool
### <a href=""https://valuemymoney.herokuapp.com/""> ValueMyMoney </a>

## What I have used?
- Django 
- Heroku
- Pandas
- Dataset from <a href=""https://www.macrotrends.net/""> Macrotrends </a>
- Materialize CSS
- Chart JS

## Do tell me what you think about this tool😉
"
679,danec/adjusted_for_inflation,Python,"# adjusted_for_inflation
Adjusts old currency numbers for inflation using the API at https://www.statbureau.org/en/inflation-api
"
680,digdig514/ExerciceLayoutInflation,Java,
681,FUlyankin/Russia_inflation_map,Jupyter Notebook,"# Russia_inflation_map

Прорисовка инфляционной карты России.  

* [Блокнот](http://nbviewer.jupyter.org/github/Fulyankin/Russia_inflation_map/blob/master/Main_Map_prepare!.ipynb
), в котором мы рисуем карту в R. Впоследствии код для прорисовки карты мы оформляем как функцию в файле [хэлпере](https://github.com/FUlyankin/Russia_inflation_map/blob/master/russia_price_map/helpers.R).
* Сама по себе визуализация делается в трёх файлах. В вышецпомянутом хэлппере, в [server.R](https://github.com/FUlyankin/Russia_inflation_map/blob/master/russia_price_map/server.R) прописаны вычисления и в [ui.R](https://github.com/FUlyankin/Russia_inflation_map/blob/master/russia_price_map/ui.R) прописан интерфейс. 
* [Документация по R-Shiny](https://shiny.rstudio.com/tutorial/lesson1/)
* О том как можно улучшить это велосипедное творение, пишите на filfonul@gmail.com 


"
682,ander265/box-office-inflation,,"# Box Office Inflation
Updated Box Office Mojo scrapper for inflated box office grosses. 
"
683,terminal-labs/inflation_vmware-cluster,SaltStack,"## License

MIT (See LICENSE file).
"
684,sekerez/Argetina_Inflation_Graph,Python,"# Argetina_Inflation_Graph

The goal of the project is to show Argentina's increasingly volatile and severe inflation patters.

This project consists of webscraping, data analysis, and visualization. The scraper collects monthly inflation data from Argentina's Central Bank's official website. Next, the program analyzes the data by identifying the years of highest inflation according to the Sum of Square Residuals. Lastly, it graphs the average of Argentina's tamer years of inflation and the two most extreme years of inflation.
"
685,aldo18001/Inflation-Forecast-w-LSTM,,
686,ghiles10/Econometrics-Inflation-R,R,"# Econometrics-Inflation-R
As part of the econometrics course, I was interested in inflation in OECD countries. I used the R software and the databases of the OECD and INSEE. I realized a project going from data cleaning to linear regression and tests based on the normality of residuals. 
Indeed, I was interested in the Phillips curve, and in being able to explain the determinants of inflation from macroeconomic variables. 
"
687,Yashshah0223/Inflation-rate-forecast,R,"# Inflation-rate-forecast
This project is for forecasting the inflation rate of United States of America using the past values that we have gathered by using R.
What I'm currently working on - Business Forecasting 
- Currently i am working on forecasting inflation rate of USA by determining the past trends and using the past values to forecast the following year's inflation rate. Inflation rate affects various part of our daily lives, it affects everyone from a small business owner to a huge conglomerate. By forecasting the inflation rate, economists and policy makers whose job is to aid take decisions as to promote stable prices need accurate forecasts in order to monitor inflation and make necessary corrections when needed.
- A Bit about the Dataset and the output of the project we are looking for :
- The dataset has two columns, namely year's and inflation rate for the country for that year. 
- The dataset is in yearly manner. The data spans from 1960 to 2020, a total of 61 years.    
- This forecast's outcome will be a point specific outcome as we need inflation rate which is given in point form and not range. 
- To measure how accurate our forecast model are we will use RMSE for this topic, RMSE if 0 states that the forecasting performance is perfect and anything higher says the difference between forecasted value and realised value.
- The data that we will be using to forecast is referred from the data collected and curated by The World Bank organization. One can easily find the data at https://data.worldbank.org/indicator/FP.CPI.TOTL.ZG NOTE - We will be using only United States of America as the country. 
- Collaborators on this project - github.com/anushkau and github.com/aditya4274
"
688,sobcza11/The-US-Inflation-Phenomenon,Jupyter Notebook,"![alt text](https://github.com/sobcza11/Understanding-the-US-Inflation-Phenomenon/blob/main/_other/READ_ME_Back.jpg)
# OVERVIEW
**The United States Consumer Price Index** ( “**Inflation**” ) is calculated by the U.S. Bureau of Labor Statistics. It has gone through various periods of prominent increases; notably in the 1920’s, 1940’s, & 1970’s. Otherwise, it has remained relatively constant or declining. 

**Inflation is important in all facets of life but the financial world pays special attention to it.** The key objectives of the Federal Reserve are maximizing employment, stabilizing prices & moderating long-term interest rates; the second of which is Inflation & the third of which is generally decided by the condition of the other two ( 2 ), usually Inflation. Their decisions can move financial markets around the world.

In short, **Inflation is an important component of developing investment strategies for portfolios across the world. The view on inflation becoming positive or negative is not agreed upon nor are the variables which influence it.**


# DESCRIPTION
**The purpose of this Data Science project is to develop a model to explain & understand the phenomenon of Inflation. I shortlisted nineteen ( 19 ) variables to determine their influence on Inflation since 1991.**

# CONTENTS
In the enclosed you will find:

  * **data**
      * This is where the data is stored
  * **notebooks**
      * This is where the source code is stored
  * **reports**
      * A Presentation & Report is stored here summarizing the findings
        * <i>As the name suggests, the Presentation was prepared as a presentation; thus, I suggest that it is downloaded & viewed as a PDF, not on GitHub</i>
"
689,AAVP/nn_chile_inflation,Jupyter Notebook,"# Neural Networks approach: How well performs a Long Short-Term Memory (LSTM) model to predict inflation in Chile?

In this repository I show the performance of LSTM neurons for predicting the CPI inflation in Chile for annualized monthly data. I make use of the Diebold-Mariano test in order to measure the effectiveness of the RNN models, and I considered the Central Bank of Chile Economic Expectation Surveys as the opposite model. Univariate RNN models are not sufficient to outperform the Economic Expectation Surveys forecast accuracy for 1-month and 1-year horizons. However, Multivariate RNN models (that is to say, considering some of the main macroeconomic variables of Chile) statistically demonstrates they are as good as Economic Expectation Surveys forecasts.

All the data were extracted directly from the Central Bank of Chile Databases, and it all comprises from 1921m1 to 2021m6 for the univariate models, and from 1996m1 to 2021m5 for the multivariate models.

## Repository Structure

The repository is structured as follows:

- ```univariate_models```: contains the univariate RNN models.
  - ```rnn_selection_1_month_ahead.ipynb```: contains the selection of the hyper-parameters of the neural network that minimizes the Mean Squared Error for the 1-month horizon.
  - ```rnn_selection_11_months_ahead.ipynb```: contains the selection of the hyper-parameters of the neural network that minimizes the Mean Squared Error for the 1-year horizon.
  - ```hyper_parameters_optimization.ipynb```: stores the hyper-parameters of 960 models, with their respective Mean Squared Error for the 1-month horizon.
  - ```hyper_parameter_optimization_11_months.ipynb```: stores the hyper-parameters of 960 models, with their respective Mean Squared Error for the 1-year horizon.
  - ```lstm_vs_eee_11_months.ipynb```: performs the in-sample forecasting of the best model found in ```rnn_selection_11_months_ahead.ipynb``` in order to compare it with the Economic Expectation Surveys.
- ```multivariate_models```:
  - ```mv_rnn_selection_11_months_ahead.ipynb```: contains the selection of the hyper-parameters of the neural network that minimizes the Mean Squared Error for the 1-year horizon.
  - ```mv_hp_opt_11_months```: stores the hyper-parameters of 960 models, with their respective Mean Squared Error for the 1-year horizon.
  - ```mv_lstm_vs_eee_11_months.ipynb```: performs the in-sample forecasting of the best model found in ```mv_rnn_selection_11_months_ahead.ipynb``` in order to compare it with the Economic Expectation Surveys.
- ```requirements.txt```: is the executable file which contains the required ```python``` libraries in order to execute the notebooks.
"
690,p-gw/ZeroInflation.jl,Julia,"# ZeroInflation.jl

[![Stable](https://img.shields.io/badge/docs-stable-blue.svg)](https://p-gw.github.io/ZeroInflation.jl/stable)
[![Dev](https://img.shields.io/badge/docs-dev-blue.svg)](https://p-gw.github.io/ZeroInflation.jl/dev)
[![Build Status](https://github.com/p-gw/ZeroInflation.jl/actions/workflows/CI.yml/badge.svg?branch=main)](https://github.com/p-gw/ZeroInflation.jl/actions/workflows/CI.yml?query=branch%3Amain)
[![Coverage](https://codecov.io/gh/p-gw/ZeroInflation.jl/branch/main/graph/badge.svg)](https://codecov.io/gh/p-gw/ZeroInflation.jl)

This package provides simple utilities for constructing zero-inflated distributions.
It is mainly intended to for fitting zero-inflated and hurdle models using `Turing.jl`.

## Basic usage
`ZeroInflation.jl` exports a single function (`zeroinflated`) that can be used to construct arbitrary zero-inflated distributions. For example to construct a zero-inflated Poisson distribution with parameter `λ = 1.0` and mixing probability `θ = 0.2`, call

```
zeroinflated(Poisson(1.0), 0.2)
```

Sometimes it can be useful (e.g. in regression modelling) to express the mixing distribution not in terms of raw probabilities, but on the `logit` scale. In this case the distribution with parameter `λ = 1.0` and mixing probability `θ = logistic(0.0)` can be constructed by

```
zeroinflated(Poisson(1.0), StatsFuns.logistic(0.0))
```

or by directly providing a logit parameterized Bernoulli distribution,

```
zeroinflated(Poisson(1.0), Turing.BernoulliLogit(0.0))
```
.
"
691,BlackteaGit/StopGreyGooInflation,C#,
692,8W9aG/inflation-parsing-node,C++,"# parsing-node

A node in the inflation blockchain used for parsing and verifying transactions.

## Dependencies :globe_with_meridians:

* [boost](https://www.boost.org/)
* [cpp-httplib](https://github.com/yhirose/cpp-httplib)
* [json](https://github.com/nlohmann/json)
* [uriparser](https://github.com/uriparser/uriparser)
* [cpp-base64](https://github.com/ReneNyffenegger/cpp-base64.git)
* [tidy](https://www.html-tidy.org/developer/)
* [libxml2](http://www.xmlsoft.org/)
* [libsxg](https://github.com/google/libsxg/)
* [fastText](https://fasttext.cc/)
* [IP2Location](https://github.com/chrislim2888/IP2Location-C-Library)
"
693,prosmx/personal-inflation-rate-calculator,Python,"# personal-inflation-rate-calculator
This Python project is a personal inflation rate calculator

Does it appear that food, gas, and colthing cost more this year when compared to last year?

Many people are paying more for day-to-day expenses, but do you know your exact inflation rate?

This Python program will display your own personal inflation rate.

Just enter expenses for the most recent month for this year.
Then enter the same expenses from one year ago.

Finally, the program will display your total expenses for this year compared to last year.
Displayong your personal inflation rate.
"
694,toribasso/Inflation_and_Wages_Website,HTML,
695,amer-islamovic/Stock_v_Inflation,Python,"# Stock_v_Inflation
A tool for comparing a stocks performance versus inflation (USD)!

![This is an image](/Figure_2.png)

## Project Description
This tool compares any amount of stock tickers entered by user, and shows performance adjusted for inflation!

## How to use

1. Clone the repository through a program like git bash, or directly from the code dropdown in github!
2. Install the requirements by typing the following command in your code editor: pip install -r requirements.txt
3. Obtain a free API key from https://www.alphavantage.co/
4. Change aplha_key value to your API key.
5. Run the code and enter any stock tickers.
6. Enjoy the results!

## Features
- Use an API to pull in data - Lines 59 and 93 
- Use built-in pandas or numpy functions to do things like remove 0’s and null values where they don’t belong - Lines 135 and 162 
- Do 5 basic calculations with Pandas, like finding the sum(), median(), mean(), or mode() of a column. You could divide two columns by each other. You could multiple a column by a random integer. You could use string operations and find the most common letter in a given entry. - 130, 140 and 167 
- Make 2 basic plots with matplotlib, seaborn, or any other kind of visualization library that you think looks interesting. - Line 194 
- Write markdown cells in Jupyter explaining your thought process and code. If you make a few plots with matplotlib, explain what the reader is seeing and why you chose to plot things that way. - Notes every few lines through the project.
"
696,bedirhanasn/Forecasting-Turkiye-Inflation-Rate,Python,
697,wi-ll-ow/UE-R-Inflationmod,JavaScript,
698,phatjkk/world_inflation_data,,
699,edgardoa91/inflation_analysis_1,Python,"# Data Analysis

This project is hosted on Google Cloud Run give it a few minutes after clicking the link. Thank You.
-> [Live Demo](https://inflation-analysis-1-xy7pd5y6iq-uc.a.run.app)

# Run Streamlit app

### Poetry
Start streamlit app open in browser
on localhost:8501

```
poetry shell
poetry install
poetry run streamlit src/app.py
```

### Docker
```
docker build -t yourtag .
docker run -d yourtag 
```

# Rising Inflation Analysis Data

Due to rising inflation in my hometown of Puerto Rico I am going to analyze the inflation of the US. 
I will also take into account the SP500 index and how it corralates with the inflation and rising rent in the US.


I will be using the data from the [Federal Reserve Bank of St. Louis](https://fred.stlouisfed.org/). 
#### The different data sources are:
    - Consumer Price Index (CPI) for Urban Citizens: Less Food & Energy US City Average
    - Rent of Primary Residence in US City Average
    - Oil Price
    - US Food
    - Global Food
    - Average Salary
    - Hourly Salary
    - SP500


### Questions to answer:
1. Does the CPI and rising rent influence the SP500?
2. How does the Food and Energy prices in the US compare to the rest of the world?
3. Can inflated home prices cause a decline in the SP500?
4. Are wages for the average american enough to rent in this market?

### Hypothesis:
1. The inflation rate in the US is higher than the inflation rate in the US in the year 2020.
2. The US is the #1 country int the world for that reason food and energy is more expensive.
3. As in 2008 I believe inflated house prices can cause a bear market.
4. Just by lookign in my neighborhood you need roomates if ou have an average salary in the US.

"
700,techmexdev/Nasa-Spending,HTML," #Nasa's Budget 
"
701,Tining123/DemonMarket,Java,"# DemonMarket - No More Mounting Inflation [中文Wiki](https://github.com/Tining123/DemonMarket/blob/main/README_cn.md)
![logo](https://raw.githubusercontent.com/Tining123/DemonMarket/master/src/main/img/logo.png)

#### A market plugin to prevent mounting inflation in minecraft servers. The optimized power index function and the inverse function are used to converge the selling price. It could solve the problem of server economic imbalance caused by the high production capacity of certain items in industrial type servers. In Summary, The richer the player is, the less profit the player receive.
By using a convergence function based on the player's assets, items sold by the player will gradually depreciate. Items depreciate rapidly after reaching the specified baseline, and gradually decrease towards 0 but never reach 0. Using this method, players can begin to adapt to price convergence at the beginning of the entry and effectively curb the further expansion of server oligarch players' assets.

#### To prevent player from trading money by others plugin, DemonMarket will disable every command except /mt pay.
#### You could turn this off in config.yml.

![GUI操作](https://raw.githubusercontent.com/Tining123/DemonMarket/master/src/main/img/gui_thumb2.gif)

## Usage
#### Players could use /demonmarket or /mt
+ /mt gui - Open the acquire box
+ /mt list - Show the acquire list
+ /mt sell - Sell items in your hand
+ /mt sell all - Sell items in your hand and the same things in your inventory
+ /mt pay - Pay someone money
+ /mt price - Check the price
+ /mt help - Check helps

Also ：dm, dmt, demonmarket

#### Admins could use /demonmarketadmin or /mtadmin
+ /mtadmin set [price] - Set price for the item
+ /mtadmin nbtset [price] - Set price for the nbt item
+ /mtadmin name - Check name info
+ /mtadmin nbt - Check nbt info
+ /mtadmin reload - Reload plugin

Also ：dmadmin, dmtadmin, demonmarketadmin

## Example
Set diamond block with $440.

![800资产效果](https://raw.githubusercontent.com/Tining123/DemonMarket/master/src/main/img/800_en.png)
- You could receive $432 if you have only $800

![60w资产效果](https://raw.githubusercontent.com/Tining123/DemonMarket/master/src/main/img/60w_en.png)
- You could receive $217 if you have $600000

![5000w资产效果](https://raw.githubusercontent.com/Tining123/DemonMarket/master/src/main/img/5000w_en.png)
- You could receive $0.69 and even sold 64 diamond blocks if you have $50000000


## Permission
+ demonmarket.use - Player need this permission node to use demonmarket
+ If you are using Groupmanager, try /mangaddp builder demonmarket.use or /mangaddp default demonmarket.use
+ If you are using luckperm, try /lp editor
## config.yml
+ lang: Set language manually.
+ TaxRate: Tax rate.
+ OP: The tax beneficiary. If you don't want to use it, just leave it blank.
+ BasicProperty: The average balance of single player in mathematical expectation.
+ Round: Enable and make the numbers approximate(shorter and easier to read)
+ Fitler: For SlimeFun Plugin. Enable this option to block any items with lore being sold. Attention, this might cause the NBT support disable
+ disable-pay: Enable this option to prevent user from paying others by using ess or others plugin.
+ disable-pay-list: Set the paying command you want to block.
+ disable-sell: Enable this option to prevent user from selling others by using ess or others plugin.
+ disable-sell-list: Set the selling command you want to block.
+ may-pay: Max amount of money can be transfer in a transaction.Set -1 to disable limitation, set 0 to disable pay command.
+ pay-unit: Transfer unit. All transfer amount will be split as pay-unit to transfer. The tax will be calculated times.
+ payer-tax: whether the payer pays the transfer tax (the tax payed by the receiver in default)
+ auto-refresh: Enable to auto refresh the price in gui
+ auto-refresh-gap: Refresh interval (second per time)
## Mathematical Theory
+ TAX=（1 - TaxRate）

![实际最终公式](https://raw.githubusercontent.com/Tining123/DemonMarket/master/src/main/img/theory.png)


### Set the price of diamond block is $440
+ When the BasicProperty was set to 5000, the profit goes with players deposit like follow

![5000基线](https://raw.githubusercontent.com/Tining123/DemonMarket/master/src/main/img/5kbasic.png)
+ When the BasicProperty was set to 500000, the profit goes with players deposit like follow

![50w基线](https://raw.githubusercontent.com/Tining123/DemonMarket/master/src/main/img/50wbasic.png)

### You can also draw some charts like these by using my another tool, the [DemonCalculator](https://github.com/Tining123/DemonCalculator), so that you could decide the basic property setting.

## Developing
+ Acquire list [✓]
+ GUI support [✓]
+ NBT Support [✓]
+ Use command to set price [✓]
+ Check item name with command [✓]
## About
+ MIT lisence
+ If you have any suggestion, complain or recommend function, don't be hesitated and contact me via GitHub or spigot.
## Contact
- Github: https://github.com/Tining123/DemonMarket
- Email: tingave201@outlook.com
"
702,marckrivitzky/US-Inflation-Rate,JavaScript,"# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
"
703,abhishekmishra/india-inflation-analysis,Jupyter Notebook,"# india-inflation-analysis
An analysis of Consumer Price Inflation In India and comparision of NIFTY returns (as a proxy for returns from investment in stocks)
"
704,ONSvisual/Inflation-and-pay,CSS,
705,terminal-labs/inflation_complex-cluster,SaltStack,"## License

MIT (See LICENSE file).
"
706,yadolph/dj-templates-inflation,Python,"Построение таблицы
=======

Вам необходимо оценить динамику инфляции в РФ и подготовить сравнительную таблицу. У вас есть данные по инфляции в csv-файле, необходимо реализовать приложение, которое выводит размер инфляции по годам и месяцам в процентах и отображает общую инфляцию за год.

Вам необходимо реализовать чтение csv-файла `inflation_russia.csv` во view `inflation_view` в файле `apps/views.py` и вывести данные из этого файла в таблице.

Построение шаблона реализуйте в файле `app/templates/inflation.html`.

Таблица должна состоять из столбцов: ""Год"", перечисление месяцев, ""Всего"". Суммарно 14 столбцов.

Таблица с суммарной величиной должна быть закрашена в серый цвет.

Если инфляция за месяц была отрицательной (дефляция), то ячейка должна быть закрашена в зеленый. Если значение инфляции превысило 1%, то в красный. Должна быть реализована визуальная градация красного: от 1% до 2%, от 2% до 5%, от 5% и более (3 оттенка красного, визуально они должны быть различимы).

Если данных за месяц нет, то нужно выводить прочерк.

## Примеры таблицы:

#### Пример 1
![Пример 1](./example1.png)

#### Пример 2
![Пример 2](./example2.png)

## Советы

- как работать с csv в Python: https://docs.python.org/3.6/library/csv.html


## Документация по проекту

Для запуска проекта необходимо:

Установить зависимости:

```bash
pip install -r requirements.txt
```

Выполнить команду:

```bash
python manage.py runserver
```
"
707,LiliyaVerchenko/Django3_inflation,Python,"# Построение таблицы

Вам необходимо оценить динамику инфляции в РФ и подготовить сравнительную таблицу. У вас есть данные по инфляции в csv-файле, необходимо реализовать приложение, которое выводит размер инфляции по годам и месяцам в процентах и отображает общую инфляцию за год.

Вам необходимо реализовать чтение csv-файла `inflation_russia.csv` во view `inflation_view` в файле `apps/views.py` и вывести данные из этого файла в таблице.

Построение шаблона реализуйте в файле `app/templates/inflation.html`.

Таблица должна состоять из столбцов: ""Год"", перечисление месяцев, ""Всего"". Суммарно 14 столбцов.

Таблица с суммарной величиной должна быть закрашена в серый цвет.

Если инфляция за месяц была отрицательной (дефляция), то ячейка должна быть закрашена в зеленый. Если значение инфляции превысило 1%, то в красный. Должна быть реализована визуальная градация красного: от 1% до 2%, от 2% до 5%, от 5% и более (3 оттенка красного, визуально они должны быть различимы).

Если данных за месяц нет, то нужно выводить прочерк.

## Пример таблицы:

![Пример](./example.png)

## Советы

- как работать с csv в Python: https://docs.python.org/3.6/library/csv.html

## Документация по проекту

Для запуска проекта необходимо:

Установить зависимости:

```bash
pip install -r requirements.txt
```

Выполнить команду:

```bash
python manage.py runserver
```
"
708,mickeythemouse/Inflation-vs-unemployment,Jupyter Notebook,
709,waspyfaeleith/salary_inflation_calculator,Python,
710,FilipKnj/Inflation-Calculator-App-,CSS,
711,calvenjs/Inflation-Forecasting-with-LSTM,Jupyter Notebook,"# Inflation-Forecasting-with-LSTM
## Problem Statement and Description.
The recent release of consumer inflation data showed prices rose at the fastest pace since 1982. Inflation forecasting is key in the conduct of monetary policy and can be used in many other ways such as preserving asset values.

This repository contains jupyter notebook involving data visualization and time-series forecasting on inflation using ARIMA model and multivariate LSTM.

## Data Source
Data Source are retrieved from FRED, Federal Reserve Bank of St. Louis, and can be found in summary here: https://www.kaggle.com/calven22/usa-key-macroeconomic-indicators
"
712,ONSSamBennett/inflation-calculator-v2,JavaScript,"# inflation-calculator-v2
 Version 2 of the ONS inflation calculator
"
713,KameshNanduri26/Inflation-Rates-Dash-App,Jupyter Notebook,"# Inflation-Rates-Project
This project shows the **inflation rates** from the years **1980 to 2022** of different **Countries, Economic Trade Unions, and the World Inflation** when given the respective appropriate input the the dropdown box.

# Details about the files
This project is created using **Dash App** which uses **Plotly Visualizations**.<br>

The original data is named as **inflation.xls**. To make it useful for our project I have preprocessed that data in **preprocessing.ipynb** file and saved the cleaned data as **modified_data.csv**.<br>

Then I had built a Dash app in **app.py**.

# To run the file
1. Clone the repository into your local machine.
2. Go to the project directory in the command line interface. Then run the following command:
* **python app.py**
3. Give the input from the dropdown box.

# App Interface
I have attached some **.png** files which shows the app interface and the visualization.
"
714,shuiruge/functions-for-cosmological-inflation,,"functions-for-cosmological-inflation
====================================

Some functions, written in Mathematica, that are useful for cosmological inflation models are collected at here.
"
715,LaurieScheepers/sa-inflation-calculator,Java,"# SA-Inflation-Calculator

A simple app that calculates the current value adjusted by inflation.

Users enter a start date, end date and an amount and then the app will calculate the current value of the amount based on the start date
"
716,thunderrabbit/Stack-Overflow-layout-inflation,Java,"This code is basically useless.  I made a merge mistake, so the source is probably fracked up.  It was for this SO question:

http://stackoverflow.com/questions/6338456/sequentially-including-various-view-classes-in-a-parent-layout
"
717,darrencarlin/Personal-Inflation-Calculator,JavaScript,"# Personal-Inflation-Calculator
Work Project
"
718,terminal-labs/inflation_wolfram-cluster,Python,"## License

MIT (See LICENSE file).
"
719,Abdelrahmanamhawy/Contaigus-inflation-rate,C++,
720,shubhamgupta568/Variance-Inflation-Factor,Jupyter Notebook,
721,Leschonander/latam-inflation-scraper,Python,"# latam-inflation-scraper
A scraper to grab some statistics regarding inflation from several Latin American central banks

If the various websites update some of the selenium code likely will need to be updates as it depends on going into the website
and clicking certain buttons, as many Latin American central banks lack good api's for things. 
"
722,golabkowy/inflation-monitor-client,TypeScript,"# InflationMonitorClient

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 10.0.8.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `--prod` flag for a production build.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).
"
723,meryjoy99/Correlators-From-Inflation,Jupyter Notebook,"# Correlators-From-Inflation
Summer 2020 Project
"
724,Maura-Santos/final_product_inflation_rate,,"# Business question
## What is the impact of the inflation rate on the sales price performance of a product?

# Databases
##### https://www.pordata.pt/Portugal/Taxa+de+Infla%c3%a7%c3%a3o+(Taxa+de+Varia%c3%a7%c3%a3o+do+%c3%8dndice+de+Pre%c3%a7os+no+Consumidor)+total+e+por+consumo+individual+por+objectivo-2315-181657

##### https://www.global-rates.com/pt/estatisticas-economicas/inflacao/indice-de-precos-ao-consumidor/ipc/portugal.aspx

##### https://www.ine.pt/xportal/xmain?xpid=INE&xpgid=ine_indicadores&indOcorrCod=0002390&contexto=bd&selTab=tab2

# Step by Step

##### * Recolher os dados da inflação no sector alimentar;
##### * Recolher os dados da ficha tecnica;
##### * criar uma tabela com os dados da ficha tecnica de um prato:
#####     1. materias-primas;
#####     2. preço Matéria-prima; unidade
##### analisar os dados:
#####     3. Verificar se os preços estão calculados para a porção de matéria-prima
"
725,iannjari/cbk-inflation-prediction,Jupyter Notebook,"# cbk-inflation-prediction
Predicting Kenya's inflation Rate using CBK inter-bank rates, CBR rates, Foreign Trade cashflows and Mobile Money Payments
"
726,ValeriaNavarro26/inflation_report_R,HTML,"# inflation_report_R
he economy is in the process of recovering after the drastic fall in economic activity in 2020 and at the same time an acceleration of inflation has been observed. This report analyses this issue as well as the main factors that are explaning this acceleration of inflation. 
"
727,KhyatiPiprotar/R-Studio-Inflation-Project,HTML,
728,fscheler/Inflation_Outlook_US,HTML,
729,hvlabat/nhs_income_vs_inflation,R,"# NHS Doctor Income vs Inflation Project
#### By Hugo Labat

## Description
This is my marked project for the Data Analysis and Visualisation module (PSY6422) of my MSc Cognitive Neuroscience and Human Neuroimaging Intercalation at the University of Sheffield. This project's purpose is to compare inflation to the income of National Health Service (NHS) doctors in various stages of training.

The data used in this project comes from two sources:
- The NHS
- The Office for National Statistics (ONS)

The NHS data is from their Staff Earnings Estimates, which includes information
on many aspects of staff pay over many staff roles. The data extracted from this
is the Mean Basic Salary per Full Time Equivalent (FTE), which is one of the
best measures of 'typical' income. The data extracted is monthly salaries.
The groups focused on in this study are:

- Consultants (represents the 'end' of official training)
- Specialist Registrars (First official specialist role; becoming an expert)
- Core Trainees (First step into specialising, a sort of pre-specialising)
- Foundation Doctors Year 2 (Second year of Foundation)
- Foundation Doctors Year 1 (First job after medical school)

These groups were selected since they represent the entirety of the official
training pathways for doctors in the NHS.


The ONS data is from the Consuer Price Index including the costs of hosing (CPIH)
This was chosen since costs of living also include costs of housing, and this
offers a more accurate display of the impact of inflation on income.


## Contents
This project was coded using R. This project contains the following files and folders, listed as seen:

**"".gitignore""** - Specifies untracked files that Git should ignore and those it should focus on.

**"".Rhistory""** - Contains a history of the commands entered, generally unimportant.

**"".Rprofile""** - USed to  set options and environment variables, set-up by renv to maintain version control

**""data""** - Contains the **""raw""**"" data used in this project, the source of which is outlined above. The **""refined""**"" data folder contains the processed data from this project, described below, and a **""codebook.txt""** describing the nature of the each data vector.

**""docs""** - Contains the scripts used to test the code used in the **""index.Rmd""** file. The file **""007_shiny_script.R""** is the test-code for the main visualisation of this project. However, the main visualisation itself is found in the index file, outlined beflow.

**""index.Rmd""** - The R Markdown file intended to be marked for the assessment of this module. *This contains the main visualisation of the project.*

**""nhs_income_vs_inflation.Rproj""** - The R Project file of this project. Must be run if the scripts in **""docs""** are to work correctly.

**""README.md"" / ""README.html""** - This file, in different formats.

**""renv""** - A package-management system, used to ensure the isolation, portability, and reproducibility of this project. This is the R Studio updated version of packrat.

**""renv.lock""** - Contains data on the packages stored in renv. Open this in rstudio to view the packages.

**""rsconnect""** - Created by rsconnect to host the shinyapp.io website


## Instructions
If you would like to run the scripts, **please first run the R Project file titled ""nhs_income_vs_inflation.Rproj""**

The scripts should ideally be run sequentially, in order of their numbers (i.e., ""001_pdf_salary_extraction_script.R"" before ""002_csv_salary_extraction_script.R""). However, scripts 4 and 7 are designed to be able to run together (in that order) without issue.

The R Shiny script is an interactive app that allows the user to adjust the date with a slider. It enables a more intuitive and hands-on relationship with the data, and the accompanying bar chart gives an idea of the changes occurring per-month.

## Queries
If you have any queries, please direct them to hugolabat@doctors.org.uk

Thanking you kindly.


~
"
730,RM503/PBH_from_USR_inflation,Jupyter Notebook,"# Inflation_Mukhanov_Sasaki_solver

Code for solving inflaton background dynamics for the computation of the mode evolution in inflationary models. The differential equations (both background and perturbation) are solved using a fourth-order Runge-Kutta (RK4) method.
"
731,numerical-perspective/inflation-on-pension,JavaScript,"# inflation-on-pension

To calculate inflation on pension, copy the text from the file (either file, choose language that you want), and paste it in a browser console.

To open up a browser console press `F12`.

After you copied the text there press `ctrl` + `enter`. That should run the function and give you back all required information.

To change the parameters of the function follow the following guidelines:

`pension(starting_salary, working_experience, salary_increase_per_year, inflation_rate)`

## Example

pension(5000, 40, 0.01, 0.02);

- 5000 refers to the base salary (salary that you earn per month)
- 40 refers to the years that you work before you retire
- 0.01 refers to salary increase per year (this here means 1% increase in salary per year)
- 0.02 refers to inflation rate per year (this here means 2% inflation per year)
"
732,EnmanuelMinaya/dop-inflation-calculator,JavaScript,"# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
"
733,ShaneSCalder/Project_Inflation_Risk_Impacts,Jupyter Notebook,"# Project_Inflation_Risk_Impacts
CPI &amp; Commodity Prices impacts on industrial projects 

# built in python
1. Dependancies:
2. Pandas
3. Pandas_Datareader
4. matplotlib
5. scipy.stats
6. yfinance 

# Purpose:

<p>To provide projects or content to help deal with short term inflationary impacts to project material and labour costs. </p>
"
734,2020711mimi/Modelling-UK-inflation-quarterly-,HTML,# Modelling-UK-inflation-quarterly-
735,bsurmanski/inflation_card_simulator,Python,
736,Javerunion/anticipation_inflation_index,,# anticipation_inflation_index
737,victor3105/django_inflation_table,Python,"# Построение таблицы

Вам необходимо оценить динамику инфляции в РФ и подготовить сравнительную таблицу. У вас есть данные по инфляции в csv-файле, необходимо реализовать приложение, которое выводит размер инфляции по годам и месяцам в процентах и отображает общую инфляцию за год.

Вам необходимо реализовать чтение csv-файла `inflation_russia.csv` во view `inflation_view` в файле `apps/views.py` и вывести данные из этого файла в таблице.

Построение шаблона реализуйте в файле `app/templates/inflation.html`.

Таблица должна состоять из столбцов: ""Год"", перечисление месяцев, ""Всего"". Суммарно 14 столбцов.

Таблица с суммарной величиной должна быть закрашена в серый цвет.

Если инфляция за месяц была отрицательной (дефляция), то ячейка должна быть закрашена в зеленый. Если значение инфляции превысило 1%, то в красный. Должна быть реализована визуальная градация красного: от 1% до 2%, от 2% до 5%, от 5% и более (3 оттенка красного, визуально они должны быть различимы).

Если данных за месяц нет, то нужно выводить прочерк.

## Пример таблицы:

![Пример](./example.png)

## Советы

- как работать с csv в Python: https://docs.python.org/3.6/library/csv.html

## Документация по проекту

Для запуска проекта необходимо:

Установить зависимости:

```bash
pip install -r requirements.txt
```

Выполнить команду:

```bash
python manage.py runserver
```
"
738,lehito21/brazilian_inflation_data,,
739,africadatahub/adh-africa-inflation,Jupyter Notebook,"# African Inflation Rate data

This repository contains a notebook that consolidates information on African
inflation rates (sourced from the IMF). The code is in [africa\_inflation\_data.ipynb](africa_inflation_data.ipynb) - this notebook can also be viewed using [nbviewer](https://nbviewer.jupyter.org/github/africadatahub/adh-africa-inflation/blob/main/africa_inflation_data.ipynb).

The consolidated data is in the [data](/data) folder in [Excel](data/africa_inflation_data.xlsx), [CSV](data/africa_inflation_data.csv)
and [Parquet](data/africa_inflation_data.parquet) formats.

The data used here is from the  [IMF](https://www.imf.org/external/datamapper/PCPIPCH) under their [standard conditions](https://www.imf.org/external/terms.htm), from the [African Union](https://au.int/en/member_states/countryprofiles2) under their [standard conditions](https://au.int/en/legal_notice) and from GitHub user [tadast](https://github.com/tadast) under the [GitHub standard terms and conditions](https://docs.github.com/en/github/site-policy/github-terms-of-service)."
740,Terry-Migwi/Inflation-Rates-Kenya,Jupyter Notebook,"# Inflation-Rates-Kenya
This repo contains a project analyzing the rates of inflation and consumer price indices in Kenya

## Title
Analyzing Inflation Rates in Kenya. 

## Author
Terry Migwi

## Project Description
This project aims to analyze consumer price indices and inflation rates in Kenya over a period of one year. The dataset contains two files which have been merged to one. A data report has been generated using Pandas Profiling and futher Exploratory Data Analyisis performed to study how each variable affects inflation rates.  

## Installation Requirements
Clone the repo by running: git clone https://github.com/Terry-Migwi/Inflation-Rates-Kenya.git

Navigate to the project directory: cd pandas

Open the Vs code: code

## Contact Information
You can reach me through the following email address: terrymigwi@gmail.com
"
741,omarespejel/apprecio_decentralized_inflation,Python,"# Apprecio.Finance - Measuring Inflation Decentrally

V0.2 Whitepaper [here](https://mirror.xyz/espejel.eth/GeYEoRFxF-HSaZr78pjeAx-3yTvcpAH7yd64bgL7ajI).

## Quick setup

**Oracle address**: 0x141bf09f27B1d274ff18bbbbD00eAfd3828C0E0A (more info in the [Job's TOML](https://github.com/omarespejel/apprecio_decentralized_inflation/blob/main/chainlink/node_jobs/july_2021_mexico_inflation_rate.toml)).

**externalJobID**: 8bc862a3f7734550948a824ed4307769 (more info in the [Job's TOML](https://github.com/omarespejel/apprecio_decentralized_inflation/blob/main/chainlink/node_jobs/july_2021_mexico_inflation_rate.toml)).

To get the lastest inflation estimate using Apprecio.Finance please create a contract instance of [ChainlinkClient.sol](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/ChainlinkClient.sol) and add a request-fulfill pipeline (please review [Chainlink documentation](https://docs.chain.link/docs/architecture-request-model/)).

A good example on how to get the latest inflation rate can be found in the [ClientInflationCall.sol](https://github.com/omarespejel/apprecio_decentralized_inflation/blob/main/contracts/ClientInflationAsk.sol).


## Inspiration

Inspiration for [Apprecio.Finance](apprecio.finance) (AF) came from August 5, 2021, [1729 Newsletter](https://1729.com/inflation), sponsored by Bajali Srinivasan (@[balajis](https://twitter.com/balajis)):

> “Inflation is a [monetary phenomenon](https://onlinelibrary.wiley.com/doi/pdf/10.1002/9781119205814.app2), a function of money printing. But it is also in part a social phenomenon, a function of mass psychology. If enough of the right people believe that inflation is going to happen, it will. As such, when inflation is happening, there is often a push to _censor_ discussion of inflation itself, under the grounds that discussing the problem actually causes it in the first place. That is exactly what happened in [Argentina](https://qz.com/84838/argentines-are-now-allowed-to-know-the-real-rate-of-inflation-thanks-to-their-courts/) and [Venezuela](https://www.economist.com/the-americas/2015/04/04/maduros-muzzle) over the last decade […] And that is why the world needs a global, decentralized, censorship-resistant inflation dashboard.
> 
> Why do we need an inflation dashboard? Because trillions of dollars have been [printed](https://www.marketwatch.com/story/why-the-feds-balance-sheet-is-expected-to-top-9-trillion-after-it-starts-reducing-its-monthly-asset-purchases-11626135642) over the last year – and it's not just dollars. Many countries besides the US have been printing fiat like mad to fund the response to COVID. Figures that shocked and stunned ten years ago ([$787B](https://www.politico.com/story/2009/02/senate-passes-787-billion-stimulus-bill-018837) for the bailout!) no longer warrant a headline today, though they may well result in headlines tomorrow.
> 
> If inflation is a government-caused problem, we can't necessarily rely on government statistics like the [CPI](https://www.bls.gov/cpi/) to diagnose it or remediate it. Indeed, in places with high inflation, censorship and denial is the rule rather than the exception.”




## What it does
**AF is a decentralized inflation dashboard: it estimates inflation from various price sources and makes it available through a front-end and on-chain trough Chainlink.** 

Its main objective is to resist censorship and provide an alternative to centralized measures such as those that come from Central Banks and national statistical agencies. AF implements decentralization at three different times in its design. (1) The price data are obtained from more than 1,000 different sources (in the Mexican case), independent of the government, which prevents the failure or manipulation of any source from significantly affecting the inflation calculation. (2) Data is automatically stored off-chain using the Interplanetary File System (IPFS), for data to be distributed across multiple off-chain nodes, and Filecoin, for data permanence and availability at any moment. (3) Aggregate prices and inflation rate are stored on-chain, Kovan testnet for AF v0.2, using Chainlink. The last two steps would also allow the data to be cryptographically signed twice.

## How we built it

### AF Design

To achieve the highest possible resistance to censorship, AF implements decentralization at three different times in its design. The following figure captures them.

![Decentralization at three stages.](https://images.mirror-media.xyz/publication-images/OqhU4tdR0D8jkqIGYAIvk.png?height=3295&width=1428)

### Data Recollection

This step is crucial to maintain decentralization. If manipulation of the data source by a third party can significantly alter AF's inflation rate measurement, then the objective of censorship resistance would be compromised.

Thus, for the Mexican case, our first measure, the data are obtained from two different types of sources.

1.  **Small sellers.** Through the [Apprecio](https://apprecio.mx) web and mobile applications.
    
2.  **Medium and large sellers**. Through web scrapping of online stores.
    

### Data Recollection: Small vendors (tienditas, in Spanish)

AF is unique in that it takes advantage of a data source such as that from small vendors.

In Latin America, these sellers are frequent. **Around** [700](https://www.elfinanciero.com.mx/mundo-empresa/2021/11/18/hablemos-del-valor-de-las-tienditas-en-mexico-y-que-podemos-hacer-por-ellas/) **thousand _tienditas_ exist in Mexico and generate 1% of GDP**. **Not taking this data source into account would greatly skew the inflation estimate.** However, obtaining data from these sources is a grassroots activity. There is no database that tracks prices in these relevant units.

**We take advantage of the work of the Mexican [Apprecio](https://apprecio.mx) fintech with more than 8 thousand small vendors as clients** throughout the Mexican Republic. Among other financial and strategic services, Apprecio helps small suppliers to calculate the ideal prices for their products. To do this, they require units to charge the prices at which they offer their products. AF then uses these data to calculate inflation.

![Apprecio.mx homepage](https://images.mirror-media.xyz/publication-images/uOeqO6vxKHhDs_fHvFMlc.png?height=803&width=1666)

**This source is decentralized**. **The data, for November 2021, comes from at least 1,000 different units and the number is growing**. The fact that a unit does not report accurate data would not affect the general median price of the good and therefore any calculations made with the prices.

### Data Recollection: Medium to Big Vendors

**Prices from [Walmart](https://www.walmart.com.mx/), [La Comer](https://www.lacomer.com.mx/lacomer/), and [Soriana](https://www.soriana.com/supermercado.html) are included to further decentralize data sources**. AF scrapes their online stores. For Mexico, it is planned to include at least two additional sources: Costco and Sam's Club.

**These sources provide the assurance of the constant presence of at least one price during any period**. The main challenge comes from maintaining scrappers that can repeatedly beat the web pages. The [1729 Newsletter](https://1729.com/inflation) mentions **several issues related to reliance on scrappers for pricing data,** including dealing with automated countermeasures, maintaining the web crawler, and analyzing hard-to-determine units. AF met these problems successfully.



### Decentralized storage off-chain

For AF to be a successful tool for openly measuring inflation, it must be **available for audit (1) at any time and (2) as cheaply as possible**.

Storage has at least two requirements for AF:

1.  **Raw price data must be auditable**. Currently, raw data storage is done off-chain due to gas prices. Possibly, the next step would be for AF to move to an Ethereum L2 and be able to store raw data on the chain.
    
2.  **The data must be stored in a decentralized way**. A central server means the consolidation of control over the data. Even off the chain, due to point 1, this should be achieved.
    

**AF achieves both requirements by storing raw price data off-chain using** [IFPS](https://ipfs.io/)**.** The entire price data set is divided into smaller chunks, cryptographic hashed, and assigned a unique fingerprint called a [Content Identifier](https://proto.school/anatomy-of-a-cid) **(CID)**. The dataset would be stored on at least one node, a local server anywhere in the world. By using the CID, other nodes can request the data and will cache the data themselves locally. This would increase the decentralization of the data set off the chain.

**The data must always be online and available for direct request.**

> “While IPFS guarantees that any content on the network is discoverable, it doesn't guarantee that any content is persistently available. This is where [Filecoin](https://filecoin.io/) comes in […] a decentralized storage network in which storage providers rent their storage space to clients.” ([IPFS documentation](https://docs.ipfs.io/concepts/persistence/#pinning-services)).

AF uses **Filecoin so that price data is always available while maintaining its decentralization**. The dataset would be anchored in at least one node.

The [Web3.Storage](https://web3.storage/) solution enables AF **(1)** to automatically store the dataset in IPFS and back it up with Filecoin; and **(2)** replicate pricing data across a network of storage providers and verify its integrity.

This solution allows data to be persistent, available, and decentralized even off-chain. The next layer of decentralization will come from making the data available on-chain.

### On-Chain Storage and Availability

Raw off-chain **data of available sources are aggregated to obtain the median value of the prices for a determined period of time**, leading to a single price per item that must be taken into account in the inflation calculation. **AF calculates inflation off-chain** using the [CalculateInflation.py](http://CalculateInflation.py) function in AF's GitHub repository. The calculation is done off-chain to save gas. However, **the next step is to allow any user to request an on-chain calculation**.

**AF v0.2 uses [Chainlink](https://chain.link/) to bring off-chain data to the Kovan testnet.** The next step would be to run a node directly on the Ethereum Mainnet to add an additional layer of decentralization. Chainlink is a decentralized Oracle network that cryptographically signs and delivers data on-chain. **Currently, any user can request (1) the current inflation rate; and (2) the aggregate prices of each of the items in the inflation calculation.**



## What's next for Apprecio.Finance

Three main points appear on the AF roadmap:

1.  **Coverage extended to new countries.** The next would be the United States and Brazil. Requests from other economies are appreciated.
    
2.  **Possible migration to full on-chain storage.** With the development of new Ethereum L2 rollups like Starknet, it's cheaper than ever to chain data. This would allow users to request and integrate AF data into their smart contracts inexpensively.
    
3.  **Adding new data sources**. The more good quality data sources AF uses, the more decentralized and secure the inflation rate will be. In Mexico, AF is already implementing data from small suppliers (_tienditas_) and retailers.
"
742,eriksandstrom88/US-Dollar-Inflation-Modeling,Jupyter Notebook,"# US-Dollar-Inflation-Modeling

## Summary
- 4 Models created so far with one in progress; several more planned
- Created models include 3 relatively basic neural networks and 1 Deep Neural Network
- Deep Neural Network predicted inflation (as measured by CPI) EXACTLY for Q1 2021
- Model in progress is a custom model based on my dissection of the Quantity Theory of Money
- Planned models include: SVM, MARS, various linear regression models, ensemble model by economic sector

## Model 4: Deep Neural Network using Keras

### Grade: A-

This model performs the best yet, having predicted CPI for the most recent quarter for which all data has been released (4/1/2021) with perfect accuracy--predicted value: 266.83; actual value: 266.83.  The reason it gets an A- is that it predicted a much higher CPI for 4/1/2020 than the actual value, which I attribute to the bizarre conditions surrounding the start of the COVID-19 pandemic. I suspect the inputs for personal savings and commercial bank loans are responsible given their high volatility relative to the other inputs (see line chart below) in April of 2020.  The model was trained on 11 variables: M2 Money Supply, Federal Debt, Government Expenditures, Federal Funds Rate, Commercial Bank Loans (combined commercial/industrial loans and consumer loans), Net Exports, Real GDP, Reserve Balances at Depository Institutions, Unemployment Rate, Personal Savings, and  Producer Price Index for All Commodities.  The training data begins 10/1/1971, at the beginning of the post-Bretton Woods era, and ends 1/1/2020 before the COVID pandemic.  I wanted to see if this model (and all the others below) could predict inflation given the extreme changes in money supply, government expenditures, personal savings and other variables that have taken place after the start of the pandemic.  

There are 2 hidden layers in the model, composed of 100 neurons each, and the model was trained using 100 epochs, eventually reaching a MSE of 0.0000265 for variables scaled on a 0 to 1 scale using SK-Learn's MinMaxScaler function.

![image](https://user-images.githubusercontent.com/75816400/137207761-ad6ddc26-5d50-40db-8ea9-df9401cb7d38.png)
![image](https://user-images.githubusercontent.com/75816400/137209083-de6f3b7c-d949-405f-98a4-67089f3458ac.png)

## Model 3: Neural Network Regression using Keras - scaled input and output values

#### Grade: B

After training the model on SK-lean's MinMaxScalar scaled values for all predictors, the model predicted CPI for 4/1/2020 to be 250.3, when the actual value is 256.192.  The previous model predicted 271.97.  The scaled data led to a big improvement in accuracy.  For the second test, the model predicted CPI for 4/1/2021 to be 262.52, when the actual value is 266.832.  The previous model predicted 277.64.  This is also a huge improvement with scaled data.  These improvements are impressive given the massive changes in trends of the input variables starting after 2/1/2020.

## Model 5 (in progress): Custom Model, Quantity Theory of Money Variation

### Grade: TBD

The Quantity Theory of Money (QTM) is a very general model relating the money supply and how fast it moves to the price level and level of output in the economy.  The equation is MV = PY, wher M is the money supply, V is the velocity of money (an average of how many times each dollar in the money supply changes hands in a given time period, usually a year), P is an index for the price level, and Y is output (essentially GDP).  So, for example, if the money supply increases, while velocity and output stay the same, the price level would have to increase to balance the equation because more dollars are competing for the same number of goods and services.  There are numerous factors that can affect each of these four variables individually--they are not each isolated to this equation, which makes them incredibly hard to model.  Given the massive increases in M1 and M2 money supplies in recent years while at the same time GDP has grown modestly, why hasn't the overall price level increased to match the increases in money supply?  

This is a question puzzling many economists.  There are many possible explanations:
 - As our trade deficit has grown over the last several decades, lots of the new money created has flowed out of the country, so it's not affecting prices domestically
 - Velocity is typically calculated as a residual.  We can measure money supply, prices and output, but it is hard to measure velocity, so it is calculated as what's left over.  Essentially, V = PY/M.  Economists used to assume that velocity was constant, yet that is not true.  I wonder how velocity is affected by age demographics (do young people spend faster than old) and wealth gaps (as wealth has accumulated among the wealthiest in our society, do the spend it more slowly than those living paycheck-to-paycheck).  If velocity slows for these reasons, that could explain prices increasing more slowly than the difference between growth in the money supply and growth in output.
 - Inflation expectations play a large role in the salaries people demand and how quickly they want to spend money.  If they expect the dollars in their bank account will be worth less one month from now than they are today, they will spend the money while goods are relatively cheaper.
 - Money supplies have increased most rapidly during times of crisis like the 2008 financial crisis and the COVID-19 pandemic, yet because the dollar is viewed as ""safe"" around the world, many people demand more dollars during these times of crisis, which holds up the value of the dollar.
 - Energy, especially oil, have a large influence on prices because they play a role in manufacturing, supply chain transportation, and quality of life.  The United States shale boom led to a drastic decrease in global oil prices, which has also helped to hold down prices.
 - Finally much of the money that has been created through federal stimulus and through the Federal Reserve's Quantitative Easing policies is being held as excess reserves in banks.  The increase in reserves held is astonishing.  This increase is in part due to a low demand for loans, while at the same time the Federal Reserve is paying interest on reserves, so banks are holding them to earn interest.
 
All these factors likely contribute some to holding down inflation.  At the same time as the pressures holding down in flation, as of this writing on 10/13/2021, there are global supply chain shocks and shortages spanning numerous industries that are putting upward pressure on prices as the world emerges from the COVID-19 pandemic.

My goal is to make sense of this mixture of influences on the long-term value of the dollar.  As Milton Friedman once said, ""Inflation is always and everywhere a monetary phenomenon.""  If that is the case, we can expect inflation for years to come.  However, Friedman made that statement at a time when the globe was not nearly as connected internationally as it is today and when the dollar was not as dominant globally as it is today.

## Model 2: Neural Network Regression using Keras

#### Grade: C-

I fed this model raw input values from each of the eight chosen inputs.  The dates range from 9/1/1971 to 1/1/2020 to reflect the post-Bretton Woods era to the beginning of the COVID-19 pandemic.  I wanted to see if a basic, un-tuned neural network could predict CPI after the massive increases in the monetary base, reserve balances, and the all-time low in net exports.  The model predicted a CPI of 271.97 and 277.64 for 4/1/2020 and 1/1/2021, when the actual values were 256.19 and 266.83, respectively.  Though far from the actual CPI, the model itself is not necessarily that bad given the unprecedented changes in the input variables.  Since the model is a basic regression neural network, it does not factor in time series lag, so it associates the large increases/decreases in certain variables with an immediate response in the target variable.  Another factor influencing performance is that the model was fed the raw values for all variables instead of scaled values.

## Model 1: Basic Neural Network using SK-Learn

#### Grade: F

These models are flawed, somewhat purposely so.  I wanted a baseline for model accuracy using a simple model, given how difficult inflation is to model.  The 8 input variables were manually chosen by me instead of using any feature selection methods.  Additionally, I did not scale the data from the main series.
"
743,V4p1d/Tips-Inflation-Attack,Jupyter Notebook,"# Tips Inflation Attack
 
These files present simulations for the Tips Inflation Attack on the Tangle. 

- Tangle.py contains the classes to simulate the Tangle
- Simulations for paper.ipynb contains the scripts for all the scenarios described in the paper.
"
744,EuranetPlus/inflation-rate-april,JavaScript,"## About this project

This is the code repository for an interactive EuranetPlus choropleth map of European countries based on data from a CSV file. The map can be updated with any data set that follows [this csv structure](https://docs.google.com/spreadsheets/d/1fzicMw_LiFGrdtzloXZFbM2FFgVc-GYtavvxPJFZ5Yo/edit?usp=sharing).

To use the map for a new topic and populate it with new texts and data please follow these steps:
1. Make a copy of this map template: [Copy map template](#copy-map-template)
2. Configure the map: [Configure map](#configure-the-map)
3. Update map with new data: [Add or update data](#add-data)
4. Update map titles and texts: [Updating texts](#updating-text)
5. Translate texts into 24 EU languages [Translate texts](#translate-text)
6. Publish the new map: [Publish map](#publish-map)

<img width=""602"" alt=""Bildschirmfoto 2022-04-27 um 15 20 30"" src=""https://user-images.githubusercontent.com/8008434/165527407-9b04b553-b074-4cbf-bc42-5e947a2fd8c3.png"">


## Copy map template

1. **Copy repository**:  
To make a new map we first need to copy this repository and use a fresh map template. To do this, please use the green ""Use this template"" button on the top right in this window. This will create a copy of the exact same code that can be used for a new map. You will be prompted to name the new repository according to the new topic of the map. Please use this nomenclature: _map-TOPIC_, e.g. _map-gdp_ or _map-generationz_. If more than two words are used, separtate them with a dash like so _map-military-spending_. 

2. **Add Google Credentials**:  
In order to be able to use the automatic translation service by the Google API, we need to provide the new repository with access to the servica account API key. For this go to the **Settings** tab at the top of this repository and select the ""Secrets"" dropdown on the lower left side. Here select ""Actions"". On the top right side press the ""New repository secret"" button. Name the new secret **""GOOGLE_CREDENTIALS""** and as a value paste in the contents of the service account json file that can be downloaded from the Google Cloud Console. This file looks something like this (This example below here is fake and only for illustration):

```bash
{
  ""type"": ""service_account"",
  ""project_id"": ""iron-moon-dgddg"",
  ""private_key_id"": ""843dgj436fcf7bfab4sgg367235529"",
  ""private_key"": ""-----BEGIN PRIVATE KEY-----\nMIIEvwIhdghgdBg\n-----END PRIVATE KEY-----\n"",
  ""client_email"": ""maps@iron-moon-dgdgdgdgg.iam.gserviceaccount.com"",
  ""client_id"": ""sgdgfdgdggdgggdgg"",
  ""auth_uri"": ""https://accounts.google.com/o/oauth2/auth"",
  ""token_uri"": ""https://oauth2.googleapis.com/token"",
  ""auth_provider_x509_cert_url"": ""https://www.googleapis.com/oauth2/v1/certs"",
  ""client_x509_cert_url"": ""https://www.googleapis.com/robot/v1/metadata/x509/maps%40iron-moon-dgdgdgdgg.iam.gserviceaccount.com""
}
```

3. **Allow scripts**:  
By default every new repository is locked for running automated scripts. We need to enable this. Go to the **Settings** tab at the top of this repository and select ""Actions"" and then ""General"" from the dropdown on the lower left side. Then set the ""Workflow permissions"" to ""Read and write permissions"". Now we can change the texts and run the translations.

4. **Connect to Vercel**:
Once the new repository is set up, you need to connect it to Vercel to deploy the map to the internet. Please go to https://vercel.com/dashboard, sign in with your GitHub account and do the following steps: 
  - Press the ""New Project"" Button on the Vercel dashboard
- Under ""Import Git Repository"" choose the name of the copied repository
- Press the blue ""Deploy"" button (no need to change any settings here)
- Press the ""Go to Dashboard"" button and copy the URL under the ""DOMAINS"" heading (the url should look something like this: https://map-test-seven.vercel.app/)
- Go to the [map configuration file](src/lib/stores/config-features.js) and paste the URL on [line 3](https://github.com/EuranetPlus/map-europe/blob/e6f63675ae3706bc5337eb755ae58c61c1e27634/src/lib/stores/config-features.js#L3).

## Configure the map

In order to configure the new project, please change the contents of this [map configuration file](src/lib/stores/config-features.js). The configuration has a number of parameters that you should specify.

The most important entries that you need to change for each project are the ""mapTitle"", the ""vercelURL"", ""datasetType"" and the ""datasetUnit"":

```js
  ""mapTitle"": ""europe"", // The title of the map, if more than one word, separate by dash, e.g. ""income-europe""
  ""vercelURL"": ""https://euranet-map-europe.vercel.app"", // The url provided when deploying the map on Vercel
  ""datasetType"": ""values"", // ""values"" or ""binary""; Does the data set contain numerical values or binary (0/1) values for countries?
  ""datasetUnit"": ""percent"", // ""fullNumbers"" or ""percent""; Is the data in percent (0.25 of GDP) or full numbers (25 people)?
  ""headlineAvailable"": true, // true or false; Should the map have a headline? 
  ""subheadlineAvailable"": true, // true or false; Should the map have a subheadline? 
  ""tooltipAvailable"": true, // true or false; Should the map show a tooltip when hovering over a country? 
  ""scaleBarAvailable"": true, // true or false; Should the map show a scale bar on the top? 
  ""legendAvailable"": true, // true or false; Should the map show a legend in the bottom right corner? 
  ""textSourceAvailable"": true, // true or false; Should the map show a source text below the map? 
  ""textNoteAvailable"": true, // true or false; Should the map show a text note below the map? 
  ""textDataAccessAvailable"": true, // true or false; Should the map show a link to the original data source below the map? 
  ""legend1Color"": ""#cad1d9"", // Specifies the color of the first round dot in the legend entry
  ""legend2Color"": ""red"", // Specifies the color of the second round dot in the legend entry
  ""legend3Color"": ""blue"", // Specifies the color of the third round dot in the legend entry
  ""legend4Color"": ""green"" // Specifies the color of the fourt round dot in the legend entry
```

## Add data

To add or update the map data, please first decide whether the data set you are using shows ""values"", i.e. continous numbers on a color scale or whether it is ""binary"", i.e. the data shows only a few countries in the same color (0/1). 

1. Set the dataset type in the [map configuration file](src/lib/stores/config-features.js) under ""datasetType"". If your dataset consists of **values data**, please use this [csv values template](https://docs.google.com/spreadsheets/d/1fzicMw_LiFGrdtzloXZFbM2FFgVc-GYtavvxPJFZ5Yo/edit?usp=sharing). If it consists of **binary data**, please use this [csv binary template](https://docs.google.com/spreadsheets/d/1YL_5aVY9zaaxwhI6-cEgcwO8k01Fzu2FzsPMtvppYfg/edit?usp=sharing)

2. Then you need to decide whether the data consists of **full numbers** (i.e. 45 people) or **percent values**, (i.e. 45% of GDP). In the [map configuration file](src/lib/stores/config-features.js) this can be set under ""datasetUnit"".

3. Please copy the respective csv template to your own computer (or Google Drive) and fill in the desired data point for each country. Please make sure that values are formatted with dots (.) as a comma separator and **not commas**, i.e. 0.45 for percentage values instead of 0,45. In the template, all percentage values are always written as fractions of 1, **i.e. 0.45 and not 45**.  

**Warning:  
Please make sure not to delete any country names or ids.  
Also make sure the CSV file is formatted with commas (,) as delimiters, not semicolons (;) or other symbols. Otherwise the map will not work. Google sheets uses commas by default, so this might be the easiest solution to use.**

4. Once you have updated the values, download the google sheet / excel file as a CSV file under >File > Download > Comma-separated-values (.csv), open it in a text editor (e.g. notepad, textEdit or similar) and copy all the contents of the csv file (as text).

5. Open this [data file](static/data/thematic/data.csv) and click on the pen symbol on the top right side of the file preview window where it says ""Edit this file"". Then paste the contents of the CSV file as text here.

After this, save the changes by pressing the green **Commit changes** button.  
Your data should now be updated and after a while show on the map. Check the Vercel URL after a few minutes to see the updated data. 

## Updating text

To change the map heading, subheading, source and text note, please change the text contents of this [text configuration file](src/lib/stores/config-text.json). It contains the entries for all textual elements in English.

Example:  
To change the text of the heading of the map, change the ""heading"" entry (text in quotation marks, i.e. """" behind the :). To do this, simply click on the pen symbol on the top right side of the file preview window where it says ""Edit this file"". **_Warning: Please make sure to always enclose the text elemets with quotation marks and do not forget to add a comma after the entry. Otherwise the file will not be able to be read and the app may brake._**

This is **correct**:  
``""heading"": ""Military spending up across all EU states"",``

This is **not correct** (comma is missing and no quotation marks, i.e. """" enclosing the text):  
``""heading"": Military spending up across all EU states``

After this, save the changes by entering a title for the commit, e.g. ""Create config-text.json"" and press the green __Commit changes__ button.

## Translate text

All text elements in the map are by default in English and are taken from the [text configuration file](src/lib/stores/config-text.json). In order to translate the text into all other EU languages, you simply need to go to the Actions tab above. Here under ""workflows"" select the ""Translate text"" workflow and press the ""Run workflow"" button on the right side and again the green ""Run workflow"" button from the dropdown menu. This will run the translate script and request the translated 24 language files from the Google API. This process may take several minutes. Once this process has finished sucessfully, you should see a green check mark ✅. 


## Publish map

To embed the map on any website as a responsive widget, you need to create an iFrame code, which then can be shared. The iFrame code has to be unique for each map, bacause it details the title of the map and the Vercel URL where the map is hosted. To create the iFrame code, please follow these three steps:

1. Change the ""mapTitle"" for the map in the [feature configuration file](src/lib/stores/config-features.js) (only if you have not done so yet in step [2](#configure-the-map))
2. Change the ""vercelURL"" in the in the [feature configuration file](src/lib/stores/config-features.js) (only if you have not done so yet in step [2](#configure-the-map))
3. Run the ""Create iFrame code"" workflow in the Actions tab above

The correct iframe code can then be copied from this [IFRAME.md file](IFRAME.md), which is generated uniquely for each project when running the script. Share this code to see the map in action on any website.

## Changing translations manually

All text elements on the map (e.g. country names, heading, subheading, source text, notes, etc.) are automatically translated into the 24 official EU languages using the Google Translate API by running an automated node script. The translations returned by Google are a good first approach, but manual edits of the text in different languages may be necessary. To do this, please go to the [language folder](static/languages) and edit the contents of the respective language file.

Example:  
To change the text of the subheading of the map in Hungarian, open the [hu.json](static/languages/hu.json) file and change the ""subheading"" entry (text in quotation marks, i.e. """" behind the :). To do this, simply click on the pen symbol on the top right side of the file preview window where it says ""Edit this file"". **_Warning: Please do not change the headings as these are automatically generated every day, based on the latest data. Also make sure to always enclose the text elemets with quotation marks and do not forget to add a comma after the entry. Otherwise the file will not be able to be read and the app may brake._**

This is **correct**:  
`""heading"": ""Már több mint 5,2 millió menekült menekült el Ukrajnából"",`

This is **not correct** (comma is missing and no quotation marks, i.e. """" enclosing the text):  
`""heading"": Már több mint 5,2 millió menekült menekült el Ukrajnából`

After this, save the changes by entering a title for the commit, e.g. ""Create hu.json"" and press the green **Commit changes** button.

## Development

To locally develop this map on your computer, please do the following steps in your terminal/command line:

1. Clone the repo: `git clone https://github.com/EuranetPlus/map-ukraine.git`
2. Open cloned folder: `cd map-ukraine`
3. Install all dependencies: `npm install`
4. Start a local development server:

```bash
npm run dev

# or start the server and open the app in a new browser tab
npm run dev -- --open
```

## Production

Before creating a production version of your app, please install an [adapter](https://kit.svelte.dev/docs#adapters) for your target environment. Usually this would be the static adapter provided by SvelteKit or any adapter suiting your platform (i.e. Vercel, Netlify, etc.). Please see more info here: https://kit.svelte.dev/docs#adapters

To build the app for production, run

```bash
npm run build
```

This will create a static folder called **build** in the root folder of the repository, which contains all the files necessary for deployment on a web server.

> You can also preview the built app with `npm run preview`, regardless of whether you installed an adapter. This should _not_ be used to serve your app in production.
"
745,ordinaries/inflation-for-the-meremortals,,"# inflation-for-the-meremortals
This is an Inflation related posts July 25 2022
"
746,JaroslavKotrba/AppForecastingInflation,R,"# AppPredictionInflation

TO SEE THE OUTPUT: https://jaroslavkotrba.shinyapps.io/inflation
"
747,decadeofdata/Inflation-data-science,Jupyter Notebook,"# Inflation-data-science
Using machien learning to explore the correlation between the money supply and inflation.
"
748,guardian/interactive-ons-inflation-calculator,HTML,"### Running locally

Please run on node 16: `nvm install 16` `nvm use 16`

You need the gulp-cli installed globally: `npm install -g gulp-cli`

Make sure you are using the correct version of node with NVM: run `nvm use` in the root of the repo. 
If you don't have nvm installed, add it: `brew install nvm`.

Install node modules: `npm i`

To run locally: `npm start` or `gulp`.  

### Test harness

When the dotcom team makes changes to the website, the local test harness needs to be updated to reflect the new reality.

Update article and DCR templates in test harness:

```
npm run update-harness
```

If the script doesn't work, that's an indication that there has been a breaking change on the website. In that case, try to find out what has changed and talk to the dotcom team. If the change does not affect the working of interactives but just the working of the script, then the `harness/update-harness.js` script needs to be updated.


#### Viewing multiple atoms together

To specifiy the atoms you'd like to view together add the names to the array 'multipleAtomSetup' in the config. You can also add custom paragrphs, by adding the word 'paragraph' to the array. To edit this paragraph you simply need to change the text in 'mockParagraph' in the config. 

You can also add custom HTML, this will sit after the atoms. To do this simply edit the 'multipleAtoms.html' in the harnesses folder.

Atoms will only affect each other when they are being in embedded in an interactive article templates or an immersive article templates. In the simplest article template they are added in iframes so all their code is sandboxed and can't affect either the page or other atoms.

### Create a new atom 

Duplicate an existing atom. Remember to change the path in the server/render.js file to point to the html file in the new atom. 

### Deploy to S3

To deploy to the Interactives S3 bucket you need AWS credentials for the Interactives account in your command line. You can get these from the Guardian's permissions manager system [Janus](https://janus.gutools.co.uk/). You need to be assigned these permissions and be on a Guardian network or VPN to see them on Janus. 

Fill out config.json:

```
{
    ""title"": ""Title of your interactive"",
    ""docData"": ""Any associated external data"",
    ""path"": ""year/month/unique-title""
}
```

Deploy: `gulp deploylive`

Get the deployed links: `gulp url`

The link can be pasted into a Composer file 


### Testing in apps

To test on the Guardian apps - follow our 
[Testing in Apps guide here](https://github.com/guardian/interactive-atom-template-2019/blob/master/docs/guide-to-apps-testing.md)

To test with dark mode on apps - see [Testing in Dark Mode](https://github.com/guardian/interactive-atom-template-2019/blob/master/docs/dark-mode-in-apps.md)


### Reusable React components 

If your project uses React and is likely to use generic web components like search bars etc, it might save time to use the Digital Team's resuable components library. Intro to [their components library here](https://guardian.github.io/source/?path=/story/components--page).


### Loading resources (e.g. assets)

Resources must be loaded with absolute paths, otherwise they won't work when deployed.
Use the template string `<%= path %>` in any CSS, HTML or JS, it will be replaced
with the correct absolute path.

```html
<img src=""<%= path %>/image.png"" />
```

```css
.test {
    background-image: url('<%= path %>/image.png');
}
```

```js
var url = '<%= path %>/image.png';
```


### Using the ScrollyTeller module
The ScrollyTeller module is written as a class. You can check the scrollyteller-example branch for a full example.

Import it as normal into your project
```
import ScrollyTeller from ""./scrollyteller""
```

Instantiate a new instance of it and pass in a config object
```
const scrolly = new ScrollyTeller({
    parent: document.querySelector(""#scrolly-1""),
    triggerTop: 1/3, // percentage from the top of the screen that the trigger should fire
    triggerTopMobile: 0.75,
    transparentUntilActive: true
});
```

Add your trigger points:
```
scrolly.addTrigger({num: 1, do: () => {
    console.log(""Console log 1"");
}});
```

And finally start off the scroll listener:

```
scrolly.watchScroll();
```

You'll also need to comment in the _scrolly.scss code in main.scss, as well as structuring your HTML in the following way:
```
<div id=""scrolly-1"">
    <div class=""scroll-wrapper"">
        <div class=""scroll-inner"">
            <svg id=""data-viz"">
            </svg>
        </div>
        <div class=""scroll-text"">
            <div class=""scroll-text__inner"">
                <div class=""scroll-text__div"">
                    <p>1</p>
                </div>
            </div>
            <div class=""scroll-text__inner"">
                <div class=""scroll-text__div""> 
                    <p>2</p>
                </div>
            </div>
            <div class=""scroll-text__inner"">
                <div class=""scroll-text__div"">
                    <p>3</p>
                </div>
            </div>
        </div>
    </div>
</div>
```

## Using ScrollyTeller Progress code 

This module should do what the module above but also returns two numbers - one the total progress of the scrolly teller from 0 to 1, 1 being scrolling complete, and also the progress within any given section or box, generated by the scrolly.gradual function.

In your `app.js` file you'll need to do something like this. 

```javascript
const scrolly1 = document.querySelector(""#scrolly-1"")

const callback = () => console.log(""do something"") 

const scrolly = new ScrollyTeller({
    parent: scrolly1,
    triggerTop: 1/3, // percentage from the top of the screen that the trigger should fire
    triggerTopMobile: 0.75,
    transparentUntilActive: true,
    callback:callback,
    overall: () => {}
})

scrolly.gradual( (progressInBox, i, abs, total) => {
        console.log(""in box progress"", progressInBox)
})

scrolly.overall((overallProgress) => {
    console.log(""overall progress?"", overallProgress)
})


// And finally start off the scroll listener
scrolly.watchScroll()

```
"
749,Satnamsingh937/Inflation-Trading-Strategy,Jupyter Notebook,
750,cfmdobbie/SalaryVsInflationUK,Java,"""Salary vs Inflation (UK)"", an Android app by Charlie Dobbie for
maycontainsoftware.com

"
751,cptanalatriste/inflation-tracker-extension,JavaScript,"# TheFed
Some reporters inflate priority to get their issues fixed. When they do that, you as a developer can spend time on issues that are less important than other open issues. This Chrome Extension helps you identify reporters who do this.

## Installation
The Chrome Extension is still under development. To install it, [download the extension code](https://github.com/cptanalatriste/inflation-tracker-extension/releases/download/v0.2-alpha/thefed-for-jira.zip), unzip it and load it as an unpacked extension [following this procedure](https://developer.chrome.com/extensions/getstarted#unpacked). 

## Features
After installing the extension, the inflation tracker button will be available in your browser. After clicking it you will see the following:

![alt text](https://github.com/cptanalatriste/inflation-tracker-extension/blob/master/img/screenshots/start.PNG?raw=true ""Extension start"")

Immediately after installing the extension you should configure the options according to the characteristics of your bug reporting process. Here's a brief descriptions of the options available:

* **JIRA host:** The URL of your JIRA system. For example, tha Apache Software Foundation uses https://issues.apache.org/jira 
* **Inflation penalty:** The extensions works based on the concept of ""Reporter Reputation"". If the priority assigned by a bug reporter is changed later during the patch development process, his reputation score is diminished. This parameter defines the penalty per infraction.
* **Maximum results per request:** Under the hood, the extension makes heavy usage of JIRA's REST API: This parameter defines the maximum number of issues returned per request.
* **Minimum acceptable reputation:** Each reporter gets a ""thumbs up"" or ""thumbs down"" label based on their reputation score. This parameter defines the minimum reputation score for a ""thumbs up"" label.
* **Project:** The name of the project you're working on.
* **When you finish working on an issue, you update the status to:** We use this information to identify the ""important"" priority corrections that impact the score. For example, if this parameter is set to ""Resolved"" —the default— any priority correction made by a ""Resolver"" will impact the reporter's reputation.

Once you have set proper values for all this parameters, you can click on the ""Load Issues"" button to obtain a list of *open an unassigned issues sorted by reporter reputation, reported priority and creation date:* 

![alt text](https://github.com/cptanalatriste/inflation-tracker-extension/blob/master/img/screenshots/issues.PNG?raw=true ""Issues Loaded"")

Per issue, you can see the reputation score of the reporter in the ""Score"" column. Also, we provide a ""View"" button —the magnifier glass— which can open the issue on the current active tab. After the issues have loaded the ""Reputation Report"" button is activated, which shows the list of reporters for the issues in the inbox sorted by reputation, including their ""thumbs up"" status:

![alt text](https://github.com/cptanalatriste/inflation-tracker-extension/blob/master/img/screenshots/reporters.PNG?raw=true ""Reputation Report"")

## The Priority Inflation Game
This tool is the outcome of a research project on game-theoretic analysis of software processes. If you want to get into details, feel free to visit [our project page](https://cptanalatriste.github.io/priority-inflation-site/).

## Questions, issues or support?
Feel free to contact me at c.gavidia@cs.ucl.ac.uk .



"
752,kayuzee/frontier-inflation-dashboard,Jupyter Notebook,"# Frontier-Inflation-Dashboard
This is a dashboard that uses Quandl (https://www.quandl.com/) to pull financial data

Step 1: Create a Quandl Account

Step 2: Go to profile --> Settings --> API key

Step 3: Copy this API Key, go to the Jupyter notebook and in input 1 replace ""YOUR_API_KEY"" with this key

Step 4: Run all

You will get a dashboard that renders through bokeh to create a html webpage that looks like the below:

![sample_dashboard](https://user-images.githubusercontent.com/19885765/29255044-e2fc3368-8052-11e7-9d8d-b770fc006dca.PNG)



Notes: I am still relatively new at this so two main issues: 
  1) Bokeh can be slower to render multiple plots on the same page, and a more effective way would be to use the tools to create a        selection parameter, as opposed to multiple plots - I will work on this, and have a few ideas
  2) There has to be an easeier way to automate using the country codes to create the required calls to Quandl's API - I will work on creatinga n effective loop for that
"
753,ONSdigital/dp-inflation-helper,HTML,"Inflation helper
================

Tool to help guide users to the specific inflation figure they need withough requiring them to have an in depth knowledge of the statistics or ONS website.

Runs client side without Javascript and progressively enhanced with Js to offer greater specificity to the user. 

Styling from [ONS website pattern library](http://onsdigital.github.io/ons-pattern-library-starter/)

### Tests

Simple tests exist and the seperate `tests.js` file will only be loaded when running on local server on hostname `http://127.0.0.1`. Run tests with `test()` in the console.

### Current version

Hosted on Github pages at [https://onsdigital.github.io/dp-inflation-helper/](https://onsdigital.github.io/dp-inflation-helper/)

### Contributing

See [CONTRIBUTING](CONTRIBUTING.md) for details.

### License

Copyright © 2016-2019, Office for National Statistics (https://www.ons.gov.uk)

Released under MIT license, see [LICENSE](LICENSE.md) for details.
"
754,lambdaclass/monetary_base_inflation_scraper,CSS,"# monetary_base_inflation_correlation
A scraper that fetches inflation data from INDEC and monetary base data from Argentina's Central Bank to study of the correlation between these variables in Argentina's recent history.
"
755,tamartsi/Variant_specific_inflation,HTML,"# Variant_specific_inflation
 Computing and studying variant-specific inflation expected due to stratified variance
 
 Please see variant_infl_tutorial.md for tutorial (or you can also download the pdf file). 
 
Useful functions are provided in the file variant_specific_inflation_functions.R.


# Content of the repository
- A tutorial about computing variant-specific inflation factors, includes multiple types of files called variant_infl_tutorial.html, .md, .pdf, .Rmd. The code used to generate the tutorial is in the .Rmd file. 
- Functions to compute variant-specific inflation factors (a single function), and to make a multi-panel QQ-plot, each panel corresponding to a different set of genetic variants. These functions are found in the file variant_specific_inflation_functions.R
- A script that was used to generate simulated data: Generate_simulated_data.R
- Simulated genotype and phenotype data: Genotypes.gds, Phenotypes.RData.


# Required software
This repository provides an R function for computing variant-specific inflation factors, and an example workflow on a mock dataset, in the tutorial. The example workflow uses the R/Bionconductor package GENESIS (used for fitting ""null models"" and for genetic association analyses), and the example genetic data is saved in a gds file. All R package versions are provided in the tutorial file. 

## Workflows and pipelines can be developed in many other ways
We note that workflows can be developed in which allele frequencies are computed using other softwares, other file formats for genetic data, and other ways to fit null models and perform genetic association testing. The function computing variant-specific inflation factor is implemented in R, so if other software is used compute allele frequencies, etc, the data should be read by R. 

# Installation guide
Please see the the tutorial for installation and usage. Currently, we do not provide a software but rather a source code in R. The function for computing variant-specific inflation factors for a given variant does not use any package (but packages are required to prepare input data to the function). The plotting function uses the packages ggplot2, data.table, and tidyr. 

One needs to follow standard R commands to install packages used, e.g. install.packages(). All packages used, by the plotting function and by the example workflow, are professionally maintained. 

# Running the tutorial
To run the tutorial one needs to install and load the R package rmarkdown, and use the command render(""variant_infl_turorial.Rmd""). It takes less than a minute to run it. It runs over the example data and generate figures. Users can also run the R function from the tutorial line-by-line to look at intermediate outputs and to fit adapt the workflow to their needs. 






"
756,Ross-McCandless/ExtractYearlyInflationRates,Python,"# ExtractYearlyInflationRates

A simple web scraping tool to get Canada's Consumer Price Index (CPI) values for each year since 1950 and put it in a xls file.
"
757,hpadilla6201/PA4-Inflation_Guessing,Java,"PA4 - Inflation & Guessing Game
===============================
A programming assignment, broken into two parts, to focus on terminal I/O (including formatting), conditional tests, state variables, mathematical expressions, and loops.
"
758,jennyqqu/inflation_index_webscrap,Python,
759,raj-rao-rr/Investor-Inflation-Expectations,MATLAB,"# Response of Investor Inflation Expectations

## 1	Introduction
The primary function of this project is to construct measures of inflation expectations from USD inflation options (i.e., caps and floors). We construct implied probability density measures from option butterflies and perform regression analysis examining the response of these expectations to changes in FOMC signaling and macroeconomic announcements.

## 2	Software Dependencies
*	MATLAB 2020a with at least 1 GB od memory with the following toolboxes installed (Econometrics, Optimization, Financial)
*	Python 3.6 with the following libraries installed (Pandas)
*	Bloomberg Professional Services for historical data

## 3	Code Structure

### 3.1 	`/Code` 

All project code is stored in the `/Code` folder for generating figures and performing analysis. Refer to the headline comment string in each file for a general description of the purpose of the script in question.

* `/.../lib/` stores functions derived from academic papers or individual use to compute statistical tests or perform complex operations. Please refer to the in function documentation for each `.m` function for granular detail on function arguments and returns. 
  
  * `cusip_generator.py` this file is preserved in the code library, but is not run when calling the `main.m` file. This scipt was used to develop the Excel files within the options folder and **SHOULD NOT** be run unless those files are missing or have been deleted.  

### 3.2 	`/Input`

Folder for all unfiltered, raw input data for financial time series.

* `/.../options/` stores inflation option price series for USD CPI caps and floors for YoY (year-over-year) and ZC (zero-coupon)
* `/.../swaps/`  stores inflation swap price series for USD, UK (United Kingdom), EUR (Euro-Zone), and FRA (France) structures
* ***tips-curve.csv*** historical timeseries data of the 2y-20y U.S. TIPS, taken from the Federal Reserve
* ***treasury-curve.csv*** historical timeseries data of the 1y-30y U.S. Treasury, taken from the Federal Reserve
* ***nakamura_steinsson_shocks.xlsx*** monetary shocks series taken from Nakamura a& Steinsson's 2018 paper entitled High Frequency Identification of Monetary Non-Neutrality: The Information Effect 
* ***bloomberg_economic_releases.csv*** historical data of economic announcements, including forecast average, standard deviation, etc.

### 3.3 	`/Temp`

Folder for storing data files after being read and cleaned of missing/obstructed values.

* `/.../options/` stores inflation option price series for USD CPI caps and floors for YoY (year-over-year) and ZC (zero-coupon)
* `DATA.mat` price series including data from FRED, monetary shocks, and U.S. GSW rates
* `OPTIONS.mat` option price series for USD inflation options covering both YoY and ZC caps and floors  
* `PROBA.mat` inflation probabilibies for options tenors (1-30y)
* `SWAPS.mat` inflation swap price series for USD, UK, EUR, and FRA inflation measures 

### 3.4 	`/Output`

Folder and sub-folders are provided to store graphs and tables for forecasts, regressions, etc.

* `/.../macro_response/` stores png images displaying the price effect that various macro-economic annoucements have on the inflation basis, we observe both the cummulative and the absolute change in the return series  
* `/.../market_implied_probability/` stores csv files with the implied inflation probabilites constructured from integer [butterfly-spreads](https://www.investopedia.com/terms/b/butterflyspread.asp#:~:text=A%20butterfly%20spread%20is%20an,move%20prior%20to%20option%20expiration.) as well as a smoothed cubic spline fit
* `/.../market_implied_probability_buckets/` stores png images of the implied inflation rate and implied inflation probabilites for particular rates (e.g. probability of inflation being 3% or higher)
* `/.../regressions/` stores coefficients for changes in volatility measures regressed on macro-economic announcements. For more detailed overview of the code responsible for constructing these measures refer to macro_regress.m.

## 4	Running Code

**Data Fields that are automatically updated from HTML connections**

* [The U.S. Treasury Yield Curve: 1961 to the Present](https://www.federalreserve.gov/pubs/feds/2006/200628/200628abs.html), taken from Federal Reserve website and stored under the `treasury-curve.csv` file in the `Input` folder
* [TIPS Yield Curve and Inflation Compensation](https://www.federalreserve.gov/data/tips-yield-curve-and-inflation-compensation.htm), taken from Federal Reserve website and stored under the `tips-curve.csv` file in the `Input` folder
* [Swanson's FOMC](http://www.socsci.uci.edu/~swanson2/papers/pre-and-post-ZLB-factors-extended.xlsx) shock series, taken from his [website](http://www.socsci.uci.edu/~swanson2/) under his published paper, “Measuring the Effects of Federal Reserve Forward Guidance and Asset Purchases on Financial Markets”  

**Data Fields that are manually updated by the user**

1. Login into your Bloomberg Professional Service account, you will need it to retrieve historical data. 
2. Check to see if the files `usd-inflation-zc-caps.xlsx` and `usd-inflation-zc-floors.xlsx` are stored within the `/Input/options/..` folder. If they are missing run the `cusip_generator.py` script to produce the required `.xlsx` files. If files are not missing, we then pull the data series using the spreadsheet builder tool found on the Bloomberg Tab, this follows for each `.xlsx` file:

    1. Clear all contents from the second `Sheet` of the excel workbook, if not already blank.
    2. Copy the **BBG_TICKER** list of Bloomberg IDs from the first `Sheet` and paste special the transpose in cell `A1` in the second `Sheet`.    
    3. Click on the Spreadsheet Builder and select the *Historical Data Table* under the ""Analyze Historical Data"" tab.
    4. Select all securities that you have copied and transposed over from the first `Sheet` as the *Selected Securities*.
    5. Search for the *Last Price* field from the search box and select it, this will return the last traded price for the security. 
    6. Enter the furthest date you would like to retrieve prices for, this is our start date.
    7. Select only to *Show Date* and *Show Security* from the preview screen and press the finish button.
    8. After all price series have been pulled, we will `Select All` contents within the second `Sheet` and `Copy + Paste Values` at the same location
    9. Finally, we complete a `Find and Replace` on the data removing null values (i.e., “#N/A N/A”) with empty spaces. This process will take a long time to complete, and may cause excel to not respond in the process, depending on the number of securities queried. In future this process WILL be improved 
  
5. Now open the `/Input/swaps/...` and systematically update each `.xlsx ` spreadsheet with the latest price series. Simply open a given spreadsheet, go to the Bloomberg tab on Excel and click the **Refresh Worksheets** icon to update the Bloomberg formulas and save spreadsheet. *Note if working on a separate server or cluster, these refreshed worksheets will need to be transferred to the designated workstation*. 
7. To update the data series entitled `bloomberg_economic_releases.csv`, refer to this [repo](https://github.com/raj-rao-rr/BBG-ECO-EXCEL). Simply transfer the `Output` series from that project to the `Input` folder of this repo, following the necessary steps outlined in that repo for replication. 
8. Download the updated [Nakamura and Steinsson (2018)](http://www.columbia.edu/~jma2241/replication/NS.xlsx) shocks from Miguel Acosta's website and rename the file as **nakamura_steinsson_shocks.xlsx**. In future this link may change so refer to [Emi Nakamura](https://eml.berkeley.edu/~enakamura/papers.html) personal website for further details. 
9. You may opt to run the `main.m` file in a MATLAB interactive session or via terminal on your local machine or HPC cluster.
```
%% e.g., running code via batch on the FRBNY RAN HPC Cluster
$ matlab20a-batch-withemail 5 main.m 
```

## 5	Possible Extensions

* Work to improve the method for collecting Bloomberg price data to be more efficient, and less suceptible to hard data querying limits
* Consider expanding work to construct smooth volatility smiles for inflation options. Refer to existing functions within the `.../Code/lib/` folder, namely inf_option_black_mdl.m and newton_raphson_iv.m for helpful information

## 6	Contributors
* [Rajesh Rao](https://github.com/raj-rao-rr) (Sr. Research Analyst)
"
760,DenisAzarenko777/Inflation-in-Russia,Python,
761,TheCheesyT/US-inflation-Data-Analysis,Jupyter Notebook,"# US-inflation-Data-Analysis
A short Python snippet analyzing current inflation data from multiple sources
"
762,cnordenlow/us-inflation-monitor,R,"### To be updated soon.
"
763,SShanshina/django-3-inflation,Python,
764,tryton-ar/account_inflation_adjustment_ar,Python,
765,Somreeta-maity/Inflation_data_analysis,Jupyter Notebook,
766,ervinkellym/GroceryInflationD3,HTML,
767,africadatahub/adh-inflation-database,Python,"# adh-inflation-database
Constructing a database of inflation in African countries

## Process

1. Find new datasets
2. Place these datasets in the relevant data folder
3. Run the relevant **adh_prep_** script
4. Run **adh_combine_data**
5. Push to github
6. Post updated CKAN dataset on CKAN
"
768,YohannTonnerre/laravue-inflation-rpg,PHP,"<p align=""center""><a href=""https://laravel.com"" target=""_blank""><img src=""https://raw.githubusercontent.com/laravel/art/master/logo-lockup/5%20SVG/2%20CMYK/1%20Full%20Color/laravel-logolockup-cmyk-red.svg"" width=""400""></a></p>

<p align=""center"">
<a href=""https://travis-ci.org/laravel/framework""><img src=""https://travis-ci.org/laravel/framework.svg"" alt=""Build Status""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/dt/laravel/framework"" alt=""Total Downloads""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/v/laravel/framework"" alt=""Latest Stable Version""></a>
<a href=""https://packagist.org/packages/laravel/framework""><img src=""https://img.shields.io/packagist/l/laravel/framework"" alt=""License""></a>
</p>

## About Laravel

Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:

- [Simple, fast routing engine](https://laravel.com/docs/routing).
- [Powerful dependency injection container](https://laravel.com/docs/container).
- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.
- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).
- Database agnostic [schema migrations](https://laravel.com/docs/migrations).
- [Robust background job processing](https://laravel.com/docs/queues).
- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).

Laravel is accessible, powerful, and provides tools required for large, robust applications.

## Learning Laravel

Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.

If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains over 1500 video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.

## Laravel Sponsors

We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the Laravel [Patreon page](https://patreon.com/taylorotwell).

### Premium Partners

- **[Vehikl](https://vehikl.com/)**
- **[Tighten Co.](https://tighten.co)**
- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**
- **[64 Robots](https://64robots.com)**
- **[Cubet Techno Labs](https://cubettech.com)**
- **[Cyber-Duck](https://cyber-duck.co.uk)**
- **[Many](https://www.many.co.uk)**
- **[Webdock, Fast VPS Hosting](https://www.webdock.io/en)**
- **[DevSquad](https://devsquad.com)**
- **[Curotec](https://www.curotec.com/services/technologies/laravel/)**
- **[OP.GG](https://op.gg)**

## Contributing

Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).

## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.

## License

The Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).
"
769,krb19-econ/EDA-Inflation-and-Unemployment,R,"# EDA-Inflation-and-Unemployment  
Explanatory Data Analysis of US inflation and Unemployment for the period 2000-2021  
  
Data obtained from Bureau of Labor Statistics  
  
Inflation  
Series Id:	CUUR0000SA0  
Not Seasonally Adjusted  
Series Title:	All items in U.S. city average, all urban consumers, not seasonally adjusted  				
Area:	U.S. city average  
Item:	All items  
Base Period:	1982-84=100  
Years:	2000 to 2021  
  
Unemployment  
Series Id:	LNS14000000  
Seasonally Adjusted  
Series title:	(Seas) Unemployment Rate  
Labor force status:	Unemployment rate  
Type of data:	Percent or rate  
Age:	16 years and over  
Years:	2000 to 2021    
"
770,entekang/Predict_inflation_Twitter,R,"
Using Twitter tweets and economic indicators to predict inflation in Canada
"
771,SolitaryIbra/Estimate-Cost-By-inflation,C++,
772,matheusmafraoandrade/Inflation-Index-Model-Comparison,Jupyter Notebook,"# Inflation-Index-Model-Comparison

### In this project I compare different econometric and machine learning models in order to compare their prediction performance for the Brazilian Inflation Index (IPCA).
### This can help companies manage its cash flow and optimally adjust its prices and cost structure.
"
773,SaleemZYounus/Python-Global-Inflation-Plot,Python,
774,zuoche/Inflation_AA-markers,R,"# ACPA-HLA-RA Project
# Inflation_AA-markers
# Test VIF of HLA amino acid markers
"
775,jdrsqrd/Simple-Inflation-Calculator,Objective-C,
776,countxyz/mta_fare_inflation,JavaScript,"# MTA Fare Inflation

Chart showing New York City MTA subway fare price from 1904 - 2012 and price adjusted for inflation (2012). Chart was created with D3.js and is a work in progress. 

## Chart

Chart can be viewed at http://mta-fare-inflation.herokuapp.com/

## Data

Data can be viewed at https://github.com/countxyz/mta_fare_inflation_data

## Sources

Not the best of sources, but I wanted to see if there was anything there. If I expand on what I've worked on so far, better sources will be used. Promise. ; )

http://www.silive.com/news/index.ssf/2009/03/a_history_of_mta_fare_hikes.html

http://www.westegg.com/inflation/

## License

Copyright (C) 2013-2014 Efren Aguirre <skeptoid@gmail.com>

This work is free. You can redistribute it and/or modify it under the
terms of the Do What The Fuck You Want To Public License, Version 2,
as published by Sam Hocevar. See 
[License](https://github.com/countxyz/d3_resume/blob/master/LICENSE.txt)
for more details.

<hr>

<a href=""http://www.wtfpl.net/""><img
       src=""http://www.wtfpl.net/wp-content/uploads/2012/12/wtfpl-badge-4.png""
       width=""80"" height=""15"" alt=""WTFPL"" /></a>
"
777,Chunyin1/interest-inflation-calculator,Ruby,"Just paste calc.rb into any ruby compiler and replace the following:

`$monthly = 200
	$rates = 1.02
	$inflation = 1.02
	$years_waiting_before_withdrawing = 20
	$years_saving_monthly = 10

  #Additional controls
	$bank_bonus = 1
`

with whatever you want.
If you wish to check a sum of money's worth in a few years time, simply set $monthly to sum/12 and $years_saving_monthly to 1.

Criticism and suggestions welcomed!
"
778,tdewolff/opencmiss-lung-inflation,Python,"# OpenCMISS lung inflation

## Running the example

    python src/python/lung_inflation.py

## License

Apache 2.0
"
779,DobyRahnev/staircase_meta_inflation,MATLAB,"Data and code for paper titled ""How experimental procedures influence estimates of metacognitive ability"" by Rahnev & Fleming.

Both data and code are in MATLAB (tested on version 2018b). Here is a guideline to the files/folders:
- analysis.m: the main executable file that performs all analyses
- data: folder with processed data (in .mat format)
- helperFunctions: helper functions for analysis and plotting
"
780,SanteriVtj/inflation-and-unemployment-lr,Jupyter Notebook,
781,PsicoThePato/RTT-inflation-calculator,C,"# RTT-inflation-calculator
EDII/TrabII 
"
782,ArjunVelayutham/Earnings-vs-Inflation,,"# Earnings-vs-Inflation
This compares the change in the earnings of Johnson &amp; Johnson to the inflation rate of USD.
---
title: ""EarningIncrease vs Inflation""
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown



```{r JohnsonJohnsonnumbers}
summary(JohnsonJohnson)
```

## Johnson&Johnson Quarterly Earnings per Share

At the moment the above numbers are, well, numbers. A plot that can more easily convey the information has been put below.
```{r JohnsonJohnson, echo=FALSE, fig.width = 10, fig.height = 7}
plot(JohnsonJohnson)
```
As you can see, the earnings per share of Johnson & Johnson have gone up dramatically over time. However, inflation should also be taken into consideration. If you didn't know, inflation is when, over time, money becomes worth less than it was before. When the inflation percent is high, that mean money has become less valuable, and when its low, a currency has become more valuable.

```{r US Dollar Inflation, echo=FALSE, fig.width = 10, fig.height = 7, message=FALSE}
library(rvest)
library(dplyr)
library(lubridate)
library(xts)
inflation_url <- ""http://inflationdata.com/inflation/Inflation_Rate/HistoricalInflation.aspx""

# read in the HTML table with the raw data
input.df <-
    read_html(inflation_url) %>%
    html_node(""table#GridView1"") %>%
    html_table(header = TRUE, trim = TRUE, fill = TRUE, dec = ""."") 

# convert character percentages to numeric
inflation.df <- as.data.frame(lapply(input.df, function(x) as.numeric(sub("" %"","""",x))/100))
inflation.df$Year <- as.integer(inflation.df$Year*100)
mean.inflation <- mean(inflation.df$Ave.*100,na.rm=TRUE)

plot(inflation.df$Year, inflation.df$Ave.*100, pch=20, type=""b"",
     xlab=""Year"",ylab=""Annual Avg. Inflation Rate"")
title(""Historical US Inflation Rates Since 1914"")

abline(h=0, lty=2, col=""black"")
abline(h=mean.inflation, lty=2, col=""red"")
text(1950, mean.inflation,labels=paste0(""Overall Average: "", round(mean.inflation, 2), ""%""), pos=3, col=""red"")
```
Inflation is compounded annually. If the US Dollar inflated 3% from 1960-1961, then $1 in 1960 is worth $1.03 in 1961. As the graph above shows, the annual inflation rate is about 3%. This means that the amount needed to buy things will, on average, increase by more each year. This also means that company earnings need to match that increase to remain as profitable as they were before.
"
783,anakov/Inflation-Growth-Mirror,xBase,
784,KorayKarakas/Numerically-Exploring-Cosmological-Inflation,Jupyter Notebook,"# Numerically-Exploring-Cosmological-Inflation

This code was purpose written for my MSc Dissertation: Numerically Exploring Cosmological Inflation. After comparison with observational data, the Starobinsky Inflation model was the most plausible. 
"
785,ross-k/bitcoin-vs-inflation-tracker,HTML,"# bitcoin-vs-inflation-tracker

This app lets users compare the price of BitCoin (BTC) with economic inflation to see if there is any correlation.

Does an increase in the US Dollar (USD) supply or the price of goods and services affect BTC price or trading volume? Trend lines can let users judge whether supply-chain issues and Federal Reserve (Fed) policies regarding the USD might be influencing BTC market behavior.

Minimum viable product will present ggplot line graphs of historical trends pulling inflation data from the Federal Reserve Bank of St Louis (FRED) and BitCoin data from CoinGecko.

Additional functionality might include the following: 

- Tracking the price of other commodities such as gold and 10-year Treasury notes;

- Tracking market average indices such as the Standard & Poor 500 (S & P 500) or Russell 2000;

- Allowing users to select different inflation measures such as the Consumer Price Index (CPI), Personal Consumption Expenditures (PCE), etc.;

- Allowing users to compare different data sources, e.g. the Federal Reserve Bank of St Louis (FRED) vs the Bureau of Labor Statistics (BLS).

- Adding value with other visualization options, if appropriate.
"
786,thanhqtran/chile-inflationtarget-ols,R,"The Impact of Chile’s Inflation Targeting Policy on Economic Growth (1991 - 2017)
=================================================================================

#### Tran Quang-Thanh

#### 2/9/2021

### Synopsis

**Original title:** [Nguyen, T. Hong., Nguyen, H. Cong., Tran, Q. Thanh., *Tác động của chính sách lạm phát mục tiêu đến tăng trưởng kinh tế Chile và bài học kinh nghiệm cho Việt Nam*, Tạp chí Kinh tế Đối ngoại, No.114/2019, p. 83 - 103](http://tracuutapchi.ftu.edu.vn/index.php/tcqlktqt/article/view/602)

**English title:** Nguyen, T. Hong., Nguyen, H. Cong., Tran, Q. Thanh., *The Impact of Chile’s Inflation Targeting Policy on Economic Growth and Lessons for Vietnam*, External Economics Review, No. 114/2019, p. 83-103

**Institution:** Foreign Trade University, Hanoi, Vietnam

**Introduction:** Chile has adopted the inflation targeting monetary policy framework since 1991. The output growth ever since has remained high and economic volatility reduced. In this framework, we employed an OLS model to confirm the impact of this change in policy conduct on economic growth. Our estimation shows that thanks to the policy, economic growth has been more than 20% higher. The data were collected from 1980q1 to 2017q4.

*The paper was done in Stata 12 software. Due to the growing popularity and reproducibility of R, the authors decide to redo the results in R and publish this report as a supplement to the original article. Due to the different programs being used and testing methodologies, there are some changes in numbers. Nevertheless, the authors claim that these discrepancies have no significant impact on the final conclusion.*

### Abstract

High inflation is always a threat to macroeconomic stability and long-term economic growth. Therefore, controlling inflation has become one of the most important tasks in many countries. In the early 1990s, a new trend in monetary policy conduct was formed. Numerous advanced industrial countries, as well as emerging market economies then, including Chile, started to shift towards an inflation targeting framework. From an emerging country with a high inflation rate of over 20%, Chile has become the most developed country in South America with an inflation rate of around 2% and high economic growth for many years.

How did Chile do under an inflation targeting regime? This paper will provide the background of inflation targeting policy, the performance of inflation targeting policy in Chile, and then evaluate the effect of inflation targeting policy on Chile’s economic growth. Base on this finding, the authors draw lessons for Vietnamese policymakers if they were to pursue this policy.

### The Model

To prove the effectiveness and impacts of inflation targeting policy, we used a simple OLS regression model with inflation targeting policy acting as a dummy variable. It takes the value of 0 during the period of no-inflation-targeting era and value of 1 during the period of inflation-targeting era. The choice of dependent and independent variables are based on [Ayisi, R.(2013)](https://thescipub.com/pdf/ajebasp.2013.22.28.pdf).

<img src=""https://render.githubusercontent.com/render/math?math=\ln(GDP)_t=\beta_0%2B\beta_1it_t%2B\beta_2ir_t%2B\beta_3r_t%2B\varepsilon_t"">

in which:

  Variable | Notation| Unit | Data source
  -------- | ------- | ---- | -----------
  natural log of quarterly output (ppp) | ln(gdp) | national currency | OECD, IMF
  inflation target | it | dummy | National Bank of Chile
  (observed) inflation rate | ir | percent | OECD
  unemployment | u | percent | OECD, various
  real interest | r | percent | OECD, various

**Time periods**: 1980q1 to 2017q4

**Dataset**:
[link](https://raw.githubusercontent.com/thanhqtran/chile-inflationtarget-ols/main/chile_data.csv) (discontinued)

### Regression Results

#### Read data file

``` {.r}
library(curl)
df <- read.csv( curl(""https://raw.githubusercontent.com/thanhqtran/chile-inflationtarget-ols/main/chile_data.csv""), header=TRUE, stringsAsFactors=FALSE)
df$lngdp <- log(df$gdp)
```

#### Plotting

The vertical line divides the time into 2 parts. The part on the left
represents the era before the adoption of inflation targeting policy,
whereas the part on the right represents the era after the adoption of
inflation targeting policy.

Inflation rate:

```{.r}
library(ggplot2)
library(dplyr)
df$date = seq(as.Date('1980-03-01'), as.Date('2017-12-01'), by = '3 month')
df2 <- data.frame(df)
p = ggplot() + 
    geom_line(data = df2, aes(x = date, y = ir), color = ""blue"") +
    geom_vline(xintercept = as.numeric(as.Date(""1991-03-01""))) +
    xlab('time')+ylab('inflation rate')
print(p)
```

![inflation rate history](https://i.imgur.com/oVpx9ew.png)

Output growth:

```{.r}
library(ggplot2)
p = ggplot() + 
    geom_line(data = df2, aes(x = date, y = lngdp), color = ""blue"") +
    geom_vline(xintercept = as.numeric(as.Date(""1991-03-01""))) +
    xlab('time')+ylab('log(gdp)')
print(p)
```

![real gdp](https://i.imgur.com/5AeJES7.png)

Interest rate (blue) and unemployment (red)

```{.r}
library(ggplot2)
p = ggplot() + 
    geom_line(data = df2, aes(x = date, y = r), color = ""blue"") +
    geom_line(data = df2, aes(x = date, y = u), color = ""red"") +
    geom_vline(xintercept = as.numeric(as.Date(""1991-03-01""))) +
    geom_boxplot() +
    xlab('time')+ylab('percent')
print(p)
```

![interest rate and unemployment](https://i.imgur.com/jXe6hD9.png)

It seems that the policy was very effective to stabilize the once highly
volatile variables like interest rate and inflation rate.

#### Descriptive summary

``` {.r}
library(stargazer)
```

```R
## 
## Please cite as:

##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.

##  R package version 5.2.2. https://CRAN.R-project.org/package=stargazer
```

``` {.r}
stargazer(df, type = ""text"")
```

```R
## 
## =======================================================================
## Statistic  N     Mean      St. Dev.    Min   Pctl(25) Pctl(75)    Max  
## -----------------------------------------------------------------------
## gdp       152 207,148.700 101,672.600 74,397 109,182  292,551.5 393,257
## ir        152   10.350       9.457    0.006   3.170    17.156   39.012 
## u         152    9.007       2.917    5.505   6.623    10.295   19.974 
## r         152   15.257      13.360    0.483   4.227    23.240   60.640 
## it        152    0.711       0.455      0       0         1        1   
## lngdp     152   12.106       0.540    11.217  11.601   12.586   12.882 
## -----------------------------------------------------------------------
```

Chile started to adopt the inflation targeting framework from 1991. As the result, there are 1/3 of the data lie during the no-inflation-targeting era (1980q1 - 1990q4) while the rest (2/3 of the data) lie during the inflation-targeting era (1991q1 - 2017q4). Output growth during this period was remarkably high with approximately 12% per annum.

#### Unit Root Test

Since the time series data were used, we need to perform unit root test.
Test for Unit Root: Augmented Dickey-Fuller Test
Null Hypothesis: there is a unit root.

-   For output growth: **log(gdp)**

``` {.r}
library(urca)
summary(ur.df(df$lngdp, type = ""none"",lags=1))
```

    ## 
    ## ############################################### 
    ## # Augmented Dickey-Fuller Test Unit Root Test # 
    ## ############################################### 
    ## 
    ## Test regression none 
    ## 
    ## 
    ## Call:
    ## lm(formula = z.diff ~ z.lag.1 - 1 + z.diff.lag)
    ## 
    ## Residuals:
    ##       Min        1Q    Median        3Q       Max 
    ## -0.041669 -0.005972  0.000445  0.008199  0.031734 
    ## 
    ## Coefficients:
    ##             Estimate Std. Error t value Pr(>|t|)    
    ## z.lag.1    0.0006027  0.0001112   5.420 2.37e-07 ***
    ## z.diff.lag 0.3026977  0.0774644   3.908 0.000141 ***
    ## ---
    ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
    ## 
    ## Residual standard error: 0.0133 on 148 degrees of freedom
    ## Multiple R-squared:  0.4204, Adjusted R-squared:  0.4126 
    ## F-statistic: 53.67 on 2 and 148 DF,  p-value: < 2.2e-16
    ## 
    ## 
    ## Value of test-statistic is: 5.4195 
    ## 
    ## Critical values for test statistics: 
    ##       1pct  5pct 10pct
    ## tau1 -2.58 -1.95 -1.62

We tested the stationary property of ln(gdp) with 1 period of lag. The
result shows that the data is stationary.

-   For inflation rate: **ir**

``` {.r}
summary(ur.df(df$ir, type = ""trend"",lags=1))
```

    ## 
    ## ############################################### 
    ## # Augmented Dickey-Fuller Test Unit Root Test # 
    ## ############################################### 
    ## 
    ## Test regression trend 
    ## 
    ## 
    ## Call:
    ## lm(formula = z.diff ~ z.lag.1 + 1 + tt + z.diff.lag)
    ## 
    ## Residuals:
    ##     Min      1Q  Median      3Q     Max 
    ## -7.8348 -0.9869 -0.1185  0.9119  7.5657 
    ## 
    ## Coefficients:
    ##              Estimate Std. Error t value Pr(>|t|)    
    ## (Intercept)  3.294020   0.763125   4.316 2.91e-05 ***
    ## z.lag.1     -0.156145   0.029446  -5.303 4.14e-07 ***
    ## tt          -0.023702   0.006263  -3.784 0.000224 ***
    ## z.diff.lag   0.522924   0.067912   7.700 1.89e-12 ***
    ## ---
    ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
    ## 
    ## Residual standard error: 1.968 on 146 degrees of freedom
    ## Multiple R-squared:  0.3498, Adjusted R-squared:  0.3365 
    ## F-statistic: 26.19 on 3 and 146 DF,  p-value: 1.3e-13
    ## 
    ## 
    ## Value of test-statistic is: -5.3028 9.793 14.38 
    ## 
    ## Critical values for test statistics: 
    ##       1pct  5pct 10pct
    ## tau3 -3.99 -3.43 -3.13
    ## phi2  6.22  4.75  4.07
    ## phi3  8.43  6.49  5.47

The inflation rate data is stationary.

-   For unemployment rate: **u**

``` {.r}
summary(ur.df(df$u, type = ""trend"",lags=1))
```

    ## 
    ## ############################################### 
    ## # Augmented Dickey-Fuller Test Unit Root Test # 
    ## ############################################### 
    ## 
    ## Test regression trend 
    ## 
    ## 
    ## Call:
    ## lm(formula = z.diff ~ z.lag.1 + 1 + tt + z.diff.lag)
    ## 
    ## Residuals:
    ##     Min      1Q  Median      3Q     Max 
    ## -3.7418 -0.3899 -0.0244  0.3080  7.9224 
    ## 
    ## Coefficients:
    ##              Estimate Std. Error t value Pr(>|t|)   
    ## (Intercept)  1.176767   0.430856   2.731  0.00709 **
    ## z.lag.1     -0.098547   0.032976  -2.988  0.00329 **
    ## tt          -0.004098   0.002191  -1.870  0.06347 . 
    ## z.diff.lag   0.197955   0.081179   2.438  0.01595 * 
    ## ---
    ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
    ## 
    ## Residual standard error: 0.894 on 146 degrees of freedom
    ## Multiple R-squared:  0.07846,    Adjusted R-squared:  0.05952 
    ## F-statistic: 4.143 on 3 and 146 DF,  p-value: 0.007489
    ## 
    ## 
    ## Value of test-statistic is: -2.9884 3.019 4.4666 
    ## 
    ## Critical values for test statistics: 
    ##       1pct  5pct 10pct
    ## tau3 -3.99 -3.43 -3.13
    ## phi2  6.22  4.75  4.07
    ## phi3  8.43  6.49  5.47

The unemployment rate data is stationary at 5% confidence.

-   For real interest rate: **r**

``` {.r}
summary(ur.df(df$r, type = ""trend"",lags=1))
```

    ## 
    ## ############################################### 
    ## # Augmented Dickey-Fuller Test Unit Root Test # 
    ## ############################################### 
    ## 
    ## Test regression trend 
    ## 
    ## 
    ## Call:
    ## lm(formula = z.diff ~ z.lag.1 + 1 + tt + z.diff.lag)
    ## 
    ## Residuals:
    ##      Min       1Q   Median       3Q      Max 
    ## -10.6293  -1.5222  -0.2216   1.1359  25.5216 
    ## 
    ## Coefficients:
    ##             Estimate Std. Error t value Pr(>|t|)    
    ## (Intercept)  6.87450    1.73820   3.955 0.000119 ***
    ## z.lag.1     -0.19060    0.04597  -4.146 5.72e-05 ***
    ## tt          -0.05257    0.01399  -3.757 0.000248 ***
    ## z.diff.lag   0.03117    0.08069   0.386 0.699821    
    ## ---
    ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
    ## 
    ## Residual standard error: 4.07 on 146 degrees of freedom
    ## Multiple R-squared:  0.1093, Adjusted R-squared:  0.09095 
    ## F-statistic: 5.969 on 3 and 146 DF,  p-value: 0.0007242
    ## 
    ## 
    ## Value of test-statistic is: -4.1457 5.8411 8.7342 
    ## 
    ## Critical values for test statistics: 
    ##       1pct  5pct 10pct
    ## tau3 -3.99 -3.43 -3.13
    ## phi2  6.22  4.75  4.07
    ## phi3  8.43  6.49  5.47

It is clear that the interest rate is non-stationary. This might be due
to the fact that the absolute values were highly volatile. To reduce the
volatility, we proposed a better measurement by log-linearizing it,
which gives us the following result.

``` {.r}
df$lnr <- log(df$r)
summary(ur.df(df$lnr, type = ""trend"",lags=1))
```

    ## 
    ## ############################################### 
    ## # Augmented Dickey-Fuller Test Unit Root Test # 
    ## ############################################### 
    ## 
    ## Test regression trend 
    ## 
    ## 
    ## Call:
    ## lm(formula = z.diff ~ z.lag.1 + 1 + tt + z.diff.lag)
    ## 
    ## Residuals:
    ##      Min       1Q   Median       3Q      Max 
    ## -0.98824 -0.11818  0.03127  0.11624  1.14637 
    ## 
    ## Coefficients:
    ##               Estimate Std. Error t value Pr(>|t|)    
    ## (Intercept)  0.5807711  0.1418608   4.094 6.99e-05 ***
    ## z.lag.1     -0.1488570  0.0354596  -4.198 4.66e-05 ***
    ## tt          -0.0032675  0.0008515  -3.837 0.000185 ***
    ## z.diff.lag   0.3051266  0.0774137   3.942 0.000125 ***
    ## ---
    ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
    ## 
    ## Residual standard error: 0.2345 on 146 degrees of freedom
    ## Multiple R-squared:  0.1607, Adjusted R-squared:  0.1435 
    ## F-statistic:  9.32 on 3 and 146 DF,  p-value: 1.119e-05
    ## 
    ## 
    ## Value of test-statistic is: -4.1979 6.0143 8.928 
    ## 
    ## Critical values for test statistics: 
    ##       1pct  5pct 10pct
    ## tau3 -3.99 -3.43 -3.13
    ## phi2  6.22  4.75  4.07
    ## phi3  8.43  6.49  5.47

After log-linearization, the interest rate variable no longer has unit root.

*To preserve the integrity of the original research, we ran 2 models: one with the original interest rate (r) and the other with log(r), then compared the results.*

#### Regression results

``` {.r}
model1 <- lm(lngdp ~ it + ir + u + r, data=df)
df$lnr <- log(df$r)
model2 <- lm(lngdp ~ it + ir + u + lnr, data=df)
stargazer(model1, model2, type = ""text"")
```

    ## 
    ## ===========================================================
    ##                                    Dependent variable:     
    ##                                ----------------------------
    ##                                           lngdp            
    ##                                     (1)            (2)     
    ## -----------------------------------------------------------
    ## it                                0.188**       0.198***   
    ##                                   (0.073)        (0.060)   
    ##                                                            
    ## ir                               -0.020***      -0.014***  
    ##                                   (0.003)        (0.003)   
    ##                                                            
    ## u                                -0.038***      -0.051***  
    ##                                   (0.008)        (0.006)   
    ##                                                            
    ## r                                -0.015***                 
    ##                                   (0.002)                  
    ##                                                            
    ## lnr                                             -0.226***  
    ##                                                  (0.019)   
    ##                                                            
    ## Constant                         12.743***      13.083***  
    ##                                   (0.124)        (0.110)   
    ##                                                            
    ## -----------------------------------------------------------
    ## Observations                        152            152     
    ## R2                                 0.868          0.908    
    ## Adjusted R2                        0.865          0.906    
    ## Residual Std. Error (df = 147)     0.199          0.166    
    ## F Statistic (df = 4; 147)        242.324***    363.699***  
    ## ===========================================================
    ## Note:                           *p<0.1; **p<0.05; ***p<0.01

#### Interpretation

-   All variables are statistically significant. Looking at the
    R-squared statistics, around 86.8 to 90.8 percent of the changes in output growth can be explained by the chosen independent variables.

-   Notably, the model with log-linearized real interest rates produces higher statistical significance.

-   With the coefficient of 0.198, this means that thanks to the existence of the inflation targeting policy, output in Chile has been exp(0.198)= 1.22 times as high as in the case of no policy.

### Reference:

-   Ayisi, R. (2013), ‘Single-digit inflation targeting and economic growth’, American Journal of Economics and Business Administration, No 5, pages 22-28
-   Banco Central de Chile (2001), ‘Indicadores económicos y sociales de Chile 1960-2000’
-   Morande, F. (2001). A Decade of Inflation Targeting in Chile: Developments, Lessons, and Challenges (No. 115). Banco Central de Chile.
"
787,toribasso/Inflation-and-Wages,,
788,amarcerim/bawag-inflation-calculator,CSS,
789,matthieufisher/2022-Inflation-Forecasting-Project,,"
"
790,yg2804/analysis_of_inflation_dynamics,,
791,slangcake/Inflation_demand_supply_decomposition,R,
792,sasikirankaye/Global-inflation-rate-analysis,Jupyter Notebook,"# Global-inflation-rate-analysis

Inflation as measured by the consumer price index reflects the annual percentage change in the cost to the average consumer of acquiring a basket of goods and services that may be fixed or changed at specified intervals, such as yearly. The Laspeyres formula is generally used.
World inflation rate for 2020 was 1.94%, a 0.21% decline from 2019.
World inflation rate for 2019 was 2.15%, a 0.27% decline from 2018.
World inflation rate for 2018 was 2.42%, a 0.24% increase from 2017.
World inflation rate for 2017 was 2.18%, a 0.69% increase from 2016.

# Problem Statement
To Predict the inflation rates based on the data between 1981-2020.

## Important Insigts

Global inflation rate from 1981 to 2020
This statistic shows the global inflation rate compared to  year from 1981 to 2020*. In 1981, the inflation rate worldwide amounted to approximately 12.66.
Inflation rates worldwide
Inflation is often defined as the continued increase in the general level of prices of goods and services. Global economy has suffered immensely since the global financial crisis in 2008 and that has caused global inflation to increase. The highest recorded global inflation of the past decade in comparison with the previous year took place in 2008, when it increased by more than 6.4 percent in comparison to the global inflation rate in 2007.
The global regions with the highest year-on-year inflation rate in 2014 are the Middle East and North Africa, as well as Africa Sub-Sahara. The nations in the world with the highest inflation rates in 2015 were Venezuela and Ukraine. Interestingly, in 2015, the inflation rate in Venezuela was approximately three times as high as the inflation rate in Ukraine.
As a result of a global economic downturn, the lack of a sufficient central bank, and the rise in interest rates, the cost of living in the Middle East has also become much higher than in industrialized countries. The inflation rate in industrialized countries in 2015 was just about 0.35 percent. Meanwhile, the inflation rate in the Middle East and North Africa amounted to more than 6.2 percent.
Due to economical progress following the global financial crisis, developed countries in the European Union and the euro area set forth economic strategies to strengthen their economy and maintain a stable economy. In addition, stagnant worker wages and a hesitation from banks to easily distribute loans to ordinary citizens have also caused the inflation rate in the euro zone to be relatively low. In 2015, Grenada and Switzerland reported the lowest inflation rates in 2015 in comparison to the previous year.


### Global_Inflation_in_different_years

<img src=""https://github.com/sasikirankaye/Global-inflation-rate-analysis/blob/main/images/Inflation_in_different_years.png"">
 The inflation peaks observed in the years 1981,1994,2008

### Inflation_in_different_yeras_bar
<img src=""https://github.com/sasikirankaye/Global-inflation-rate-analysis/blob/main/images/Inflation_in_different_yeras_bar.png"">


### inflation_of_countries
<img src=""https://github.com/sasikirankaye/Global-inflation-rate-analysis/blob/main/images/inflation_of_countries.png"">

South asia region affected mostly by inflation


# Predictive Modelling results
In order to find a decent model to predict sales we performed an extensive search of various machine learning models(Gradient boosting trees,linear regression, knn etc) available in Python.Random forest regressor algorithm performed particularly well. 

### Scores
<img src=""https://github.com/sasikirankaye/Global-inflation-rate-analysis/blob/main/images/scores.png"">
Random forest algorithm performed well
"
793,gobied/LargeFieldInflation,C++,
794,psylabs/Food-Inflation-Index,,"# Food Inflation Index
"
795,kyranjamie/uk-inflation-calculator,Python,"uk-inflation-calculator
=======================
"
796,cristinagf/pyInflationHousing,Jupyter Notebook,"# pyInflationHousing
Python code to analyze data - inflation effect on housing prices
"
797,mouryaa/fandango-movie-inflation-analysis,Jupyter Notebook,"# fandango-movie-inflation-analysis
Walt Hickey from FiveThirtyEight published a popular article where he presented strong evidence which suggest that Fandango's movie rating system was biased and dishonest. Fandango's officials replied that the biased rounding off was caused by a bug in their system rather than being intentional, and they promised to fix the bug as soon as possible.  This project is to sample and analyze popular movies between two years, one before the fix and one after, to determine whether the fix was implemented and there is a difference in ratings.
"
798,sidchakravarty79/Growth-Inflation-Model,,"# Growth-Inflation-Model
GIP model for asset allocation
Growth, Inflation, Policy (GIP) predictive model is aimed at codifying the investment principles of Bridgewater founder Ray Dalio. The objective of the project is to predict two factors: economic growth and inflation that are central to forecasting financial market returns. The model will track year-over-year, rate of change of various macro factors to better understand the big ""MACRO setup"" and assist with asset allocation.
"
799,dbacy/GermanInflationRates,R,"# GermanInflationRates
German Inflation Rates from yr 2008 - 2017
"
800,naomi172839/DATA610Inflation,Python,
801,jshapi16/gdp-income-inflation-dashboard,Python,"# gdp-income-inflation-dashboard
Understanding income change over time through the lens of GDP, inflation, and consumer expenses.
"
802,masuta16/WebcrawlerOnlineInflation,Python,"# Table of Contents 
1. [Introduction](README.md#introduction)
2. [Pipeline](README.md#pipeline)
3. [Requirements](README.md#requirements)
4. [Environment Set Up](README.md#Environment%20Setup)
5. [Repository Structure and Run Instructions](README.md#Repository%20Structure%20and%20Run%20Instructions)


# Introduction
**Price Crawler: Tracking Price Inflation**

This is a project completed in 3 weeks during the Insight Data Engineering Program (New York, 20B Session). The goal of this project is to calculate inflation rates from first principles.
That means calculating inflation rate using prices of goods and services sold online.

In this project, I built a pipleine to use petabytes of web page data contained in the [Common Crawl](https://commoncrawl.org/), an archive of web page content 
to calculate inflation rates. The results can be used to enhance investment strategies or by businesses in deciding the cost of products. A sample batch job has 
been executed using online laptop prices ($500-$800) and the inflation rate in 2019 is measured to be 4.8% which is more than double the annual inflation rate of 
2.3% reported by Bureau of labor statistics for 2019. A recording of the WebUI is also available [here](https://www.youtube.com/watch?v=mNcodsH5254&feature=youtu.be). 

# Pipeline
I built a data pipeline that utilizes petabytes of publicly available web page data to **Calculate Inflation rates from first principles (Prices of Products)**

![pipeline](static/crawler_pipeline.png)

1. AWS Athena to query indexed WARC Files using HTTP header information in WARC Files
    * Scan 0(100 GB) data instead of PB
2. **Keys** to webpages of interest saved in parquet files on S3
3. Parquet + WARC input to Spark with distributed processing over O(10 GB) data per job
4. Cleaning, filtering and aggregating Product and Price tables with Pandas in Python
5. Plotting and tracking price trends with Dash

# Requirements

1)  S3:  Set up and S3 bucket.  In this case:  s3://athena-east-2-usama/
2)  Athena:  Open Athena on AWS.  Follow the instructions to set up ""Running SQL Queries with Athena"" here:  https://commoncrawl.org/2018/03/index-to-warc-files-and-urls-in-columnar-format/
3)  Run Athena with the example in https://github.com/uhussain/WebCrawlerForOnlineInflation/athena/athena_instructions.txt
4)  Start EMR in Amazon with Spark and Hadoop.  SSH in.
5)  Add the following to ~/.bashrc and source ~/.bashrc:
export SPARK_HOME=/usr/lib/spark
export PYTHONPATH=$SPARK_HOME/python/lib/py4j-0.10.7-src.zip:$PYTHONPATH  
export PYTHONPATH=$SPARK_HOME/python:$SPARK_HOME/python/build:$PYTHONPATH
6)  Install the following on EMR (both master and workers) with ""pip install --user"":  warcio, boto3, bs4, nltk 
7)  Execute main.py in master node.

**Languages** 
* Bash
* Python 3.7
* Pandas

**Technologies**
* Spark
* AWS Athena
* Dash/Plotly

**Third-Party Libraries**
* AWS CLI

# Environment Setup
Install and configure [AWS](https://aws.amazon.com/cli/) and the open-source tool and setup an AWS EMR cluster. At launch time, emr-5.30.0 version was used.
It comes with Python version 3.7.6, pyspark version 2.4.5-amzn-0 and Zeppelin 0.8.2.


**AWS EMR Clusters Setup**

Currently using only one master node and two core nodes (can be scaled up)

# Repository Structure and Run Instructions


`./athena/` contains instructions on how to query common crawl data with AWS Athena .

`./spark/` contains the main.py spark script to launch spark jobs using the output from athena query

```
spark-submit ./spark/main.py -in walmart_laptops_2018 -o walmart_parquet_2018
```

`./pandas/`contains python script to clean the output from spark and provide csv file to dashapp/app.py

```
python3 pandas/cleaner.py
```

`./dashapp/` contains a dash app to visualize trends in online prices in laptops across time

```
python3 dashapp/price_tracker.py
```

# Development work
I built a rapid prototype of the pipeline during the first week to understand the scope of the problem and learn textual and HTML content analysis. 
Ingested data from AWS S3, cleaned and filtered with single-threaded python script and aggregated product information in a local Amazon DyanmoDB database

`./prototype/` contains all python configuration files and scripts for running the project locally and output product info to a local amazon dynamoDB table

Languages 
* Bash
* Python 3.7

Technologies

* Amazon DynamoDB

"
803,worldOneo/HypixelInflationTracker,Java,
804,MartinRV19/arg-inflation-prediction-2022,Jupyter Notebook,"# Predicción de la inflación en Argentina para el año 2022
 
## Con datos de 2004 a 2020 y un modelo univariado de proceso autorregresivo y media móvil se predice los valores de 2021 y 2022.   

### Notebook: https://nbviewer.org/github/MartinRV19/arg-inflation-prediction-2022/blob/main/inflacion_pred.ipynb

#### ·       Inflación acumulada 2021: 50.8%
#### ·       Predicción de inflación acumulada 2021 con ARMA(1,1): 51.5%
#### ·       Predicción de inflación acumulada 2022 con ARMA(1,1): 54.93%
"
805,vivekkanna26/Turkey-Food-Price-Inflation,,
806,DaviMAC02/BRL-INFLATION-RATE-ANALYSIS,Jupyter Notebook,"Loading...
"
807,gitmainaks/Inflation-Forecasting-using-R,R,"# Inflation-Forecasting-using-R
Forecasting Whole Sale Price Index of the first four months of year 2022 of India, based on the information of monthly WPI from April 2012 to December 2021.
"
808,ArhamChoudhury/01_Unexpected_Inflation,R,
809,JohnFeola/INFLATION-TRACKER2,,# INFLATION-TRACKER2
810,punnal/Measuring-Latency-inflation,Jupyter Notebook,"# Measuring-Latency-inflation
- Compile and run rtt.p4(threshold=0) or rtt_tail.p4(threshold=2seconds) on a tofino switch
- Populate tables for p4 program to support mirroring.
- Use the scripts in Control directory to generate test cases, send and recieve custom traffic.
- Evaluate the system using evaluate.ipynb notebook
"
811,Mdjunaid04/Inflation-Rate-in-India,Jupyter Notebook,
812,antonioACR1/predicting-inflation-with-arima,R,
813,PihuReet/R_CompareInflation,R,# R_CompareInflation
814,EducationShinyAppTeam/Variance_Inflation_Factor,R,
815,ChrisOrgan/Generalized-Variance-Inflation-Factor,Python,"# Generalized-Variance-Inflation-Factor GVIF)
- Variance inflation factors are not fully applicable to models that include a set of one-hot encoded regressors (i.e. recoded multinomial categorical variables), or polynomial regressors.
- Generalized VIF (GVIF): Fox and Monette 1992; is a solution
    - GVIF = det(R11) * det(R22) / det(R)
        where:
            R11 is the correlation matrix for X1
            R22 is the correlation matrix for X2 (rest of independent variables)
            R   is the correlation matrix for all variables in the whole design matrix X, excluding the constant (b0)
    - GVIF ** (1 / (2 * Df)) ** 2 is used as the usual VIF rule of thumb
        - E.g., [GVIF ** (1 / (2 * Df)) ** 2] < 5 is equivalent to VIF < 5 for the continuous (i.e. non-categorical) variables
"
816,kt1720/Phillips-curve-and-inflation,HTML,"# Expectations-augmented Phillips curve and Inflation forecast

433 Final Project

The first part of the analysis investigates the stability of the expectation-augmented Phillips curve from 1985-now: 

* [Expectation-augmented Phillips curve](https://kt1720.github.io/Phillips-curve-and-inflation/Expectation-augmented-Phillips-curve.html)

The second part of the analysis tries to forecast (Using time-varying conditional mean and conditional heteroskedasticity model) the US inflation rate for the next four quarters:

* [Inflation forecast](https://github.com/kt1720/Phillips-curve/blob/main/Forecasting-Inflation.md)
"
817,immanuelsakkilian/Inflation-Data-Analysis,Jupyter Notebook,"# Inflation-Prediction-in-India-with-Machine-Learning-
A study to find out the correlation inflation and CPI(Consumer Price Index).We have implemented various machine learning algorithms to find out pattern of rate of inflation over the time.Finally by using Karl Pearsons coefficient we have been successful in finding out top 5 factors which has affected inflation.
"
818,dzolotor/inflation_is_theft,Jupyter Notebook,
819,jessems/WeimarInflationData,,"# Weimar Inflation Data

This data represents the exchange rate between the German Mark and gold during the period of hyperinflation in the Weimer Republic (1918-1923).

Note that the reporting interval becomes smaller as the inflation picks up. Also, there are numerous missing dates in the reporting.

# Source

This data is a digitized version of the data found in *Deutsches Reichsgesetzblatt Teil I (1925) p133-135* made available by the Austrian National Library here: https://alex.onb.ac.at/cgi-content/alex?aid=dra&datum=1925&page=185&size=45
"
820,AndreasLM03/Inflation-Data-Scraper,Python,"# Inflation-Data-Scraper
Inflation data are relevant in times of large monetary payouts to show the risk of demonetization. Furthermore, the gold price correlates with the real interest rate, which is determined by the official bank rate and the inflation rate.


Consumer price inflation cannot be predicted into the future therefore you should never base your MONEY investment on the inflation rate


<img src= ""InflationRate-Month united-states.png"" width=""800"">

How is inflation caused?
Money is created only when loans are made possible and or when central banks buy bonds themselves.

Wages: when the economy is running, more jobs are needed, the more labor in demand, the better the negotiating chances to get high wages.

More retirees lead to more inflation: less available workforce, with the same production input. Workers have to perform more, therefore higher wages. 

Technological progress: Personnel input can be saved, this also leads to inflation.





To download the following data I found a website where monthly inflation data is listed in tables. Using a Python script, the monthly inflation data for different countries and given years are downloaded, saved to a CSV file and then visualized.

# Initialization

````python

from pandas_datareader import data as pdr
import yfinance as yf
import matplotlib.pyplot as plt
from datetime import date
from dateutil.relativedelta import relativedelta
import pandas as pd
import numpy as np
import os, sys
import time
import os
from os import makedirs
import shutil
from currency_converter import CurrencyConverter
import quandl as ql
from bs4 import BeautifulSoup
import requests
import re
import datetime
import matplotlib.pyplot as plt
import datetime
%matplotlib inline


UnixTime = int(time.time())
currentdate = datetime.datetime.fromtimestamp(UnixTime).strftime('%Y-%m-%d')

Grundpfad = 'C:/*****/Scraping_InflationsData/'
URL = 'https://www.inflation.eu/en/inflation-rates/LAND/historic-inflation/cpi-inflation-LAND-JAHR.aspx'
````

# Webscraping

````python
############ Variables ##########
Countries = ['germany', 'great-britain', 'france', 'united-states']
Jahre = list(range(1956, 2021))

data = {
'Year': [],
'Month': [],
'Day': [],
'Country': [],
'Inflation-Rate': []}
df = pd.DataFrame(data)

for Country in Countries:
    for Jahr in Jahre:
        #print(Jahr)
        neue_URL = URL.replace(""JAHR"", str(Jahr))
        neue_URL = neue_URL.replace(""LAND"", Country)
        ## get Source-Code
        response = requests.get(neue_URL).text
        soup = BeautifulSoup(response, 'html.parser')

        # find a few relevant markers
        soup2 = str(soup)
        ind1=soup2.find('<table cellpadding=""2"" cellspacing=""0"" style=""width:100%;border:1px solid #CCCCCC;"">') # gebe Zahl aus ab wann in dem Char soup der Begriff fällt
        ind2=soup2.find('<h2 style=""margin:16px 0px 4px 0px;"">Historic CPI inflation ') # gebe Zahl aus ab wann in dem Char soup der Begriff fällt
        a = soup2[ind1:ind2] # zeige soup2 von marker 1 bis marker 2 an | find char in api char

        # make a beautifulsoup file again
        soup3 = BeautifulSoup(a)

        # extract table content
        Month = 1
        for tr in soup3.find_all('tr')[1:]: #header [1:]
            tds = tr.find_all('td')
            #print(str(Jahr) + '-' + str(Month))
            #print(tds[4].text[:-3]) # zeige spaltenweise [4] Inhalte an    
            data = {
            'Year': [Jahr][0],
            'Month': [Month][0],
            'Day': [1][0],
            'Country': [Country][0],
            'Inflation-Rate': [tds[4].text[:-3]][0]}
            df = df.append(data, ignore_index=True)
            Month = Month + 1

fmt = '%1.0f', '%1.0f', '%1.0f', '%s', '%s'
Datenpfad = Grundpfad + currentdate + '_Inflationsdaten.csv'
np.savetxt(Datenpfad, df, delimiter="","", fmt=fmt)
````

---
## Output csv file

    
| YEAR | MONTH | DAY | Country | InflationRate |
|     :---:      | :---:      | :---:      | :---:      | :---:  | 
| 1956 | 1 | 1 | germany | 1.25 |
| 1956 | 2 | 1 | germany | 2.19 |
| 1956 | 2 | 1 | germany | 3.76 |
| ... | ... | ... | ... | ... | ... |
| 2020 | 12 | 1 | united-states | 1.36 |



# Visualization of monthly data 

````python
Datenpfad = Grundpfad + currentdate + '_Inflationsdaten.csv'
# df = pd.read_csv(filename, sep='\t', encoding = 'utf-16',nrows=10,  index_col=""CASE"") #Filename, Tabulator, Textcodierung, lade nur die ersten 10 Reihen ein, nehme Case als Index
df = pd.read_csv(Datenpfad, sep=',', header=None)
df.columns = ['Year', 'Month', 'Day', 'Country', 'InflationRate']

#### neue Zeitachse
date = pd.to_datetime(dict(year=df.Year, month=df.Month,  day=df.Day)) # convert coloums format into python understandable datetimeframe
df.set_index(date, inplace = True) # set new index



###### country sorted
Countries = ['germany', 'great-britain', 'france', 'united-states']
Country = Countries[3]

###### plot 
fig, ax1 = plt.subplots(figsize=(20,4.5))
ax1.grid(color='black', linestyle='--', linewidth=0.05)
ax1.title.set_text('Monthly Inflation-Rate in '+ Country)
ax1.set_xlabel('date')
ax1.set_ylabel('Inflationsrate')
ax1.plot(df[(df[""Country""] == Country)].InflationRate, label='Inflation-Rate')
fig.tight_layout()  # otherwise the right y-label is slightly clipped
plt.savefig(""InflationRate-Month "" + Country + "".png"", bbox_inches='tight')
````

<img src= ""InflationRate-Month united-states.png"" width=""800"">
<img src= ""InflationRate-Month france.png"" width=""800"">
<img src= ""InflationRate-Month germany.png"" width=""800"">
<img src= ""InflationRate-Month great-britain.png"" width=""800"">

# Visualization annual data

In addition to monthly inflation rates, annual inflation rates can also be determined

```` python
Datenpfad = Grundpfad + currentdate + '_Inflationsdaten.csv'
# df = pd.read_csv(filename, sep='\t', encoding = 'utf-16',nrows=10,  index_col=""CASE"") #Filename, Tabulator, Textcodierung, lade nur die ersten 10 Reihen ein, nehme Case als Index
df = pd.read_csv(Datenpfad, sep=',', header=None)
df.columns = ['Year', 'Month', 'Day', 'Country', 'InflationRate']

data = {
'Year': [],
'Country': [],
'InflationRateYear': []}
df_year = pd.DataFrame(data)

for Country in Countries:
    for Jahr in Jahre:
        new_df = df.loc[(df['Year'] == Jahr) & (df['Country'] == Country)]
        data = {
        'Year': [Jahr][0],
        'Country': [Country][0],
        'InflationRateYear': [new_df.InflationRate.mean()][0]}
        df_year = df_year.append(data, ignore_index=True)

fmt = '%1.0f', '%s', '%1.2f'
Datenpfad = Grundpfad + currentdate + '_Inflationsdaten_Year.csv'
np.savetxt(Datenpfad, df_year, delimiter="","", fmt=fmt)


###### nach ländern sortieren
Countries = ['germany', 'great-britain', 'france', 'united-states']
Country = Countries[3]

###### plotten 
fig, ax1 = plt.subplots(figsize=(20,4.5))
ax1.grid(color='black', linestyle='--', linewidth=0.1)
ax1.title.set_text('Yearly Inflation-Rate in '+ Country)
ax1.set_xlabel('date')
ax1.set_ylabel('Inflationsrate')
ax1.plot(df_year[(df_year[""Country""] == Country)].Year, df_year[(df_year[""Country""] == Country)].InflationRateYear, label='Inflation-Rate')
fig.tight_layout()  # otherwise the right y-label is slightly clipped
plt.savefig(""InflationRate-Year "" + Country + "".png"", bbox_inches='tight')
````

<img src= ""InflationRate-Year united-states.png"" width=""800"">



"
821,yash-srivastav/Inflation-Targeting-in-India,Stata,"# Inflation-Targeting-in-India
Senior Thesis Project on Inflation Targeting in India
"
822,ieatcarpets/price-inflation-in-skyblock,,"# price-inflation-in-skyblock
hypixel skyblock

**INTRODUCTION**
 
 Hypixel skyblock is a gamemode in the popular minecraft server Hypixel. In skyblock, the market is one of the most important thing in the game. The market helps player progress and obtain items by using money. However, in the present, the item prices have been inflated, making items much more expensive.
 
 
 
(![5cfe76f01f26c new game Skyblock](https://user-images.githubusercontent.com/99769923/154166147-65d73342-859a-42c8-b66d-24d2add2e69c.png)



 
 **HOW IT HAPPENED**

To understand how it all happened, we need to first take a look at the market. there are 3 markets in skyblock: NPC, bazaar, and auction house. Both bazaar and the auction house is a player based market, which means the money circulates between players. However, NPC is not player based. Players can sell items to the npc for money, which is making the game generate money out of thin air. And with more money in the game, players are willing to afford to buy more expensive items, thus increases the price of the items in the player based market.  


![5e66ec4be8f68 sb 0 7 7](https://user-images.githubusercontent.com/99769923/154166364-71686a07-f13d-4745-a1c8-db145ee4ff28.png)



 Now it all started when the Crystal Hollows update dropped. The new update introduced many things, and one of the thing is gemstones. Players can mine gemstone and sell them to the NPCs for money, and they are still very profitable even now. Because of the update, more money is being generated from the npcs than before update due to the amount of people selling gemstones to the npc. With that, there are alot more money in the game, so the price of items increased. But you ask, if there are more money in the game and the price increased, doesn't that mean that the price is still the same but just have a bigger scale factor? well, yes but no. It might be true for players that are rich and have a stable money making method. But for newer players the increase in price is not very good. The newer players does not have a good money making method, furthermore, they dont have much money tp begin with. Most money making method requires some amount of money to buy the needed items for it, so therefore new players have a hard time getting money.
 
 
 
 ![image (10)](https://user-images.githubusercontent.com/99769923/154166405-214e0965-5aa5-460e-980c-ece050be0ef6.jpg)






"
823,8W9aG/inflation-browser-extension,JavaScript,"# inflation-browser-extension

A browser extension to post prices to a blockchain network.
"
824,AxodusDAO/inflation-control-contracts,TypeScript,"# Advanced Sample Hardhat Project

This project demonstrates an advanced Hardhat use case, integrating other tools commonly used alongside Hardhat in the ecosystem.

The project comes with a sample contract, a test for that contract, a sample script that deploys that contract, and an example of a task implementation, which simply lists the available accounts. It also comes with a variety of other tools, preconfigured to work with the project code.

Try running some of the following tasks:

```shell
npx hardhat accounts
npx hardhat compile
npx hardhat clean
npx hardhat test
npx hardhat node
npx hardhat help
REPORT_GAS=true npx hardhat test
npx hardhat coverage
npx hardhat run scripts/deploy.ts
TS_NODE_FILES=true npx ts-node scripts/deploy.ts
npx eslint '**/*.{js,ts}'
npx eslint '**/*.{js,ts}' --fix
npx prettier '**/*.{json,sol,md}' --check
npx prettier '**/*.{json,sol,md}' --write
npx solhint 'contracts/**/*.sol'
npx solhint 'contracts/**/*.sol' --fix
```

# Etherscan verification

To try out Etherscan verification, you first need to deploy a contract to an Ethereum network that's supported by Etherscan, such as Ropsten.

In this project, copy the .env.example file to a file named .env, and then edit it to fill in the details. Enter your Etherscan API key, your Ropsten node URL (eg from Alchemy), and the private key of the account which will send the deployment transaction. With a valid .env file in place, first deploy your contract:

```shell
hardhat run --network ropsten scripts/sample-script.ts
```

Then, copy the deployment address and paste it in to replace `DEPLOYED_CONTRACT_ADDRESS` in this command:

```shell
npx hardhat verify --network ropsten DEPLOYED_CONTRACT_ADDRESS ""Hello, Hardhat!""
```

# Performance optimizations

For faster runs of your tests and scripts, consider skipping ts-node's type checking by setting the environment variable `TS_NODE_TRANSPILE_ONLY` to `1` in hardhat's environment. For more details see [the documentation](https://hardhat.org/guides/typescript.html#performance-optimizations).
"
825,fscheler/Inflation_Outlook_EZ,HTML,
826,Manu-Gr/Project---Forecasting-Inflation,Jupyter Notebook,"# Project---Forecasting-Inflation

* Analysing the Inflation Trend Over the Historical Data
* Finding hidden patterns and trends associated with Inflation across the years
* The Data collected from IMF Website from the year 1980 till 2022
* The Data is upsampled to get more insights from the data
* The Data is upsampled using pandas library
* Different Visualizations are plotted to check how the inflation behaves acroos different months
* Different Models are checked like Model Based models like Exponential Moving average,qudratic, Quadratic with additive Seasonality, Multiplicative with additive seasonality
* The Data driven models like ARMA,ARIMA , Holts Wilter Method were also tried
* The LSTM Model gave the best results so it was deployed
"
827,longjivwamhi/Fandango-Ratings-Inflation-Analysis,Jupyter Notebook,# Fandango-Ratings-Inflation-Analysis
828,dosanity/unemployment-inflation-analysis,Python,"# Extent of Unemployment on Inflation

Our current economic climate is unique with the rise of the coronavirus. In the economy, we are seeing unique factors such as a high inflation rate paired with a low uneomployment rate. Historically, stagflation or recession-inflation occurs which is a situation where the inflation rate is high and unemployment remains high as well. We are particularly interested to see how these changes in the unemployment rate are potentially impacting the increase in inflation rate.

For more information on the research on inflation, I have written a paper on the current state and impacts on inflation for the year 2022: [Inflation & Monetary Policy](https://github.com/dosanity/unemployment-inflation-analysis/files/9175033/Inflation-and-Monetary-Policy.pdf)

## Data

Our data is from the Federal Reserve Bank of St. Louis. The Federal Bank is central to the nation's economy and provides economic resources and data for US economic statistical analysis. 

For our X variable, we chose to look at the monthly unemployment rate (`UNRATE`). The unemployment rate represents the number of unemployed as a percentage of the labor force. Labor force data are restricted to people 16 years of age and older, who currently reside in 1 of the 50 states or the District of Columbia, who do not reside in institutions (e.g., penal and mental facilities, homes for the aged), and who are not on active duty in the Armed Forces. 

![fredgraph](https://user-images.githubusercontent.com/29410712/180629012-d348804f-6ace-4876-9450-54ed2b60e127.png)

For our Y variable, we chose to look at the Consumer Price Index. The Consumer Price Index for All Urban Consumers: All Items (`CPIAUCSL`) is a price index of a basket of goods and services paid by urban consumers. Percent changes in the price index measure the inflation rate between any two time periods. The most common inflation metric is the percent change from one year ago. It can also represent the buying habits of urban consumers. This particular index includes roughly 88 percent of the total population, accounting for wage earners, clerical workers, technical workers, self-employed, short-term workers, unemployed, retirees, and those not in the labor force.

The CPIs are based on prices for food, clothing, shelter, and fuels; transportation fares; service fees (e.g., water and sewer service); and sales taxes. Prices are collected monthly from about 4,000 housing units and approximately 26,000 retail establishments across 87 urban areas. To calculate the index, price changes are averaged with weights representing their importance in the spending of the particular group. The index measures price changes (as a percent change) from a predetermined reference date. In addition to the original unadjusted index distributed, the Bureau of Labor Statistics also releases a seasonally adjusted index. The unadjusted series reflects all factors that may influence a change in prices. However, it can be very useful to look at the seasonally adjusted CPI, which removes the effects of seasonal changes, such as weather, school year, production cycles, and holidays.

![fredgraph (1)](https://user-images.githubusercontent.com/29410712/180629045-84721112-77dc-443d-ac4e-2360b9ed0a48.png)

## Process

Given the large time frame of data, we parsed the unemployment and inflation into four time periods of relatively equal lengths. 

| Time Periods | Years            |
| ------------ | ---------------- |
| Period 1     | 1948 - 1966      |
| Period 2     | 1967 - 1984      |
| Period 3     | 1985 - 2002      |
| Period 4     | 2003 - 2022      |
| Overall      | 1948 - 2022      |

### Code

In creating the code, we had to go through a few steps:

1. Download the data from FRED database and import the relevant statistical modules.

```
import pandas_datareader as wb
import pandas as pd
from datetime import datetime
import numpy as np
from sklearn import linear_model
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

import math
import statsmodels.api as sm
import statsmodels.formula.api as smf
import scipy.stats as stats
from sklearn.linear_model import LogisticRegression
```

2. Define the variables and appropriate timeframes.

```
fromDate = ""01/01/1948""
toDate = ""07/23/2022""

Inflation = wb.DataReader('CPIAUCSL', 'fred', fromDate, toDate)
UnRate = wb.DataReader('UNRATE', 'fred', fromDate, toDate)
```

3. Clean the data and combine it.

```
Inflation = Inflation.dropna()
UnRate = UnRate.dropna()

dataframe = Inflation.join(UnRate, how=""inner"")

dataframe = dataframe.dropna()

print(dataframe.head())
```

4. Run an Ordinary Least Squares regression to determine the statistical significance and trends.

```
Y = dataframe['CPIAUCSL'].values
X = dataframe['UNRATE'].values

inputsTrain, inputsTest, resultTrain, resultTest = train_test_split(X, Y, test_size = 0.3, random_state = 1)

linRegr = linear_model.LinearRegression()
linRegr.fit(inputsTrain.reshape(-1, 1), resultTrain)
predict = linRegr.predict(inputsTest.reshape(-1, 1))

r2 = r2_score(resultTest, predict)

print(""Our calculated coeffs m:{} and b:{} and our r2 is {}"".format(linRegr.coef_,linRegr.intercept_,r2))

uni_mod = smf.ols(formula=""CPIAUCSL ~ UNRATE"", data = dataframe)
uni_result = uni_mod.fit()
print(uni_result.summary())
```

## Results

#### Period 1 (1948 - 1966) regression results.
```
                            OLS Regression Results                            
==============================================================================
Dep. Variable:               CPIAUCSL   R-squared:                       0.040
Model:                            OLS   Adj. R-squared:                  0.036
Method:                 Least Squares   F-statistic:                     9.388
Date:                Sat, 23 Jul 2022   Prob (F-statistic):            0.00245
Time:                        20:28:20   Log-Likelihood:                -531.19
No. Observations:                 228   AIC:                             1066.
Df Residuals:                     226   BIC:                             1073.
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
Intercept     26.0712      0.678     38.452      0.000      24.735      27.407
UNRATE         0.4169      0.136      3.064      0.002       0.149       0.685
==============================================================================
Omnibus:                        1.903   Durbin-Watson:                   0.004
Prob(Omnibus):                  0.386   Jarque-Bera (JB):                1.892
Skew:                          -0.160   Prob(JB):                        0.388
Kurtosis:                       2.690   Cond. No.                         21.2
==============================================================================
```
In Period 1, the intercept of the regression is 26.0712 and the R-squared is 0.040. The R-squared is the proportion of the variation in the dependent variable that is predictable from the independent variable. In this case, unemployment does have and impact on inflation, but due to the R-squared being small, it is not the total determinant of inflation. This means that 4% of the variability observed in the target variable is explained by this regression model. Additionally, unemployment is statistically significant and as unemployment increases by 1%, inflation increases by 0.4169 percentage points. 

#### Period 2 (1967 - 1984) regression results.
```
                            OLS Regression Results                            
==============================================================================
Dep. Variable:               CPIAUCSL   R-squared:                       0.619
Model:                            OLS   Adj. R-squared:                  0.617
Method:                 Least Squares   F-statistic:                     348.0
Date:                Sat, 23 Jul 2022   Prob (F-statistic):           9.30e-47
Time:                        20:29:42   Log-Likelihood:                -884.05
No. Observations:                 216   AIC:                             1772.
Df Residuals:                     214   BIC:                             1779.
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
Intercept     -1.7768      3.520     -0.505      0.614      -8.715       5.162
UNRATE         9.8912      0.530     18.656      0.000       8.846      10.936
==============================================================================
Omnibus:                        1.392   Durbin-Watson:                   0.020
Prob(Omnibus):                  0.499   Jarque-Bera (JB):                1.476
Skew:                           0.183   Prob(JB):                        0.478
Kurtosis:                       2.825   Cond. No.                         24.1
==============================================================================
```
In Period 2, the intercept of the regression is -1.7768 and the R-squared is 0.619. The R-squared is the proportion of the variation in the dependent variable that is predictable from the independent variable. This means that 61.9% of the variability observed in the target variable is explained by this regression model. Additionally, unemployment is statistically significant and as unemployment increases by 1%, inflation increases by 9.8912 percentage points. 

#### Period 3 (1985 - 2002) regression results.
```
                            OLS Regression Results                            
==============================================================================
Dep. Variable:               CPIAUCSL   R-squared:                       0.377
Model:                            OLS   Adj. R-squared:                  0.374
Method:                 Least Squares   F-statistic:                     129.3
Date:                Sat, 23 Jul 2022   Prob (F-statistic):           9.45e-24
Time:                        20:30:56   Log-Likelihood:                -930.60
No. Observations:                 216   AIC:                             1865.
Df Residuals:                     214   BIC:                             1872.
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
Intercept    221.1728      6.851     32.285      0.000     207.669     234.676
UNRATE       -13.3648      1.175    -11.373      0.000     -15.681     -11.049
==============================================================================
Omnibus:                       10.248   Durbin-Watson:                   0.012
Prob(Omnibus):                  0.006   Jarque-Bera (JB):                4.755
Skew:                          -0.072   Prob(JB):                       0.0928
Kurtosis:                       2.288   Cond. No.                         33.4
==============================================================================
```
In Period 3, the intercept of the regression is 221.1728 and the R-squared is 0.377. The R-squared is the proportion of the variation in the dependent variable that is predictable from the independent variable. This means that 37.7% of the variability observed in the target variable is explained by this regression model. Additionally, unemployment is statistically significant and as unemployment increases by 1%, inflation decreases by 13.3648 percentage points. 

#### Period 4 (2003 - 2022) regression results.
```
                            OLS Regression Results                            
==============================================================================
Dep. Variable:               CPIAUCSL   R-squared:                       0.027
Model:                            OLS   Adj. R-squared:                  0.023
Method:                 Least Squares   F-statistic:                     6.368
Date:                Sat, 23 Jul 2022   Prob (F-statistic):             0.0123
Time:                        20:32:14   Log-Likelihood:                -1087.2
No. Observations:                 234   AIC:                             2178.
Df Residuals:                     232   BIC:                             2185.
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
Intercept    240.8726      5.248     45.894      0.000     230.532     251.213
UNRATE        -2.0694      0.820     -2.523      0.012      -3.685      -0.454
==============================================================================
Omnibus:                        4.851   Durbin-Watson:                   0.004
Prob(Omnibus):                  0.088   Jarque-Bera (JB):                3.032
Skew:                          -0.058   Prob(JB):                        0.220
Kurtosis:                       2.455   Cond. No.                         20.7
==============================================================================
```
In Period 4, the intercept of the regression is 240.8726 and the R-squared is 0.027. The R-squared is the proportion of the variation in the dependent variable that is predictable from the independent variable. In this case, unemployment does have and impact on inflation, but due to the R-squared being small, it is not the total determinant of inflation. This means that 2.7% of the variability observed in the target variable is explained by this regression model. Additionally, unemployment is statistically significant and as unemployment increases by 1%, inflation decreases by 2.0694 percentage points. 

#### Overall (1948 - 2022) regression results.
```
                            OLS Regression Results                            
==============================================================================
Dep. Variable:               CPIAUCSL   R-squared:                       0.031
Model:                            OLS   Adj. R-squared:                  0.030
Method:                 Least Squares   F-statistic:                     28.99
Date:                Sat, 23 Jul 2022   Prob (F-statistic):           9.31e-08
Time:                        20:46:46   Log-Likelihood:                -5187.2
No. Observations:                 894   AIC:                         1.038e+04
Df Residuals:                     892   BIC:                         1.039e+04
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
Intercept     67.7891      9.460      7.166      0.000      49.222      86.356
UNRATE         8.4992      1.579      5.384      0.000       5.401      11.597
==============================================================================
Omnibus:                      397.130   Durbin-Watson:                   0.002
Prob(Omnibus):                  0.000   Jarque-Bera (JB):               82.872
Skew:                           0.494   Prob(JB):                     1.01e-18
Kurtosis:                       1.883   Cond. No.                         21.7
==============================================================================
```

Overall, the intercept of the regression is 67.7891 and the R-squared is 0.031. The R-squared is the proportion of the variation in the dependent variable that is predictable from the independent variable. In this case, unemployment does have and impact on inflation, but due to the R-squared being small, it is not the total determinant of inflation. This means that 3.1% of the variability observed in the target variable is explained by this regression model. Additionally, unemployment is statistically significant and as unemployment increases by 1%, inflation increases by 8.4992 percentage points.

## Possible Explanations

Why are we seeing low unemployment with high inflation?

+ Job Availability
  + Anyone who wants a job can get one, as there is a large group of people that simply dod not want to work.
+ Global Pandemic
  + Despite an intitial shart increase in job loss, many companies have now transitioned to a work-from-home model, limiting job cuts.
  
## Conclusion

Further research can be done to see what other factors influence the inflation rate. Some possible areas for futher investigation is that we can identify impacts of the central bank policy, such as asset purchases and interest rates (Fed funds rate), on unemployment and inflation. We could also look at how the S&P 500 and treasure rates could impact inflation. Additionally, we could utilize different variables to indicate the presence of a recession. 
"
829,kassiili/two-period-inflation,Jupyter Notebook,"# two-period-inflation

This code was used to analyse n-particle simulations of a two-period inflation model (described in [this paper](https://arxiv.org/abs/1905.13580)).

The full analysis is presented in my [master's thesis](https://helda.helsinki.fi/handle/10138/344615).
"
830,supratiksarkaremp22/WebCrawlerForInflation,Python,"# Introduction
**Price Crawler: Tracking Price Inflation**

 A sample batch job has 
been executed using online laptop prices ($500-$800) and the inflation rate in 2019 is measured to be 4.8% which is more than double the annual inflation rate of 
2.3% reported by Bureau of labor statistics for 2019.  

# Pipeline
I built a data pipeline that utilizes petabytes of publicly available web page data to **Calculate Inflation rates from first principles (Prices of Products)**



1. AWS Athena to query indexed WARC Files using HTTP header information in WARC Files
    * Scan 0(100 GB) data instead of PB
2. **Keys** to webpages of interest saved in parquet files on S3
3. Parquet + WARC input to Spark with distributed processing over O(10 GB) data per job
4. Cleaning, filtering and aggregating Product and Price tables with Pandas in Python
5. Plotting and tracking price trends with Dash

**Languages** 
* Bash
* Python 3.7
* Pandas

**Technologies**
* Spark
* AWS Athena
* Dash/Plotly

**Third-Party Libraries**
* AWS CLI


Technologies

* Amazon DynamoDB

"
831,mklewandowski/inflation-stress-reduction,,# inflation-stress-reduction
832,debanil-hutech/Inflation-Next-App,JavaScript,"This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
"
833,mateuszschab/Global-inflation-and-investment,,"# Global inflation and investment

The excel file contains historical data on inflation in countries around the world. It allows you to select a country from a list and track the data since 1960. Some countries and time periods may be missing.
Below is the appearance of the control panel:

![Dashboard](dashboard.png)

Inflation as measured by the consumer price index reflects the annual percentage change in the cost to the average consumer of acquiring a basket of goods and services that may be fixed or changed at specified intervals, such as annually. The Laspeyres formula is generally used.

Excel also determines the convergence to inflation in Poland. It provides information about the return on investment of Polish zlotys in the currency of the selected country since 1995. The data is approximate because it does not take into account the difference in buying and selling currencies, as well as taxes due. 

The excel function also calculates correlations (i.e., the dependence of the data on each other) with respect to currency, and inflation.

Data sources (accessed August 2022):

Inflation data:
https://data.worldbank.org/indicator/FP.CPI.TOTL.ZG

Exchange rates in 1984 - 2022
https://www.nbp.pl/homen.aspx?c=/ascx/ArchAen.ascx

CPI in Poland 1995 - 2021:
https://www.inflationtool.com/polish-zloty?amount=100&year1=2001&year2=2002&frequency=yearly

Historical prices of silver, gold and platinum:
https://stooq.pl/q/d/?s=xptpln&c=0&d1=19950101&d2=20211231&i=y
"
834,lexieheinle/inflation-vs-unemployment,CSS,"# For the Love of the Money
[![Code Issues](https://www.quantifiedcode.com/api/v1/project/4687f2cd8c0d4e43afb40182b9eb9c81/badge.svg)](https://www.quantifiedcode.com/app/project/4687f2cd8c0d4e43afb40182b9eb9c81)

For the Love of the Money is a web application built by Lexie Heinle and Alex Lucke for JOUR491, a special topics class focused on news applications. Increasing attention on the stagnation of interest rates provided an ideal platform for an interactive economic website. The app displays the interest, unemployment and inflation rates for the past 65 years and makes the information easier to comprehend. 
[View the complete news app.](http://lexieheinle.com/apps/economic/)
"
835,InflationX/inflationx.github.io,HTML,
836,tatmush/Youtube-Views-Inflation,Python,"# Youtube-Views-Inflation
Inflate your youtbe views using this script.

## Getting Started
Run the script in your terminal `python inflate.py`

### Prerequisites

**Ubuntu**
 * git clone [Youtube-Views-Inflation](https://github.com/tatmush/Youtube-Views-Inflation.git)
 * pip install selenium
 ###### geckodriver
 A browser engine for browsers running Gecko.
 Follow these instructions [here](https://askubuntu.com/questions/870530/how-to-install-geckodriver-in-ubuntu#871077) or the ones below.
 * download latest release of [geckodriver](https://github.com/mozilla/geckodriver/releases)
 * extract file with `tar -xvzf geckodriver*`
 * change it into an executable `chmod +x geckodriver`
 * add to path `sudo mv geckodriver /usr/local/bin/`
"
837,ferdianakbar/GradeInflationFuzzy,Java,"# GradeInflationFuzzy
"
838,lowsaelee/us-inflation-data,Jupyter Notebook,"# us-inflation-data

Data source: https://www.kaggle.com/varpit94/us-inflation-data-updated-till-may-2021

EDA on the CPI in US from 1913 to 2021.
"
839,HodanYusuf9/Visualize-Inflation-for-2019,Jupyter Notebook,"# Visualize Inflation for 2019

we will visualize the inflation on a map. This will be done by getting the inflation data directly from World Bank using the Pandas-datareader. 
This data will be joined with data from GeoPandas, which provides a world map we can use to create a Choropleth map.
"
840,OmegaMarkXII/Project-DKI-Inflation,,
841,8W9aG/inflation-smart-contract,,"# inflation-smart-contract
A generator for Chainlink Smart Contracts for the inflation blockchain.
"
842,LUNDR/inflation_forecasts_with_tf,Jupyter Notebook,
843,millerngit/RateOfInflation,C++,
844,iamdingkai/what-s-driving-inflation,Jupyter Notebook,
845,jrbsn/Inflation-Deep-Learning,,"# Inflation-Deep-Learning
Predicts opening force using deep neural network created from scratch using only NumPy
"
846,fscheler/Inflation_Tracker_World,HTML,
847,jacobrosen1997/ECON323-Inflation,Jupyter Notebook,
